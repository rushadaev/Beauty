services:
  beauty:
    build:
      context: .
      dockerfile: Dockerfile
    image: beauty
    container_name: beauty
    restart: unless-stopped
    tty: true
    volumes:
      - ./wb-back:/var/www/wb-back
      - ./wb-back/storage/state:/var/www/wb-back/storage/state
    networks:
      - app-network

  webserver:
    image: nginx:alpine
    container_name: nginx-beauty
    restart: unless-stopped
    tty: true
    ports:
      - "80:80"  # Changed the port to 8083 to avoid conflict
      - "443:443"
    volumes:
      - ./wb-back:/var/www/wb-back
      - ./nginx/conf.d:/etc/nginx/conf.d/
      - ./nginx/certs:/etc/nginx/certs/
      - ./nginx/snippets:/etc/nginx/snippets
      #- ./nginx/nginx.conf:/etc/nginx/nginx.conf  # Добавляем эту строку
    networks:
      - app-network

  db:
    image: postgres:16
    container_name: postgres-beauty
    restart: unless-stopped
    tty: true
    ports:
      - "5433:5432"  # Changed the port to 5433 to avoid conflict
    environment:
      POSTGRES_DB: wb_app
      POSTGRES_USER: root
      POSTGRES_PASSWORD: rootpassword
    volumes:
      - dbdata:/var/lib/postgresql/data
    networks:
      - app-network

  redis:
    image: redis:alpine
    container_name: redis-beauty
    restart: unless-stopped
    tty: true
    ports:
      - "6379:6379"
    networks:
      - app-network
    volumes:
      - ./redis-data:/data

  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: scheduler
    user: "33:33" # Ensure container runs as www-data user
    volumes:
      - ./wb-back:/var/www/wb-back
    depends_on:
      - beauty
      - db
      - redis
    networks:
      - app-network
    env_file:
      - ./wb-back/.env
    command: >
      sh -c "
      sleep 10 &&
      /usr/local/bin/cron-schedule.sh"
    restart: always

  horizon:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: horizon
    user: "33:33" # Ensure container runs as www-data user
    volumes:
      - ./wb-back:/var/www/wb-back
      - ./wb-back/storage/state:/var/www/wb-back/storage/state
    depends_on:
      - beauty
      - db
      - redis
    networks:
      - app-network
    env_file:
      - ./wb-back/.env
    command: >
      sh -c "
      sleep 10 &&
      php /var/www/wb-back/artisan horizon"
    restart: always

  nodejs-server:
    build:
      context: ./nodejs-server
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV}
    image: nodejs-server
    container_name: nodejs-server
    restart: unless-stopped
    tty: true
    ports:
      - "3000:3000"  # Expose the Node.js server on port 3000
    volumes:
      - ./nodejs-server:/usr/src/app:delegated
      - /usr/src/app/node_modules
      - ./wb-back/storage/state:/var/www/wb-back/storage/state:delegated
    networks:
      - app-network
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=3000
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - TELEGRAM_BOT_TOKEN_SUPPLIES_NEW=${TELEGRAM_BOT_TOKEN_SUPPLIES_NEW}
      - TELEGRAM_BOT_TOKEN_MASTER=${TELEGRAM_BOT_TOKEN_MASTER}
      - LARAVEL_API_URL=${LARAVEL_API_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}  # Add this line
    command: >
      sh -c "
      npm run dev"


#  auth-worker:
#    build:
#      context: ./nodejs-server
#      dockerfile: Dockerfile
#      args:
#        NODE_ENV: ${NODE_ENV}
#    image: nodejs-server
#    container_name: auth-worker
#    restart: unless-stopped
#    tty: true
#    volumes:
#      - ./nodejs-server:/usr/src/app
#      - ./nodejs-server/node_modules:/usr/src/app/node_modules
#      - ./wb-back/storage/state:/var/www/wb-back/storage/state
#    networks:
#      - app-network
#    environment:
#      - NODE_ENV=${NODE_ENV}
#      - PORT=3000  # Optional, can be omitted if not used by the worker
#      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
#      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
#      - TELEGRAM_BOT_TOKEN_SUPPLIES_NEW=${TELEGRAM_BOT_TOKEN_SUPPLIES_NEW}
#      - LARAVEL_API_URL=${LARAVEL_API_URL}
#    command: >
#      sh -c "npm run start:worker"

networks:
  app-network:
    driver: bridge

volumes:
  dbdata:
    driver: local
  state_files:
    driver: local
