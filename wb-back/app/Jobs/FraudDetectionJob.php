<?php

namespace App\Jobs;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB; // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
use App\Services\YclientsService;
use App\Services\TelegramService;
use App\Models\Branch;
use Carbon\Carbon;

class FraudDetectionJob implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    private $branchId;
    private $startDate;
    private $endDate;
    
    public $timeout = 300;
    public $tries = 3;
    public $maxExceptions = 3;
    

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤–∏–ª —Ñ—Ä–æ–¥–∞
    private const MIN_RECORDS_PER_DAY = 2;
    private const SUSPICIOUS_HOURS_SEQUENCE = 2;
    private const RATE_LIMIT_DELAY = 1000000; // 1 —Å–µ–∫—É–Ω–¥–∞ –≤ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞—Ö
    private const MAX_RETRIES_ON_RATE_LIMIT = 3;

    public function __construct(int $branchId, string $startDate, string $endDate)
    {
        $this->branchId = $branchId;
        $this->startDate = $startDate;
        $this->endDate = $endDate;

        $this->onQueue('fraud-detection');
    }

    public function handle(YclientsService $yclientsService, TelegramService $telegramService)
    {
        try {
            Log::info('üöÄ FraudDetectionJob: Starting job', [
                'branch_id' => $this->branchId,
                'start_date' => $this->startDate,
                'end_date' => $this->endDate,
                'job_id' => $this->job->getJobId()
            ]);

            // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            $adminLogin = config('services.yclients.admin_login');
            $adminPassword = config('services.yclients.admin_password');

            $authResult = $yclientsService->authenticateByCredentials(
                $adminLogin,
                $adminPassword
            );

            if (!isset($authResult['success']) || !$authResult['success']) {
                Log::error('‚ùå FraudDetectionJob: Authentication failed', [
                    'auth_result' => $authResult
                ]);
                return;
            }

            $yclientsService->setUserToken($authResult['token']);
            Log::info('‚úÖ FraudDetectionJob: Authentication successful');

            // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
            $records = $yclientsService->getRecords($this->branchId, [
                'start_date' => $this->startDate,
                'end_date' => $this->endDate
            ]);

            if (empty($records)) {
                Log::info('‚ÑπÔ∏è FraudDetectionJob: No records found');
                return;
            }

            Log::info('üìä FraudDetectionJob: Records fetched', [
                'total_records' => count($records)
            ]);

            // 3. –°–±–æ—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            $detailedRecords = [];
            $processedCount = 0;
            $totalRecords = count($records);

            foreach ($records as $record) {
                $processedCount++;
                
                try {
                    Log::debug('üîÑ Processing record', [
                        'record_id' => $record['id'],
                        'progress' => "{$processedCount}/{$totalRecords}"
                    ]);

                    $recordDetails = $this->getRecordWithRetry($yclientsService, $record['id']);
                    
                    if ($recordDetails && isset($recordDetails['client']['phone'])) {
                        $detailedRecords[] = $recordDetails;
                    }

                } catch (\Exception $e) {
                    Log::error('‚ùå Error getting record details', [
                        'record_id' => $record['id'],
                        'error' => $e->getMessage(),
                        'progress' => "{$processedCount}/{$totalRecords}"
                    ]);
                    continue;
                }
            }

            // 4. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            $groupedByPhone = [];
            foreach ($detailedRecords as $record) {
                $phone = $record['client']['phone'];
                if (!isset($groupedByPhone[$phone])) {
                    $groupedByPhone[$phone] = [];
                }
                $groupedByPhone[$phone][] = $record;
            }

            Log::info('üë• FraudDetectionJob: Grouped by phone', [
                'total_phones' => count($groupedByPhone),
                'records_processed' => count($detailedRecords)
            ]);

            // 5. –ê–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–µ–π –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—É
            foreach ($groupedByPhone as $phone => $clientRecords) {
                $this->analyzeClientRecords($phone, $clientRecords, $telegramService);
            }

            Log::info('‚úÖ FraudDetectionJob: Job completed successfully');

        } catch (\Exception $e) {
            Log::error('‚ùå FraudDetectionJob: Error in job execution', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            throw $e;
        }
    }

    private function getRecordWithRetry(YclientsService $yclientsService, $recordId, $attempt = 1)
    {
        try {
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            usleep(self::RATE_LIMIT_DELAY);
            
            $recordDetails = $yclientsService->getRecord($this->branchId, $recordId);
            return $recordDetails;
            
        } catch (\Exception $e) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π rate limit
            if ($e instanceof RequestException && $e->response->status() === 429) {
                if ($attempt <= self::MAX_RETRIES_ON_RATE_LIMIT) {
                    Log::info('Rate limit hit, waiting before retry', [
                        'attempt' => $attempt,
                        'record_id' => $recordId
                    ]);
                    
                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    sleep(pow(2, $attempt));
                    
                    return $this->getRecordWithRetry($yclientsService, $recordId, $attempt + 1);
                }
            }
            
            throw $e;
        }
    }

    private function analyzeClientRecords($phone, $records, $telegramService)
    {
        Log::info('üîç Analyzing records for phone', [
            'phone' => $phone,
            'records_count' => count($records)
        ]);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ—Ä–æ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        $existingFraud = DB::table('fraud_checks')
            ->where('client_phone', $phone)
            ->where('status', 'pending')
            ->whereDate('check_date', Carbon::today())
            ->first();

        if ($existingFraud) {
            Log::info('Skip: Unresolved fraud already exists for this phone today', [
                'phone' => $phone,
                'fraud_check_id' => $existingFraud->id
            ]);
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–≥–∏–∫—É –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–Ω—è–º
        $recordsByDay = [];
        foreach ($records as $record) {
            $date = Carbon::parse($record['date'])->format('Y-m-d');
            if (!isset($recordsByDay[$date])) {
                $recordsByDay[$date] = [];
            }
            $recordsByDay[$date][] = $record;
        }

        $suspiciousPatterns = [];
        $hasFraud = false;
        $severity = 'suspicious';
        $anomalyTypes = [];

        // –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        foreach ($recordsByDay as $date => $dayRecords) {
            usort($dayRecords, function($a, $b) {
                return Carbon::parse($a['date'])->timestamp - Carbon::parse($b['date'])->timestamp;
            });

            if (count($dayRecords) >= self::MIN_RECORDS_PER_DAY) {
                $suspiciousPatterns[] = "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–µ–Ω—å ({$date}): " . count($dayRecords);
                $anomalyTypes[] = 'multiple_bookings';
                $hasFraud = true;
                
                if (count($dayRecords) >= 4) {
                    $severity = 'critical';
                }
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∞—Å–æ–≤
            for ($i = 0; $i < count($dayRecords) - 1; $i++) {
                $current = Carbon::parse($dayRecords[$i]['date']);
                $next = Carbon::parse($dayRecords[$i + 1]['date']);
                
                $hoursDiff = $next->diffInHours($current);
                
                if ($hoursDiff <= self::SUSPICIOUS_HOURS_SEQUENCE) {
                    $suspiciousPatterns[] = "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏: {$current->format('H:i')} –∏ {$next->format('H:i')}";
                    $anomalyTypes[] = 'consecutive_bookings';
                    $hasFraud = true;
                    
                    if ($hoursDiff <= 1) {
                        $severity = 'critical';
                    }
                }
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —É—Å–ª—É–≥
            $serviceIds = [];
            foreach ($dayRecords as $record) {
                foreach ($record['services'] as $service) {
                    $serviceIds[] = $service['id'];
                }
            }
            
            $serviceCounts = array_count_values($serviceIds);
            foreach ($serviceCounts as $serviceId => $count) {
                if ($count > 1) {
                    $hasFraud = true;
                    $serviceName = $dayRecords[0]['services'][array_search($serviceId, array_column($dayRecords[0]['services'], 'id'))]['title'];
                    $suspiciousPatterns[] = "–ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è —É—Å–ª—É–≥–∞: {$serviceName} ({$count} —Ä–∞–∑)";
                    $anomalyTypes[] = 'repeated_service';
                }
            }
        }

        if ($hasFraud) {
            // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –∞–Ω–æ–º–∞–ª–∏–π
            $anomalyTypes = array_unique($anomalyTypes);
            $primaryAnomalyType = reset($anomalyTypes); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–∏–ø –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            $fraudCheckId = DB::table('fraud_checks')->insertGetId([
                'client_phone' => $phone,
                'check_date' => now(),
                'anomaly_type' => $primaryAnomalyType,
                'severity' => $severity,
                'records_affected' => json_encode(array_column($records, 'id')),
                'record_details' => json_encode([
                    'patterns' => $suspiciousPatterns,
                    'branch_id' => $this->branchId,
                    'all_anomaly_types' => $anomalyTypes
                ]),
                'status' => 'pending',
                'created_at' => now(),
                'updated_at' => now()
            ]);

            Log::warning('‚ö†Ô∏è Created fraud check record', [
                'id' => $fraudCheckId,
                'phone' => $phone,
                'severity' => $severity,
                'anomaly_types' => $anomalyTypes
            ]);

            $branch = Branch::where('yclients_id', $this->branchId)->first();
            $branchName = $branch ? $branch->name : "–§–∏–ª–∏–∞–ª {$this->branchId}";
            
            $result = $this->sendFraudAlert($phone, $records, $suspiciousPatterns, $telegramService, $branchName, $severity);
            
            Log::info('üì® Fraud alert sending result', [
                'success' => $result,
                'fraud_check_id' => $fraudCheckId,
                'phone' => $phone
            ]);
        }
    }

    private function sendFraudAlert($phone, $records, $patterns, $telegramService, $branchName, $severity)
    {
        $severityEmoji = $severity === 'critical' ? 'üî¥' : 'üü°';
        $message = "{$severityEmoji} *–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏!*\n\n";
        $message .= "üì± –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: `{$phone}`\n";
        $message .= "üè¢ –§–∏–ª–∏–∞–ª: {$branchName}\n";
        $message .= "‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å: " . ($severity === 'critical' ? '*–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô*' : '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π') . "\n\n";

        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–≥–∏–∫—É –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏ –≤—ã–≤–æ–¥–∞ –∑–∞–ø–∏—Å–µ–π
        $groupedRecords = [];
        foreach ($records as $record) {
            $date = Carbon::parse($record['date'])->format('Y-m-d');
            if (!isset($groupedRecords[$date])) {
                $groupedRecords[$date] = [];
            }
            $groupedRecords[$date][] = $record;
        }

        foreach ($groupedRecords as $date => $dayRecords) {
            $message .= "\nüìÖ *" . Carbon::parse($date)->format('d.m.Y') . "*\n";
            $message .= "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: " . count($dayRecords) . "\n";
            
            usort($dayRecords, function($a, $b) {
                return Carbon::parse($a['date'])->timestamp - Carbon::parse($b['date'])->timestamp;
            });

            foreach ($dayRecords as $record) {
                $time = Carbon::parse($record['date'])->format('H:i');
                $services = implode(', ', array_map(function($service) {
                    return $service['title'];
                }, $record['services']));

                $message .= "\nüïí {$time}\n";
                $message .= "üìù –£—Å–ª—É–≥–∏: {$services}\n";
            }
        }

        $message .= "\n‚ö†Ô∏è –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:\n";
        foreach ($patterns as $pattern) {
            $message .= "- {$pattern}\n";
        }

        $message .= "\n‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–∏—Å–∏ –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º!";

        return $telegramService->sendMessageToAllAdmins($message);
    }

    public function failed(\Throwable $e)
    {
        Log::error('‚ùå FraudDetectionJob: Job failed finally', [
            'branch_id' => $this->branchId,
            'error' => $e->getMessage()
        ]);
    }
}