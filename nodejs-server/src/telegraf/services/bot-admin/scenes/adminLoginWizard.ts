import { Scenes, Markup, Composer } from 'telegraf';
import { MyContext, MySession } from '../../../types/MyContext';
import laravelService from "../../../../services/laravelService";

interface AdminSessionData {
    phone?: string;
    password?: string;
    apiToken?: string;
    user?: any;
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
const formatPhone = (phone: string): string => {
    let cleaned = phone.replace(/\D/g, '');
    if (cleaned.startsWith('8')) {
        cleaned = '7' + cleaned.slice(1);
    }
    if (!cleaned.startsWith('7')) {
        cleaned = '7' + cleaned;
    }
    return cleaned;
};

const isValidPhone = (phone: string): boolean => {
    const cleaned = phone.replace(/\D/g, '');
    return /^[78]\d{10}$/.test(cleaned);
};

// –®–∞–≥ 1: –ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
const showMainMenu = async (ctx: MyContext) => {
    const messageText = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è CherryTown!\n\n`
        + `üéØ –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n`
        + `‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º\n`
        + `‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏\n`
        + `‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å —Å–æ —Å–∫–ª–∞–¥–æ–º\n`
        + `‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\n`
        + `‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!\n\n`
        + `üîê –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è:`;

    const mainMenuKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', 'admin_authorization')],
    ]);

    if (ctx.callbackQuery?.message) {
        try {
            await ctx.editMessageText(messageText, mainMenuKeyboard);
        } catch (error) {
            await ctx.reply(messageText, mainMenuKeyboard);
        }
    } else {
        await ctx.reply(messageText, mainMenuKeyboard);
    }

    return ctx.wizard.next();
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
const handleAdminAuthorization = new Composer<MyContext>();
handleAdminAuthorization.action('admin_authorization', async (ctx) => {
    await ctx.answerCbQuery();
    const message = `üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n+7XXXXXXXXXX`;

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_admin_menu')],
    ]);

    await ctx.editMessageText(message, keyboard);
    return ctx.wizard.next();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
const handlePhoneInput = new Composer<MyContext>();
handlePhoneInput.action('back_to_admin_menu', async (ctx) => {
    await ctx.answerCbQuery();
    return ctx.scene.reenter();
});

handlePhoneInput.on('text', async (ctx) => {
    const phone = formatPhone(ctx.message.text);

    if (!isValidPhone(phone)) {
        await ctx.reply(
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n+7XXXXXXXXXX',
            Markup.inlineKeyboard([
                [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_admin_menu')]
            ])
        );
        return;
    }

    ctx.scene.session.phone = phone;

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_admin_phone')] // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ action
    ]);

    await ctx.reply('üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ YClients:', keyboard);
    return ctx.wizard.next();
});

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
const handlePasswordInput = new Composer<MyContext>();

handlePasswordInput.action('back_to_admin_phone', async (ctx) => { // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ action
    await ctx.answerCbQuery();
    const message = `üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n+7XXXXXXXXXX`;
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_admin_menu')], // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ action
    ]);
    await ctx.editMessageText(message, keyboard);
    return ctx.wizard.back();
});

handlePasswordInput.on('text', async (ctx) => {
    const password = ctx.message.text;
    const phone = ctx.scene.session.phone;

    try {
        await ctx.reply('‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ...');
        const response = await laravelService.authAdmin(phone, password, ctx.from.id);
        
        if (response?.success) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userRole = response.user?.user_role_slug;
            if (!['owner', 'administrator'].includes(userRole)) {
                const errorMessage = await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.\n\n–≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
                await delay(2000);
                const errorKeyboard = Markup.inlineKeyboard([
                    [Markup.button.callback('üëà –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'back_to_admin_menu')]
                ]);
                await ctx.telegram.editMessageText(
                    ctx.chat.id,
                    errorMessage.message_id,
                    undefined,
                    '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.\n\n–≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.',
                    { reply_markup: errorKeyboard.reply_markup }
                );
                return;
            }

            if (ctx.session) {
                const sessionData: AdminSessionData = {
                    phone,
                    password,
                    apiToken: response.token,
                    user: response.user
                };
                Object.assign(ctx.session, sessionData);
            }

            try {
                const messagesToDelete = ctx.message.message_id;
                for (let i = 0; i < 3; i++) {
                    try {
                        await ctx.deleteMessage(messagesToDelete - i);
                    } catch (e) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                    }
                }
            } catch (e) {
                console.log('Could not delete messages:', e);
            }

            // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            delete ctx.scene.session.phone;
            delete ctx.scene.session.password;

            const successMsg = await ctx.reply('üîÑ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
            await delay(700);
            await ctx.telegram.editMessageText(
                ctx.chat.id,
                successMsg.message_id,
                undefined,
                '‚ú® –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ...'
            );
            await delay(700);
            await ctx.telegram.editMessageText(
                ctx.chat.id,
                successMsg.message_id,
                undefined,
                'üéâ –£—Å–ø–µ—à–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.'
            );

            await delay(1000);
            return ctx.scene.enter('admin_main');
        }

        const errorMsg = response?.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
        const errorMessage = await ctx.reply('‚ùå ' + errorMsg);
        await delay(500);

        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'retry_admin_auth')], // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ action
            [Markup.button.callback('üëà –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'back_to_admin_menu')] // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ action
        ]);

        await ctx.telegram.editMessageText(
            ctx.chat.id,
            errorMessage.message_id,
            undefined,
            '‚ùå ' + errorMsg,
            { reply_markup: errorKeyboard.reply_markup }
        );

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        
        let errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. ';
        if (error.response?.data?.message) {
            errorMessage += error.response.data.message;
        } else {
            errorMessage += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        }

        const errorMsg = await ctx.reply('‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞...');
        await delay(500);

        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'retry_admin_auth')], // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ action
            [Markup.button.callback('üëà –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'back_to_admin_menu')] // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ action
        ]);

        await ctx.telegram.editMessageText(
            ctx.chat.id,
            errorMsg.message_id,
            undefined,
            '‚ùå ' + errorMessage,
            { reply_markup: errorKeyboard.reply_markup }
        );
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
// –ò—Å–ø—Ä–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ retry_admin_auth
handlePasswordInput.action('retry_admin_auth', async (ctx) => {
    try {
        await ctx.answerCbQuery(); // –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await ctx.scene.reenter(); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω—É
    } catch (error) {
        console.error('Error in retry_admin_auth:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω—É
        await ctx.scene.reenter();
    }
});

// –ò—Å–ø—Ä–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ back_to_admin_menu
handlePasswordInput.action('back_to_admin_menu', async (ctx) => {
    try {
        await ctx.answerCbQuery(); // –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await ctx.scene.reenter(); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω—É
    } catch (error) {
        console.error('Error in back_to_admin_menu:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω—É
        await ctx.scene.reenter();
    }
});



// –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É wizard —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
export const adminLoginWizard = new Scenes.WizardScene<MyContext>(
    'admin_login_wizard', // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
    showMainMenu,
    handleAdminAuthorization,
    handlePhoneInput,
    handlePasswordInput
);

// –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
adminLoginWizard.use(async (ctx, next) => {
    try {
        await next();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ admin login wizard:', error);
        await ctx.reply(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
            Markup.inlineKeyboard([
                [Markup.button.callback('üëà –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'back_to_admin_menu')]
            ])
        );
    }
});

