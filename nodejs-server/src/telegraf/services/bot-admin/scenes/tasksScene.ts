import { Scenes, Markup } from 'telegraf';
import { MyContext } from '../../../types/MyContext';
import logger from '../../../../utils/logger/loggerTelegram';
import LaravelService from "../../../../services/laravelService";
import { fmt, bold } from 'telegraf/format';

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è —Å—Ü–µ–Ω—ã
interface TasksState {
    page: number;
    filter: 'active' | 'completed' | 'all';
}

interface SceneState {
    tasksState: TasksState;
}

type TasksSceneContext = MyContext & {
    scene: Scenes.SceneContextScene<MyContext> & {
        state: SceneState;
    };
};

export const tasksScene = new Scenes.BaseScene<TasksSceneContext>('tasks');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É
tasksScene.enter(async (ctx) => {
    if (!ctx.scene.state) {
        ctx.scene.state = {
            tasksState: {
                page: 1,
                filter: 'active' as const
            }
        };
    } else {
        ctx.scene.state.tasksState = {
            page: 1,
            filter: 'active' as const
        };
    }
    
    await showTasks(ctx);
});

async function showTasks(ctx: TasksSceneContext) {
    try {
        const state = ctx.scene.state.tasksState;
        
        const response = await LaravelService.getTasks({
            page: state.page,
            per_page: 5,
            filter: state.filter
        });

        const tasks = response?.data?.data || [];
        const total = response?.data?.total || 0;
        const totalPages = Math.ceil(total / 5) || 1;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (state.page > totalPages) {
            state.page = totalPages;
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á
        if (!tasks.length) {
            const message = state.filter === 'completed' 
                ? 'üìã –ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á' 
                : 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç';

            if (ctx.callbackQuery) {
                try {
                    await ctx.editMessageText(message, buildMainMenuKeyboard());
                } catch (error) {
                    if (!error.message?.includes('message is not modified')) {
                        await ctx.reply(message, buildMainMenuKeyboard());
                    }
                }
            } else {
                await ctx.reply(message, buildMainMenuKeyboard());
            }
            return;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const headerText = [
            'üìã –ó–∞–¥–∞—á–∏',
            '',
            `–í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${total}`,
            `–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${state.page}/${totalPages}`,
            '',
            '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:'
        ].join('\n');

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        const keyboard = [
            // –ó–∞–¥–∞—á–∏
            ...tasks.map(task => ([
                Markup.button.callback(
                    `${getStatusEmoji(task.status)} ${task.title.substring(0, 35)}${task.title.length > 35 ? '...' : ''}`,
                    `view_task_${task.id}`
                )
            ])),

            // –ù–∞–≤–∏–≥–∞—Ü–∏—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
            ...(totalPages > 1 ? [[
                ...(state.page > 1 ? [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'prev_page')] : []),
                ...(state.page < totalPages ? [Markup.button.callback('‚û°Ô∏è –í–ø–µ—Ä—ë–¥', 'next_page')] : [])
            ]] : []),

            // –§–∏–ª—å—Ç—Ä—ã
            [
                Markup.button.callback(
                    state.filter === 'active' ? 'üîµ –ê–∫—Ç–∏–≤–Ω—ã–µ' : '‚ö™Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ',
                    'filter_active'
                ),
                Markup.button.callback(
                    state.filter === 'completed' ? 'üîµ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ' : '‚ö™Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ',
                    'filter_completed'
                )
            ],

            // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            [Markup.button.callback('üëà –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'mainmenu')]
        ].filter(row => row.length > 0); // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Ä—è–¥—ã

        const markup = Markup.inlineKeyboard(keyboard);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (ctx.callbackQuery) {
            try {
                await ctx.editMessageText(headerText, markup);
            } catch (error) {
                if (!error.message?.includes('message is not modified')) {
                    console.error('Error updating message:', error);
                    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    await ctx.reply(headerText, markup);
                }
            }
        } else {
            await ctx.reply(headerText, markup);
        }

    } catch (error) {
        logger.error('Error in showTasks:', error);
        const errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á';
        
        if (ctx.callbackQuery) {
            try {
                await ctx.editMessageText(errorMessage, buildMainMenuKeyboard());
            } catch {
                await ctx.reply(errorMessage, buildMainMenuKeyboard());
            }
        } else {
            await ctx.reply(errorMessage, buildMainMenuKeyboard());
        }
    }
}

// –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
tasksScene.action(/^get_master_photo_(\d+)$/, async (ctx) => {
    try {
        const taskId = parseInt(ctx.match[1], 10);
        const task = await LaravelService.getTaskById(taskId);

        if (!task?.data) {
            await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        await ctx.answerCbQuery('üîç –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ...');

        const photoResult = await LaravelService.getMasterPhoto(task.data.master_phone);

        if (!photoResult.success) {
            await ctx.reply(
                '‚ùå ' + (photoResult.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –º–∞—Å—Ç–µ—Ä–∞'),
                Markup.inlineKeyboard([[
                    Markup.button.callback('üëà –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞—á–µ', `view_task_${taskId}`)
                ]])
            );
            return;
        }

        const messageText = `
üñº –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –º–∞—Å—Ç–µ—Ä–∞:
üë§ ${task.data.master_name}
üì± ${task.data.master_phone}

${photoResult.data.photo_url}
`.trim();

        await ctx.reply(messageText, Markup.inlineKeyboard([[
            Markup.button.callback('üëà –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞—á–µ', `view_task_${taskId}`)
        ]]));

    } catch (error) {
        logger.error('Error in get_master_photo handler:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

// –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏
tasksScene.action(/^view_task_(\d+)$/, async (ctx) => {
    try {
        const taskId = parseInt(ctx.match[1], 10);
        const response = await LaravelService.getTaskById(taskId);

        if (!response?.data) {
            await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        const task = response.data;

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏, –∞ –Ω–µ –º–∞—Å—Å–∏–≤–∞
        const messageText = `
üìã –ó–∞–¥–∞—á–∞ #${task.id}

üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${task.title}
üë§ –ú–∞—Å—Ç–µ—Ä: ${task.master_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}
${task.master_phone ? `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${task.master_phone}` : ''}
üîÑ –°—Ç–∞—Ç—É—Å: ${getStatusText(task.status)}
‚è∞ –°–æ–∑–¥–∞–Ω–æ: ${formatDate(task.created_at)}
${task.deadline ? `‚ö†Ô∏è –î–µ–¥–ª–∞–π–Ω: ${formatDate(task.deadline)}` : ''}
${task.completed_at ? `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${formatDate(task.completed_at)}` : ''}

${task.description ? `üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${task.description}` : ''}
`.trim();

        const keyboard = [];
        
        if (task.status !== 'completed') {
            keyboard.push([
                Markup.button.callback('‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π', `complete_task_${task.id}`)
            ]);
            if (task.status === 'pending') {
                keyboard.push([
                    Markup.button.callback('üîÑ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', `progress_task_${task.id}`)
                ]);
            }
        }

        if (task.type === 'photo_update') {
            keyboard.push([
                Markup.button.callback('üñº –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –º–∞—Å—Ç–µ—Ä–∞', `get_master_photo_${task.id}`)
            ]);
        }

        keyboard.push([Markup.button.callback('üëà –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'back_to_tasks')]);
        keyboard.push([Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]);

        await ctx.editMessageText(messageText, {
            parse_mode: 'HTML',
            ...Markup.inlineKeyboard(keyboard)
        });

    } catch (error) {
        logger.error('Error in view_task handler:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á–∏');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏
tasksScene.action(/^complete_task_(\d+)$/, async (ctx) => {
    try {
        const taskId = parseInt(ctx.match[1], 10);
        const result = await LaravelService.completeTask(taskId);

        if (result?.success) {
            await ctx.answerCbQuery('‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è');
            await showTasks(ctx);
        } else {
            await ctx.answerCbQuery('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏');
        }
    } catch (error) {
        logger.error('Error in complete_task handler:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

tasksScene.action(/^progress_task_(\d+)$/, async (ctx) => {
    try {
        const taskId = parseInt(ctx.match[1], 10);
        const result = await LaravelService.updateTaskStatus(taskId, 'in_progress');

        if (result?.success) {
            await ctx.answerCbQuery('‚úÖ –ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É');
            await showTasks(ctx);
        } else {
            await ctx.answerCbQuery('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏');
        }
    } catch (error) {
        logger.error('Error in progress_task handler:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä—ã
tasksScene.action('prev_page', async (ctx) => {
    if (ctx.scene.state.tasksState.page > 1) {
        ctx.scene.state.tasksState.page--;
    }
    await ctx.answerCbQuery();
    await showTasks(ctx);
});

tasksScene.action('next_page', async (ctx) => {
    ctx.scene.state.tasksState.page++;
    await ctx.answerCbQuery();
    await showTasks(ctx);
});

tasksScene.action('filter_active', async (ctx) => {
    ctx.scene.state.tasksState.filter = 'active';
    ctx.scene.state.tasksState.page = 1;
    await ctx.answerCbQuery('üîµ –ü–æ–∫–∞–∑–∞–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏');
    await showTasks(ctx);
});

tasksScene.action('filter_completed', async (ctx) => {
    ctx.scene.state.tasksState.filter = 'completed';
    ctx.scene.state.tasksState.page = 1;
    await ctx.answerCbQuery('üîµ –ü–æ–∫–∞–∑–∞–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏');
    await showTasks(ctx);
});

tasksScene.action('back_to_tasks', async (ctx) => {
    await ctx.answerCbQuery();
    await showTasks(ctx);
});

tasksScene.action('mainmenu', async (ctx) => {
    await ctx.answerCbQuery();
    return ctx.scene.enter('admin_main');
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getStatusEmoji(status: string): string {
    return {
        'pending': '‚è≥',
        'in_progress': 'üîÑ',
        'completed': '‚úÖ'
    }[status] || '‚ùì';
}

function getStatusText(status: string): string {
    return {
        'pending': '–û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
        'in_progress': '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
        'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω–∞'
    }[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function formatDate(date: string): string {
    return new Date(date).toLocaleString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

function buildMainMenuKeyboard() {
    return Markup.inlineKeyboard([[
        Markup.button.callback('üëà –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'mainmenu')
    ]]);
}

export default tasksScene;