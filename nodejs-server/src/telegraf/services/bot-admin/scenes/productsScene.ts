import { Scenes, Markup } from 'telegraf';
import { MyContext } from '../../../types/MyContext';
import LaravelService from '../../../../services/laravelService';
import logger from '../../../../utils/logger/loggerTelegram';

export const productsScene = new Scenes.BaseScene<MyContext>('products_scene');

productsScene.enter(async (ctx) => {
    try {
        // –ß–∏—Ç–∞–µ–º –∏–∑ –æ–±—â–µ–π —Å–µ—Å—Å–∏–∏
        const branchId = parseInt(ctx.session.selectedBranchId, 10);
        
        console.log('Products scene enter:', {
            sessionBranchId: ctx.session.selectedBranchId,
            parsedBranchId: branchId
        });
        
        if (!branchId || isNaN(branchId)) {
            await ctx.reply('–§–∏–ª–∏–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
            return ctx.scene.enter('select_branch_scene');
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Ñ–∏–ª–∏–∞–ª–∞
        const response = await LaravelService.getProducts(branchId);
        
        if (!response?.success || !response?.data) {
            await ctx.reply('–í —ç—Ç–æ–º —Ñ–∏–ª–∏–∞–ª–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤');
            return ctx.scene.enter('select_branch_scene');
        }

        const products = response.data;
        const buttons = [];
        
        for (let i = 0; i < products.length; i++) {
            const product = products[i];
            buttons.push([
                Markup.button.callback(
                    `${product.title} (${product.actual_amounts?.[0]?.amount || 0} —à—Ç)`, 
                    `product_${product.good_id}`
                )
            ]);
        }

        buttons.push([
            Markup.button.callback('üëà –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª–∏–∞–ª–∞–º', 'back_to_branches'),
            Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')
        ]);

        const messageText = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫:';
        
        if (ctx.callbackQuery?.message) {
            await ctx.editMessageText(messageText, Markup.inlineKeyboard(buttons));
        } else {
            await ctx.reply(messageText, Markup.inlineKeyboard(buttons));
        }

    } catch (error) {
        console.error('Error in products scene:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤');
        return ctx.scene.enter('select_branch_scene');
    }
});

productsScene.action('back_to_branches', async (ctx) => {
    await ctx.answerCbQuery();
    return ctx.scene.enter('select_branch_scene');
});

productsScene.action('warehouse_list', async (ctx) => {
    await ctx.answerCbQuery();
    return ctx.scene.enter('warehouse_notifications_list');
});

productsScene.action('mainmenu', async (ctx) => {
    await ctx.answerCbQuery();
    return ctx.scene.enter('admin_main');
});

productsScene.action(/^product_(\d+)$/, async (ctx) => {
    try {
        const productId = ctx.match[1];
        
        logger.info('–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞:', {
            productId,
            branch_id: ctx.session.selectedBranchId,
            user_id: ctx.from?.id
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ session (–Ω–µ scene.session!)
        ctx.session.selectedProductId = productId;
        
        logger.info('–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', {
            selectedProductId: productId,
            session: ctx.session
        });

        // –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥
        const result = await ctx.scene.enter('create_warehouse_notification_scene');
        
        // –¢–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await ctx.answerCbQuery('–¢–æ–≤–∞—Ä –≤—ã–±—Ä–∞–Ω ‚úì');

        logger.info('–ü–µ—Ä–µ—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω', { 
            success: true,
            currentScene: ctx.scene.current?.id
        });

    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–¥—É–∫—Ç–∞:', {
            error: error instanceof Error ? error.message : 'Unknown error',
            productId: ctx.match?.[1],
            userId: ctx.from?.id
        });
        
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚ùå');
        await ctx.reply(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            Markup.inlineKeyboard([
                [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'refresh_products')],
                [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
            ])
        );
    }
});

productsScene.action('refresh_products', async (ctx) => {
    await ctx.answerCbQuery('–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫... ‚åõ');
    await ctx.scene.reenter();
});