import { Scenes, Markup } from 'telegraf';
import { MyContext } from '../../../types/MyContext';
import LaravelService from "../../../../services/laravelService";
import * as fs from 'fs';

export const employmentScene = new Scenes.BaseScene<MyContext>('employment');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
const showEmploymentMenu = async (ctx: MyContext) => {
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏', 'show_applications')],
        [Markup.button.callback('‚ûï –¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–∏—Ç—å', 'add_employee')],
        [Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'mainmenu')]
    ]);

    const text = 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
    
    if (ctx.callbackQuery?.message) {
        await ctx.editMessageText(text, keyboard);
    } else {
        await ctx.reply(text, keyboard);
    }
};

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
employmentScene.enter(async (ctx) => {
    
    await showEmploymentMenu(ctx);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
employmentScene.action('show_applications', async (ctx) => {
    try {
        const applications = await LaravelService.getActiveRegistrations();
        console.log('Received applications:', applications); // –î–æ–±–∞–≤–∏–º –ª–æ–≥

        if (!applications || applications.length === 0) {
            await ctx.editMessageText(
                'üìù –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç',
                Markup.inlineKeyboard([[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'back_to_employment')]])
            );
            return;
        }

        const buttons = applications.map(app => ([
            Markup.button.callback(
                `üë§ ${app.short_name}`, 
                `view_application_${app.id}`
            )
        ]));
        
        buttons.push([Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'back_to_employment')]);

        await ctx.editMessageText(
            'üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:',
            Markup.inlineKeyboard(buttons)
        );
    } catch (error) {
        console.error('Error fetching applications:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏
employmentScene.action(/^view_application_(\d+)$/, async (ctx) => {
    try {
        const applicationId = ctx.match[1];
        const application = await LaravelService.getRegistrationDetails(applicationId);

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ ISO –≤ DD.MM.YYYY
        const formattedDate = application.has_med_book && application.med_book_expiry 
            ? new Date(application.med_book_expiry).toLocaleDateString('ru-RU') 
            : '';

        const messageText = `
üë§ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ

–§–ò–û: ${application.full_name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${application.phone}
Email: ${application.email}
–§–∏–ª–∏–∞–ª: ${application.branch_name}
–°—Ç–∞–≤–∫–∞: ${application.master_price}%

üè• –ú–µ–¥. –∫–Ω–∏–∂–∫–∞: ${application.has_med_book ? '‚úÖ' : '‚ùå'}
${application.has_med_book ? `–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ: ${formattedDate}` : ''}
üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: ${application.has_education_cert ? '‚úÖ' : '‚ùå'}

üè¶ –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π: ${application.is_self_employed ? '‚úÖ' : '‚ùå'}
`;

        const keyboard = Markup.inlineKeyboard([
            [
                Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', `approve_${applicationId}`),
                Markup.button.callback('‚ùå –û—Ç–∫–∞–∑–∞—Ç—å', `reject_${applicationId}`)
            ],
            [Markup.button.callback('üìÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã', `check_docs_${applicationId}`)],
            [Markup.button.callback('¬´ –ö —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫', 'show_applications')]
        ]);

        await ctx.editMessageText(messageText, keyboard);
    } catch (error) {
        console.error('Error viewing application:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞—è–≤–∫–∏.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
employmentScene.action(/^check_docs_(\d+)$/, async (ctx) => {
    const applicationId = ctx.match[1];
    try {
        const documents = await LaravelService.getRegistrationDocuments(applicationId);
        
        if (documents && documents.length > 0) {
            for (const doc of documents) {
                try {
                    const fileBuffer = await fs.promises.readFile(doc.path);
                    await ctx.replyWithDocument({ 
                        source: fileBuffer,
                        filename: doc.original_name 
                    });
                    await new Promise(resolve => setTimeout(resolve, 1000));
                } catch (docError) {
                    console.error('Error sending document:', {
                        error: docError,
                        document: doc
                    });
                    await ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${doc.original_name}`);
                }
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            await ctx.reply('–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã', 
                Markup.inlineKeyboard([[
                    Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–µ', `view_application_${applicationId}`)
                ]])
            );
        } else {
            await ctx.reply('–î–æ–∫—É–º–µ–Ω—Ç—ã –µ—â–µ –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º.',
                Markup.inlineKeyboard([[
                    Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–µ', `view_application_${applicationId}`)
                ]])
            );
        }
    } catch (error) {
        console.error('Error fetching documents:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.',
            Markup.inlineKeyboard([[
                Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–µ', `view_application_${applicationId}`)
            ]])
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–∞–∑–∞
employmentScene.action(/^approve_(\d+)$/, async (ctx) => {
    const applicationId = ctx.match[1];
    try {
        await LaravelService.approveRegistration(applicationId);
        await ctx.answerCbQuery('‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É');
        await ctx.scene.reenter();
    } catch (error) {
        console.error('Error approving application:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.');
    }
});

employmentScene.action(/^reject_(\d+)$/, async (ctx) => {
    const applicationId = ctx.match[1];
    try {
        await LaravelService.rejectRegistration(applicationId);
        await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
        await ctx.scene.reenter();
    } catch (error) {
        console.error('Error rejecting application:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
employmentScene.action('add_employee', async (ctx) => {
    const text = `
üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞:

1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—É —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞:
@testmaster031224_bot

2Ô∏è‚É£ –ö–∞–Ω–¥–∏–¥–∞—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
- –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start
- –ü—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
- –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã

‚ùóÔ∏è –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞—è–≤–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏"
    `;

    const keyboard = Markup.inlineKeyboard([[
        Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'back_to_employment')
    ]]);

    await ctx.editMessageText(text, keyboard);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
employmentScene.action('back_to_employment', async (ctx) => {
    await ctx.answerCbQuery();
    await showEmploymentMenu(ctx);
});

employmentScene.action('mainmenu', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.scene.enter('admin_main');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
employmentScene.use(async (ctx, next) => {
    try {
        await next();
    } catch (error) {
        console.error('Error in employmentScene:', error);
        await ctx.reply(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
            Markup.inlineKeyboard([[
                Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'back_to_employment')
            ]])
        );
    }
});