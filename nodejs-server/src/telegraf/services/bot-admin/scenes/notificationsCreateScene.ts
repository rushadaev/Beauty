import { Scenes, Markup } from 'telegraf';
import { MyContext, NotificationForm } from '../../../types/MyContext';
import logger from '../../../../utils/logger/loggerTelegram';
import LaravelService from '../../../../services/laravelService';

interface NotificationResponse {
    success: boolean;
    message?: string;
    data?: any;
}

export const notificationsCreateScene = new Scenes.BaseScene<MyContext>('notifications_create_scene');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
notificationsCreateScene.enter(async (ctx) => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    ctx.session.notificationForm = {
        name: '',
        sum: '',
        dateTime: '',
        type: '',
        frequency: '', // daily, weekly, monthly, custom
        frequency_value: '', // –î–ª—è custom: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        created_at: new Date().toISOString()
    };

    await ctx.reply(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n–ü—Ä–∏–º–µ—Ä: –û–ø–ª–∞—Ç–∏—Ç—å –∞—Ä–µ–Ω–¥—É –ø–æ–º–µ—â–µ–Ω–∏—è',
        Markup.inlineKeyboard([
            [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_notifications')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
        ])
    );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
notificationsCreateScene.on('text', async (ctx) => {
    if (!ctx.session.notificationForm) {
        await ctx.scene.reenter();
        return;
    }

    const form = ctx.session.notificationForm;

    try {
        // –≠—Ç–∞–ø –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        if (!form.name) {
            form.name = ctx.message.text;
            await ctx.reply(
                '–ö–∞–∫–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã?\n\n–ï—Å–ª–∏ —Å—É–º–º–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –≤–≤–µ–¥–∏—Ç–µ 0',
                Markup.inlineKeyboard([
                    [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'reset_name')],
                    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
                ])
            );
            return;
        }

        // –≠—Ç–∞–ø –≤–≤–æ–¥–∞ —Å—É–º–º—ã
        if (!form.sum && form.sum !== '0') {
            const sum = Number(ctx.message.text);
            if (isNaN(sum) || sum < 0) {
                await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ 0');
                return;
            }
            form.sum = sum.toString();
            await ctx.reply(
                '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n–ü—Ä–∏–º–µ—Ä: 25.12.2024 15:00',
                Markup.inlineKeyboard([
                    [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'reset_sum')],
                    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
                ])
            );
            return;
        }

        // –≠—Ç–∞–ø –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        if (!form.dateTime) {
            const dateTimeRegex = /^(\d{2})\.(\d{2})\.(\d{4})\s(\d{2}):(\d{2})$/;
            const match = ctx.message.text.match(dateTimeRegex);
            
            if (!match) {
                await ctx.reply(
                    '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏!\n\n' +
                    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n' +
                    '–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 15:00'
                );
                return;
            }

            const [_, day, month, year, hour, minute] = match;
            const date = new Date(Number(year), Number(month) - 1, Number(day), Number(hour), Number(minute));

            if (date < new Date()) {
                await ctx.reply('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º');
                return;
            }

            form.dateTime = ctx.message.text;
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await ctx.reply(
                '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–∑–æ–≤–æ–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è?',
                Markup.inlineKeyboard([
                    [
                        Markup.button.callback('‚ö°Ô∏è –†–∞–∑–æ–≤–æ–µ', 'type_single'),
                        Markup.button.callback('üîÑ –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è', 'type_recurring')
                    ],
                    [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'reset_datetime')],
                    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
                ])
            );
            return;
        }

        // –≠—Ç–∞–ø –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
        if (form.type === 'recurring' && form.frequency === 'custom' && !form.frequency_value) {
            const days = parseInt(ctx.message.text);
            if (isNaN(days) || days <= 0 || days > 365) {
                await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 365');
                return;
            }
            
            form.frequency_value = days.toString();
            await createNotification(ctx);
        }

    } catch (error) {
        logger.error('Error in notifications create scene:', error);
        await ctx.reply(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.',
            Markup.inlineKeyboard([
                [Markup.button.callback('üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞', 'restart')],
                [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_notifications')],
                [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
            ])
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
notificationsCreateScene.action('type_single', async (ctx) => {
    await ctx.answerCbQuery();
    ctx.session.notificationForm.type = 'single';
    await createNotification(ctx);
});

notificationsCreateScene.action('type_recurring', async (ctx) => {
    await ctx.answerCbQuery();
    ctx.session.notificationForm.type = 'recurring';
    
    await ctx.reply(
        '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:',
        Markup.inlineKeyboard([
            [Markup.button.callback('üìÖ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å', 'frequency_daily')],
            [Markup.button.callback('üìÖ –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é', 'frequency_weekly')],
            [Markup.button.callback('üìÖ –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü', 'frequency_monthly')],
            [Markup.button.callback('üìÖ –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–∏–æ–¥', 'frequency_custom')],
            [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'reset_type')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
        ])
    );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
notificationsCreateScene.action(['frequency_daily', 'frequency_weekly', 'frequency_monthly'], async (ctx) => {
    await ctx.answerCbQuery();
    const frequencyMap: Record<string, NotificationForm['frequency']> = {
        'frequency_daily': 'daily',
        'frequency_weekly': 'weekly',
        'frequency_monthly': 'monthly'
    };
    
    if (ctx.callbackQuery && 'data' in ctx.callbackQuery) {
        const data = ctx.callbackQuery.data;
        const frequency = frequencyMap[data];
        if (frequency) {
            ctx.session.notificationForm.frequency = frequency;
        }
    }
    await createNotification(ctx);
});

notificationsCreateScene.action('frequency_custom', async (ctx) => {
    await ctx.answerCbQuery();
    ctx.session.notificationForm.frequency = 'custom';
    
    await ctx.reply(
        '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (–æ—Ç 1 –¥–æ 365):',
        Markup.inlineKeyboard([
            [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'reset_frequency')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
        ])
    );
});

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async function createNotification(ctx: MyContext) {
    try {
        const form = ctx.session.notificationForm;
        
        if (!form) {
            throw new Error('Notification form is empty');
        }

        const result = await LaravelService.createNotificationByTelegramId(
            ctx.from.id,
            ctx.session.notificationForm
        ) as NotificationResponse;

        if (!result?.success) {
            throw new Error(result?.message || 'Failed to create notification');
        }

        const message = `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n` +
            `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${form.name}\n` +
            `üí∞ –°—É–º–º–∞: ${form.sum === '0' ? '–Ω–µ —É–∫–∞–∑–∞–Ω–∞' : form.sum + ' —Ä—É–±.'}\n` +
            `üïê –í—Ä–µ–º—è: ${form.dateTime}\n` +
            `üîÑ –¢–∏–ø: ${form.type === 'single' ? '—Ä–∞–∑–æ–≤–æ–µ' : '–ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è'}`;

        await ctx.reply(
            message,
            Markup.inlineKeyboard([
                [Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å –µ—â—ë', 'create_another')],
                [Markup.button.callback('üìã –ö —Å–ø–∏—Å–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'back_to_notifications')],
                [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
            ])
        );

    } catch (error) {
        logger.error('Error creating notification:', error);
        await ctx.reply(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            Markup.inlineKeyboard([
                [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'restart')],
                [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_notifications')],
                [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
            ])
        );
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
notificationsCreateScene.action('reset_name', async (ctx) => {
    await ctx.answerCbQuery();
    ctx.session.notificationForm.name = '';
    await ctx.scene.reenter();
});

notificationsCreateScene.action('reset_sum', async (ctx) => {
    await ctx.answerCbQuery();
    ctx.session.notificationForm.sum = '';
    await ctx.reply('–ö–∞–∫–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã?\n\n–ï—Å–ª–∏ —Å—É–º–º–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –≤–≤–µ–¥–∏—Ç–µ 0');
});

notificationsCreateScene.action('reset_datetime', async (ctx) => {
    await ctx.answerCbQuery();
    ctx.session.notificationForm.dateTime = '';
    await ctx.reply(
        '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n–ü—Ä–∏–º–µ—Ä: 25.12.2024 15:00'
    );
});

notificationsCreateScene.action('reset_type', async (ctx) => {
    await ctx.answerCbQuery();
    ctx.session.notificationForm.type = '';
    await ctx.reply(
        '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–∑–æ–≤–æ–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è?',
        Markup.inlineKeyboard([
            [
                Markup.button.callback('‚ö°Ô∏è –†–∞–∑–æ–≤–æ–µ', 'type_single'),
                Markup.button.callback('üîÑ –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è', 'type_recurring')
            ],
            [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'reset_datetime')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
        ])
    );
});

notificationsCreateScene.action('reset_frequency', async (ctx) => {
    await ctx.answerCbQuery();
    ctx.session.notificationForm.frequency = '';
    ctx.session.notificationForm.type = 'recurring';
    
    await ctx.reply(
        '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:',
        Markup.inlineKeyboard([
            [Markup.button.callback('üìÖ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å', 'frequency_daily')],
            [Markup.button.callback('üìÖ –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é', 'frequency_weekly')],
            [Markup.button.callback('üìÖ –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü', 'frequency_monthly')],
            [Markup.button.callback('üìÖ –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–∏–æ–¥', 'frequency_custom')],
            [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'reset_type')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
        ])
    );
});

// –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
notificationsCreateScene.action('create_another', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.scene.reenter();
});

notificationsCreateScene.action('back_to_notifications', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.scene.enter('notifications_management');
});

notificationsCreateScene.action('restart', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.scene.reenter();
});

notificationsCreateScene.action('mainmenu', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.scene.enter('admin_main');
});

export default notificationsCreateScene;