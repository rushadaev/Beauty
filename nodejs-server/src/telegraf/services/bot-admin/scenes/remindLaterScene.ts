import { Scenes, Markup } from 'telegraf';
import { MyContext } from '../../../types/MyContext';
import logger from '../../../../utils/logger/loggerTelegram';
import LaravelService from '../../../../services/laravelService';
import moment from 'moment'; // –ò–∑–º–µ–Ω–µ–Ω –∏–º–ø–æ—Ä—Ç
import 'moment-timezone';

export const remindLaterScene = new Scenes.BaseScene<MyContext & { scene: { state: RemindLaterSceneState } }>('remind_later_scene');


interface NotificationResponse {
    success: boolean;
    message?: string;
    data?: any;
}

interface RemindLaterSceneState {
    notificationId: string;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
remindLaterScene.enter(async (ctx) => {
    try {
        const { state } = ctx.scene;
        const notificationId = state?.notificationId;
        
        logger.info('Entering remind later scene:', {
            state,
            notificationId,
            scene_state: ctx.scene.state
        });
        
        if (!notificationId) {
            logger.error('No notification ID provided');
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            await ctx.scene.leave();
            return;
        }

        await ctx.reply(
            '‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:',
            Markup.inlineKeyboard([
                [Markup.button.callback('üïê –ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç', `remind_15_${notificationId}`)],
                [Markup.button.callback('üïê –ß–µ—Ä–µ–∑ —á–∞—Å', `remind_60_${notificationId}`)],
                [Markup.button.callback('üìÖ –ó–∞–≤—Ç—Ä–∞ –≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è', `remind_tomorrow_${notificationId}`)],
                [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_remind')]
            ])
        );
    } catch (error) {
        logger.error('Error in remind later scene enter:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        await ctx.scene.leave();
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç
remindLaterScene.action(/remind_15_(\d+)/, async (ctx) => {
    await ctx.answerCbQuery();
    const notificationId = ctx.match[1];
    await handleReschedule(ctx, notificationId, 15, 'minutes');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ —á–∞—Å
remindLaterScene.action(/remind_60_(\d+)/, async (ctx) => {
    await ctx.answerCbQuery();
    const notificationId = ctx.match[1];
    await handleReschedule(ctx, notificationId, 1, 'hours');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–≤—Ç—Ä–∞
remindLaterScene.action(/remind_tomorrow_(\d+)/, async (ctx) => {
    await ctx.answerCbQuery();
    const notificationId = ctx.match[1];
    await handleReschedule(ctx, notificationId, 24, 'hours');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
remindLaterScene.action('cancel_remind', async (ctx) => {
    await ctx.answerCbQuery('–û—Ç–º–µ–Ω–µ–Ω–æ');
    await ctx.reply('‚ùå –ü–µ—Ä–µ–Ω–æ—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω—ë–Ω');
    await ctx.scene.leave();
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async function handleReschedule(
    ctx: MyContext,
    notificationId: string,
    amount: number,
    unit: 'minutes' | 'hours'
) {
    try {
        // –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω—É—Ç—ã/—á–∞—Å—ã –∫ —Ç–µ–∫—É—â–µ–º—É UTC –≤—Ä–µ–º–µ–Ω–∏
        const utcDateTime = moment().utc()
            .add(amount, unit)
            .format('YYYY-MM-DD HH:mm:00');

        // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        const mskDisplayTime = moment().utc()
            .add(amount, unit)
            .tz('Europe/Moscow')
            .format('DD.MM.YYYY HH:mm');

        const result = await LaravelService.rescheduleNotification(
            parseInt(notificationId),
            utcDateTime // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ UTC
        );

        if (result?.success) {
            await ctx.reply(
                `‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ ${mskDisplayTime}`, // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
                Markup.inlineKeyboard([
                    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
                ])
            );
        } else {
            throw new Error('Failed to reschedule notification');
        }
    } catch (error) {
        logger.error('Error rescheduling notification:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    }
    
    await ctx.scene.leave();
}
    


export default remindLaterScene;