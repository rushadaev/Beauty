import { Scenes, Markup } from 'telegraf';
import { MyContext } from '../../../types/MyContext';
import axios from 'axios';
import fs from 'fs';
import path from 'path';
import LaravelService from '../../../../services/laravelService';

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ü–µ–Ω—ã
interface SalarySceneState {
    awaitingStartDate?: boolean;
    awaitingEndDate?: boolean;
}

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç
interface DateRange {
    startDate: string;
    endDate: string;
}

export const salaryScene = new Scenes.BaseScene<MyContext>('salary');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map<number, DateRange>();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞—Ç—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ DD.MM.YYYY –≤ YYYY-MM-DD
function convertDateFormat(dateStr: string): string | null {
    const match = dateStr.match(/^(\d{2})\.(\d{2})\.(\d{4})$/);
    if (!match) return null;
    return `${match[3]}-${match[2]}-${match[1]}`;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
salaryScene.action('select_period', async (ctx) => {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 28.12.2024)');
    ctx.scene.state = { awaitingStartDate: true } as SalarySceneState;
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ (–¥–∞—Ç)
salaryScene.on('text', async (ctx) => {
    const userId = ctx.from?.id;
    if (!userId) return;

    const state = ctx.scene.state as SalarySceneState;

    if (state.awaitingStartDate) {
        const startDateInput = ctx.message.text;
        const startDate = convertDateFormat(startDateInput);
        
        if (!startDate) {
            await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 28.12.2024)');
            return;
        }

        userStates.set(userId, { startDate, endDate: '' });
        ctx.scene.state = { awaitingEndDate: true } as SalarySceneState;
        await ctx.reply('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì');
        return;
    }

    if (state.awaitingEndDate) {
        const endDateInput = ctx.message.text;
        const endDate = convertDateFormat(endDateInput);
        
        if (!endDate) {
            await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 28.12.2024)');
            return;
        }

        const dateRange = userStates.get(userId);
        if (dateRange) {
            dateRange.endDate = endDate;
            userStates.set(userId, dateRange);

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const displayStartDate = dateRange.startDate.split('-').reverse().join('.');
            const displayEndDate = dateRange.endDate.split('-').reverse().join('.');

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üì• –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç', 'export_salary')],
                [Markup.button.callback('üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥', 'select_period')],
                [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'mainmenu')]
            ]);

            await ctx.reply(
                `–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: ${displayStartDate} ‚Äî ${displayEndDate}`,
                keyboard
            );
        }
        ctx.scene.state = {} as SalarySceneState;
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞
salaryScene.action('export_salary', async (ctx) => {
    try {
        const userId = ctx.from?.id;
        if (!userId) return;

        const dateRange = userStates.get(userId);
        if (!dateRange) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥');
            return;
        }

        await ctx.answerCbQuery('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...');
        
        const excelBuffer = await LaravelService.exportSalaryReport(
            dateRange.startDate,
            dateRange.endDate
        );

        const tempDir = path.join(__dirname, '../../../temp');
        if (!fs.existsSync(tempDir)) {
            fs.mkdirSync(tempDir, { recursive: true });
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        const fileStartDate = dateRange.startDate.split('-').reverse().join('.');
        const fileEndDate = dateRange.endDate.split('-').reverse().join('.');
        
        const tempFilePath = path.join(tempDir, `salary_${Date.now()}.xlsx`);
        fs.writeFileSync(tempFilePath, excelBuffer);

        await ctx.replyWithDocument({
            source: tempFilePath,
            filename: `–ó–∞—Ä–ø–ª–∞—Ç—ã_${fileStartDate}-${fileEndDate}.xlsx`
        });

        fs.unlinkSync(tempFilePath);

    } catch (error) {
        console.error('Error exporting salary:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
salaryScene.action('mainmenu', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.scene.enter('admin_main');
});

// –í—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞ —Å—Ü–µ–Ω—ã
salaryScene.enter(async (ctx: MyContext) => {
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìÖ –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥', 'select_period')],
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'mainmenu')]
    ]);

    await ctx.reply('üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏', keyboard);
});