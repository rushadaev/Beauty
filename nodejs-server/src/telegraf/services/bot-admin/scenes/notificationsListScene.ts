import { Scenes, Markup } from 'telegraf';
import { MyContext } from '../../../types/MyContext';
import logger from '../../../../utils/logger/loggerTelegram';
import LaravelService from '../../../../services/laravelService';
import { PaginatedNotifications, Notification } from '../../../types/Notification';
import { formatInTimeZone } from 'date-fns-tz';


interface LaravelApiResponse<T> {
    success: boolean;
    data: T;
    message?: string;
}

export const notificationsListScene = new Scenes.BaseScene<MyContext>('notifications_list_scene');

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notificationsListScene.enter(async (ctx) => {
    try {
        const response = await LaravelService.getAdminNotifications(ctx.from.id) as unknown as LaravelApiResponse<PaginatedNotifications>;

        if (!response?.success || !response?.data) {
            await ctx.reply(
                '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
                Markup.inlineKeyboard([
                    [Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', 'create_notification')],
                    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
                ])
            );
            return;
        }

        let notificationsArray: Notification[] = [];

        // Response.data —Ç–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç PaginatedNotifications
        if (response.data.data) {
            notificationsArray = response.data.data;
        }

        if (notificationsArray.length === 0) {
            await ctx.reply(
                'üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
                Markup.inlineKeyboard([
                    [Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', 'create_notification')],
                    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
                ])
            );
            return;
        }

        if (notificationsArray.length === 0) {
            await ctx.reply(
                'üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
                Markup.inlineKeyboard([
                    [Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', 'create_notification')],
                    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
                ])
            );
            return;
        }

        await ctx.reply(
            'üìã –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n' +
            notificationsArray.map((notif, index) => {
                let formattedTime = notif.notification_datetime;
                if (notif.notification_datetime && typeof notif.notification_datetime === 'string') {
                    try {
                        formattedTime = formatInTimeZone(new Date(notif.notification_datetime), 'Europe/Moscow', 'dd.MM.yyyy HH:mm');
                    } catch (e) {
                        logger.error('Error formatting notification time', { error: e, notification: notif });
                    }
                }
                return `${index + 1}. üìù ${notif.name}\n` +
                    `üí∞ –°—É–º–º–∞: ${notif.sum ? `${notif.sum} —Ä—É–±.` : '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
                    `üïê –í—Ä–µ–º—è: ${formattedTime}\n` +
                    `üîÑ –¢–∏–ø: ${notif.type === 'single' ? '—Ä–∞–∑–æ–≤–æ–µ' : '–ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è'}\n`;
            }).join('\n'),
            Markup.inlineKeyboard([
                ...notificationsArray.map(notif => [
                    Markup.button.callback(`‚úèÔ∏è ${notif.name}`, `edit_${notif.id}`)
                ]),
                [Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', 'create_notification')],
                [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
            ])
        );
    } catch (error) {
        logger.error('Error in notifications list scene:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
notificationsListScene.action(/edit_(\d+)/, async (ctx) => {
    try {
        await ctx.answerCbQuery();
        const notificationId = ctx.match[1];

        const response = await LaravelService.getAdminNotification(parseInt(notificationId)) as LaravelApiResponse<Notification>;
        
        if (!response?.success || !response?.data) {
            await ctx.reply('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        const notification = response.data;
        let formattedTime = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
        
        if (notification.notification_datetime) {
            try {
                formattedTime = formatInTimeZone(
                    new Date(notification.notification_datetime),
                    'Europe/Moscow',
                    'dd.MM.yyyy HH:mm'
                );
            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã', { error, date: notification.notification_datetime });
            }
        }

        ctx.session.selectedNotificationId = parseInt(notificationId);

        await ctx.reply(
            `–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:\n\n` +
            `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${notification.name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
            `üí∞ –°—É–º–º–∞: ${notification.sum ? `${notification.sum} —Ä—É–±.` : '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
            `üïê –í—Ä–µ–º—è: ${formattedTime}`,
            Markup.inlineKeyboard([
                [Markup.button.callback('‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ', 'edit_name')],
                [Markup.button.callback('üí∞ –°—É–º–º—É', 'edit_sum')],
                [Markup.button.callback('üïê –î–∞—Ç—É', 'edit_date')],
                [Markup.button.callback('‚ùå –£–¥–∞–ª–∏—Ç—å', 'delete_notification')],
                [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_list')],
                [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
            ])
        );
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≤ –¥–µ–π—Å—Ç–≤–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
notificationsListScene.action('edit_name', async (ctx) => {
    await ctx.answerCbQuery();
    ctx.session.editField = 'name';
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:');
});

notificationsListScene.action('edit_sum', async (ctx) => {
    await ctx.answerCbQuery();
    ctx.session.editField = 'sum';
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É (–∏–ª–∏ 0, –µ—Å–ª–∏ —Å—É–º–º–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):');
});

notificationsListScene.action('edit_date', async (ctx) => {
    await ctx.answerCbQuery();
    ctx.session.editField = 'date';
    await ctx.reply(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:\n\n' +
        '–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n' +
        '–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 15:00'
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
notificationsListScene.on('text', async (ctx) => {
    if (!ctx.session.editField || !ctx.session.selectedNotificationId) {
        return;
    }

    try {
        let updateData: any = {};
        const value = ctx.message.text;

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ —Ç–∏–ø–∞
        const currentNotification = await LaravelService.getAdminNotification(ctx.session.selectedNotificationId) as LaravelApiResponse<Notification>;
        
        if (!currentNotification?.success || !currentNotification?.data) {
            throw new Error('Failed to get current notification');
        }

        // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥–∞—Ç—ã
        if (ctx.session.editField === 'date') {
            try {
                // –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥—ë–Ω–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú
                const [datePart, timePart] = value.split(' ');
                if (!datePart || !timePart) {
                    throw new Error('Invalid date format');
                }

                const [day, month, year] = datePart.split('.');
                const [hours, minutes] = timePart.split(':');

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–∞—Ç—ã
                if (!day || !month || !year || !hours || !minutes) {
                    throw new Error('Invalid date components');
                }

                // –°–æ–∑–¥–∞—ë–º –¥–∞—Ç—É –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
                const moscowDate = new Date(
                    parseInt(year),
                    parseInt(month) - 1,
                    parseInt(day),
                    parseInt(hours),
                    parseInt(minutes)
                );

                if (isNaN(moscowDate.getTime())) {
                    throw new Error('Invalid date');
                }

                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ UTC –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                const utcDate = formatInTimeZone(moscowDate, 'Europe/Moscow', "yyyy-MM-dd HH:mm:ss");
                updateData.notification_datetime = utcDate;

                // –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                if (currentNotification.data.type === 'recurring') {
                    updateData.last_notification_sent_at = null;
                }
            } catch (error) {
                logger.error('Error parsing date:', error);
                await ctx.reply(
                    '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n' +
                    '–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 15:00'
                );
                return;
            }
        } else {
            // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏–µ
            updateData[ctx.session.editField] = value;
        }

        const result = await LaravelService.updateAdminNotification(
            ctx.session.selectedNotificationId,
            updateData
        );

        if (result?.success) {
            await ctx.reply(
                '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ',
                Markup.inlineKeyboard([
                    [Markup.button.callback('üëà –ö —Å–ø–∏—Å–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'back_to_list')],
                    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
                ])
            );
        } else {
            throw new Error('Failed to update notification');
        }

    } catch (error) {
        logger.error('Error updating notification:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
    }

    ctx.session.editField = undefined;
});

// –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
notificationsListScene.action('delete_notification', async (ctx) => {
    try {
        await ctx.answerCbQuery();
        
        if (!ctx.session.selectedNotificationId) {
            throw new Error('No notification selected');
        }

        const success = await LaravelService.deleteAdminNotification(ctx.session.selectedNotificationId);

        if (success) {
            await ctx.reply(
                '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ',
                Markup.inlineKeyboard([
                    [Markup.button.callback('üëà –ö —Å–ø–∏—Å–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'back_to_list')],
                    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
                ])
            );
        } else {
            throw new Error('Failed to delete notification');
        }

    } catch (error) {
        logger.error('Error deleting notification:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    }
});

// –ù–∞–≤–∏–≥–∞—Ü–∏—è
notificationsListScene.action('back_to_list', async (ctx) => {
    await ctx.answerCbQuery();
    ctx.session.editField = undefined;
    ctx.session.selectedNotificationId = undefined;
    await ctx.scene.reenter();
});

notificationsListScene.action('create_notification', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.scene.enter('notifications_create_scene');
});

notificationsListScene.action('mainmenu', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.scene.enter('admin_main');
});

export default notificationsListScene;