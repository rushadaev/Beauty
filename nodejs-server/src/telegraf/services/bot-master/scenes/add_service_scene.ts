import { Scenes, Markup } from 'telegraf';
import { MyContext } from '../../../types/MyContext';
import laravelService from '../../../../services/laravelService';

export interface AddServiceState {
    recordId: string;
    phone?: string;
    password?: string;
}

export const addServiceScene = new Scenes.BaseScene<MyContext>('add_service_scene');

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
addServiceScene.enter(async (ctx: MyContext) => {
    const state = ctx.scene.state as AddServiceState;

    try {
        if (!state?.recordId) {
            return ctx.reply(
                '‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∑–∞–ø–∏—Å—å',
                Markup.inlineKeyboard([[
                    Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞–ø–∏—Å—è–º', 'back_to_records')
                ]])
            );
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        ctx.session.addServiceState = {
            recordId: state.recordId,
            phone: state.phone || ctx.session.phone,
            password: state.password || ctx.session.password
        };

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥
        const services = await laravelService.getMasterServices({
            phone: ctx.session.addServiceState.phone!,
            password: ctx.session.addServiceState.password!
        });

        if (!services?.success || !services.data?.length) {
            return ctx.reply(
                '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è',
                Markup.inlineKeyboard([[
                    Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞–ø–∏—Å–∏', 'back_to_record')
                ]])
            );
        }

        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —É—Å–ª—É–≥
const buttons = services.data.map(service => ([
    Markup.button.callback(
        service.title,
        `add_service_${service.id}`
    )
]));

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        buttons.push([
            Markup.button.callback('¬´ –û—Ç–º–µ–Ω–∞', 'cancel_service_add')
        ]);

        await ctx.reply(
            '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:',
            Markup.inlineKeyboard(buttons)
        );

    } catch (error) {
        console.error('Error in addServiceScene enter:', error);
        await ctx.reply(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            Markup.inlineKeyboard([[
                Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞–ø–∏—Å–∏', 'back_to_record')
            ]])
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
addServiceScene.action(/^add_service_(\d+)$/, async (ctx) => {
    const state = ctx.session.addServiceState;
    const serviceId = parseInt(ctx.match[1]);

    try {
        if (!state?.recordId || !state.phone || !state.password) {
            throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ');
        }

        await ctx.answerCbQuery();
        const loadingMsg = await ctx.reply('üîÑ –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª—É–≥—É...');

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
            const services = await laravelService.getMasterServices({
                phone: state.phone,
                password: state.password
            });

            const selectedService = services.data.find(s => s.id === serviceId);
            if (!selectedService) {
                throw new Error('–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            const result = await laravelService.updateMasterRecord({
                phone: state.phone,
                password: state.password,
                recordId: state.recordId,
                updateData: {
                    services: {
                        add: [{
                            id: selectedService.id,
                            cost: parseFloat(selectedService.price_min), // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É
                            first_cost: parseFloat(selectedService.price_min), // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
                            discount: 0
                        }]
                    }
                }
            });

            await ctx.telegram.deleteMessage(ctx.chat!.id, loadingMsg.message_id).catch(() => {});

            await ctx.reply(
                '‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞',
                Markup.inlineKeyboard([[
                    Markup.button.callback('¬´ –ö –∑–∞–ø–∏—Å–∏', 'back_to_record')
                ]])
            );

        } catch (error: any) {
            await ctx.telegram.deleteMessage(ctx.chat!.id, loadingMsg.message_id).catch(() => {});

            await ctx.reply(
                '‚ùå ' + (error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É'),
                Markup.inlineKeyboard([[
                    Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'cancel_service_add')
                ]])
            );
        }

    } catch (error) {
        console.error('Error in service addition:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
addServiceScene.action('cancel_service_add', async (ctx) => {
    try {
        await ctx.answerCbQuery();
        const recordId = ctx.session.addServiceState?.recordId;
        
        delete ctx.session.addServiceState;
        
        return ctx.scene.enter('clients_management_scene', {
            action: 'show_record',
            recordId
        });
    } catch (error) {
        console.error('Error in cancel_service_add:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –í–æ–∑–≤—Ä–∞—Ç –∫ –∑–∞–ø–∏—Å–∏
addServiceScene.action('back_to_record', async (ctx) => {
    try {
        await ctx.answerCbQuery();
        const recordId = ctx.session.addServiceState?.recordId;
        
        delete ctx.session.addServiceState;
        
        return ctx.scene.enter('clients_management_scene', {
            action: 'show_record',
            recordId
        });
    } catch (error) {
        console.error('Error in back_to_record:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

export default addServiceScene;