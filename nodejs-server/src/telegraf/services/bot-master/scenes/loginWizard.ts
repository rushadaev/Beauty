import { Scenes, Markup, Composer } from 'telegraf';
import { MyContext } from '../../../types/MyContext';
import laravelService from "../../../../services/laravelService";

// Step 1: Initial menu display
const showMainMenu = async (ctx: MyContext) => {
    const messageText = `–ü–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω –±–æ—Ç–∞`;

    const mainMenuKeyboard = Markup.inlineKeyboard([
        [
            Markup.button.callback('—Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', 'registration'),
        ],
        [
            Markup.button.callback('–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', 'authorization'),
        ],
    ]);

    if (ctx.callbackQuery && ctx.callbackQuery.message) {
        try {
            await ctx.editMessageText(messageText, mainMenuKeyboard);
        } catch (error) {
            await ctx.reply(messageText, mainMenuKeyboard);
        }
    } else {
        await ctx.reply(messageText, mainMenuKeyboard);
    }

    return ctx.wizard.next(); // Move to the next step
};

// Step 2: Handle registration action
const handleRegistration = new Composer<MyContext>();
handleRegistration.action('registration', async (ctx) => {
    const message = `–¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ`;
    await ctx.scene.enter('registration_wizard');
    return;
});

// Step 3: Handle authorization (phone input)
const handleAuthorization = new Composer<MyContext>();
handleAuthorization.action('authorization', async (ctx) => {
    const message = `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ:`;

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üëå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')],
    ]);

    await ctx.editMessageText(message, keyboard);
    return ctx.wizard.next(); // Move to the phone input step
});

const handlePhoneInput = new Composer<MyContext>();
handlePhoneInput.on('text', async (ctx) => {
    const phone = ctx.message.text;
    ctx.scene.session.phone = phone;

    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:');

    return ctx.wizard.next();
});

const handlePasswordInput = new Composer<MyContext>();
handlePasswordInput.on('text', async (ctx) => {
    const password = ctx.message.text;
    ctx.scene.session.password = password;

    try {
        const response = await laravelService.auth(ctx.scene.session.phone, ctx.scene.session.password, ctx.from.id);
        console.log('response', response);
    } catch (error) {
        await ctx.reply('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
        return ctx.scene.reenter();
    }

    await ctx.reply('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');

    return ctx.scene.leave();
});


const handleAction = new Composer<MyContext>();
handleAction.use(handleRegistration);
handleAction.use(handleAuthorization);


// Define the wizard scene
export const loginWizard = new Scenes.WizardScene<MyContext>(
    'login_wizard',
    showMainMenu,
    handleAction,
    handlePhoneInput,
    handlePasswordInput,
);


