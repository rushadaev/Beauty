import { Scenes, Markup, Composer } from 'telegraf';
import { MyContext } from '../../../types/MyContext';
import laravelService from "../../../../services/laravelService";

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
const formatPhone = (phone: string): string => {
    let cleaned = phone.replace(/\D/g, '');
    if (cleaned.startsWith('8')) {
        cleaned = '7' + cleaned.slice(1);
    }
    if (!cleaned.startsWith('7')) {
        cleaned = '7' + cleaned;
    }
    return cleaned;
};

const isValidPhone = (phone: string): boolean => {
    const cleaned = phone.replace(/\D/g, '');
    return /^[78]\d{10}$/.test(cleaned);
};

// –®–∞–≥ 1: –ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
const showMainMenu = async (ctx: MyContext) => {
    const messageText = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CherryTown! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    const mainMenuKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('–¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', 'registration')],
        [Markup.button.callback('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', 'authorization')],
    ]);

    if (ctx.callbackQuery?.message) {
        try {
            await ctx.editMessageText(messageText, mainMenuKeyboard);
        } catch (error) {
            await ctx.reply(messageText, mainMenuKeyboard);
        }
    } else {
        await ctx.reply(messageText, mainMenuKeyboard);
    }

    return ctx.wizard.next();
};

// –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
const handleRegistration = new Composer<MyContext>();
handleRegistration.action('registration', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.scene.enter('registration_wizard');
    return;
});

// –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
const handleAuthorization = new Composer<MyContext>();
handleAuthorization.action('authorization', async (ctx) => {
    await ctx.answerCbQuery();
    const message = `–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n+7XXXXXXXXXX`;

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_menu')],
    ]);

    await ctx.editMessageText(message, keyboard);
    return ctx.wizard.next();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
const handlePhoneInput = new Composer<MyContext>();
handlePhoneInput.action('back_to_menu', async (ctx) => {
    await ctx.answerCbQuery();
    return ctx.scene.reenter();
});

handlePhoneInput.on('text', async (ctx) => {
    const phone = formatPhone(ctx.message.text);

    if (!isValidPhone(phone)) {
        await ctx.reply(
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n+7XXXXXXXXXX',
            Markup.inlineKeyboard([
                [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_menu')]
            ])
        );
        return;
    }

    ctx.scene.session.phone = phone;

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_phone')]
    ]);

    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ YClients:', keyboard);
    return ctx.wizard.next();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
const handlePasswordInput = new Composer<MyContext>();

handlePasswordInput.action('back_to_phone', async (ctx) => {
    await ctx.answerCbQuery();
    const message = `–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n+7XXXXXXXXXX`;
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_menu')],
    ]);
    await ctx.editMessageText(message, keyboard);
    return ctx.wizard.back();
});

handlePasswordInput.action('back_to_menu', async (ctx) => {
    await ctx.answerCbQuery();
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    if (ctx.session) {
        ctx.session = {};
    }
    return ctx.scene.enter('login_wizard'); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ —Å—Ü–µ–Ω—ã
});

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

handlePasswordInput.on('text', async (ctx) => {
    const password = ctx.message.text;
    const phone = ctx.scene.session.phone;

    try {
        await ctx.reply('‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ...');
        const response = await laravelService.auth(phone, password, ctx.from.id);
        
        if (response?.success) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–µ—Å—Å–∏—é
            ctx.session.phone = phone;
            ctx.session.password = password;
            
            // –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω
            if (response.token) {
                ctx.session.apiToken = response.token;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (response.user) {
                ctx.session.user = response.user;
            }

            try {
                const messagesToDelete = ctx.message.message_id;
                for (let i = 0; i < 3; i++) {
                    try {
                        await ctx.deleteMessage(messagesToDelete - i);
                    } catch (e) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                    }
                }
            } catch (e) {
                console.log('Could not delete messages:', e);
            }

            // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ü–µ–Ω—ã
            delete ctx.scene.session.phone;
            delete ctx.scene.session.password;

            const successMsg = await ctx.reply('üîÑ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
            await delay(700);
            await ctx.telegram.editMessageText(
                ctx.chat.id,
                successMsg.message_id,
                undefined,
                '‚ú® –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ...'
            );
            await delay(700);
            await ctx.telegram.editMessageText(
                ctx.chat.id,
                successMsg.message_id,
                undefined,
                'üéâ –£—Å–ø–µ—à–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.'
            );
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            console.log('Session after auth:', {
                phone: ctx.session.phone,
                hasPassword: !!ctx.session.password,
                hasUser: !!ctx.session.user
            });

            await delay(1000);
            return ctx.scene.enter('main');
        }

        const errorMsg = response?.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
        const errorMessage = await ctx.reply('‚ùå ' + errorMsg);
        await delay(500);

        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'retry_auth')],
            [Markup.button.callback('üëà –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'back_to_menu')]
        ]);

        await ctx.telegram.editMessageText(
            ctx.chat.id,
            errorMessage.message_id,
            undefined,
            '‚ùå ' + errorMsg,
            { reply_markup: errorKeyboard.reply_markup }
        );

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        
        let errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. ';
        if (error.response?.data?.message) {
            errorMessage += error.response.data.message;
        } else {
            errorMessage += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        }

        const errorMsg = await ctx.reply('‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞...');
        await delay(500);

        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'retry_auth')],
            [Markup.button.callback('üëà –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'back_to_menu')]
        ]);

        await ctx.telegram.editMessageText(
            ctx.chat.id,
            errorMsg.message_id,
            undefined,
            '‚ùå ' + errorMessage,
            { reply_markup: errorKeyboard.reply_markup }
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
handlePasswordInput.action('retry_auth', async (ctx) => {
    await ctx.answerCbQuery();
    const message = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n+7XXXXXXXXXX';
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_menu')]
    ]);
    await ctx.editMessageText(message, keyboard);
    return ctx.wizard.selectStep(2); // –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
});

handlePasswordInput.action('back_to_menu', async (ctx) => {
    await ctx.answerCbQuery();
    if (ctx.scene.session) {
        ctx.scene.session = {};
    }
    return ctx.scene.enter('login_wizard');
});

// –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const handlePostLogin = new Composer<MyContext>();
handlePostLogin.action('goto_master_menu', async (ctx) => {
    await ctx.answerCbQuery();
    return ctx.scene.enter('master_menu_scene');
});

handlePostLogin.action('retry_auth', async (ctx) => {
    await ctx.answerCbQuery();
    return ctx.scene.reenter();
});

handlePostLogin.action('back_to_menu', async (ctx) => {
    await ctx.answerCbQuery();
    return ctx.scene.reenter();
});

// –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
const handleAction = new Composer<MyContext>();
handleAction.use(handleRegistration);
handleAction.use(handleAuthorization);

// –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É wizard
export const loginWizard = new Scenes.WizardScene<MyContext>(
    'login_wizard',
    showMainMenu,
    handleAction,
    handlePhoneInput,
    handlePasswordInput,
    handlePostLogin
);

// –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
loginWizard.use(async (ctx, next) => {
    try {
        await next();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ login wizard:', error);
        await ctx.reply(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
            Markup.inlineKeyboard([
                [Markup.button.callback('üëà –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'back_to_menu')]
            ])
        );
    }
});