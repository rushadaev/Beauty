import { Scenes, Markup } from 'telegraf';
import { MyContext } from '../../../types/MyContext';
import laravelService from '../../../../services/laravelService';
import { openAIService } from '../../../../services/openaiService';


export const changeDescriptionScene = new Scenes.WizardScene<MyContext>(
    'change_description_scene',
    // –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è
    async (ctx) => {
        ctx.session.descriptionForm = {};
        ctx.session.isEditing = false;

        console.log('Session state at description start:', {
            sessionPhone: ctx.session?.phone,
            sessionPassword: ctx.session?.password ? '[PRESENT]' : '[MISSING]',
            sessionUser: ctx.session?.user ? '[PRESENT]' : '[MISSING]'
        });
        
        await ctx.reply(
            '–î–∞–≤–∞–π—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ! –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ—ë –∏–º—è –∏ –ø–∞—Ä—É —Å–ª–æ–≤ –ø—Ä–æ —Å–µ–±—è, –∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å–¥–µ–ª–∞–µ—Ç –º–∞–≥–∏—é!',
            Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel')]])
        );
        
        return ctx.wizard.next();
    },

    // –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    async (ctx) => {
        if (!ctx.message || !('text' in ctx.message)) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
            return;
        }

        try {
            const userInput = ctx.message.text;
            const processingMessage = await ctx.reply('‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ...');

            if (!ctx.session.descriptionForm) {
                ctx.session.descriptionForm = {};
            }
            ctx.session.descriptionForm.tempDescription = userInput;

            const newDescription = await openAIService.generateDescription(
                
                userInput
            );

            ctx.session.descriptionForm.generatedDescription = newDescription;
            await ctx.telegram.deleteMessage(ctx.chat!.id, processingMessage.message_id).catch(() => {});

            await ctx.reply(
                '‚ú® –í–æ—Ç –≤–∞—à–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n\n' + 
                newDescription + '\n\n' +
                '–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º?',
                Markup.inlineKeyboard([
                    [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', 'confirm_description')],
                    [Markup.button.callback('‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'edit_description')],
                    [Markup.button.callback('üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ', 'regenerate')],
                    [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel')]
                ])
            );
            
            return ctx.wizard.next();
        } catch (error: any) {
            console.error('Error in description generation:', {
                error: error.message,
                sessionState: {
                    phone: ctx.session?.phone,
                    hasPassword: !!ctx.session?.password
                }
            });

            await ctx.reply(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                Markup.inlineKeyboard([
                    [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'retry_description')],
                    [Markup.button.callback('üëà –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'back_to_menu')]
                ])
            );
        }
    },

    // –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    async (ctx) => {
        console.log('Step 3: Processing message, isEditing:', ctx.session.isEditing);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (!ctx.session.isEditing) {
            console.log('Step 3: Not in editing mode, skipping');
            return;
        }

        if (!ctx.message || !('text' in ctx.message)) {
            console.log('Step 3: No text in message');
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
            return;
        }

        try {
            console.log('Step 3: Processing edited description');
            const editedDescription = ctx.message.text;
            
            if (editedDescription.length > 300) {
                console.log('Step 3: Description too long');
                await ctx.reply(
                    '‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 300 —Å–∏–º–≤–æ–ª–æ–≤. –°–µ–π—á–∞—Å –¥–ª–∏–Ω–∞: ' + editedDescription.length + ' —Å–∏–º–≤–æ–ª–æ–≤.\n' +
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞.',
                    Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel')]])
                );
                return;
            }
            
            if (!ctx.session.descriptionForm) {
                ctx.session.descriptionForm = {};
            }
            ctx.session.descriptionForm.generatedDescription = editedDescription;
            ctx.session.isEditing = false;
            await ctx.reply(
                'üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n\n' +
                editedDescription + '\n\n' +
                '–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º?',
                Markup.inlineKeyboard([
                    [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', 'confirm_description')],
                    [Markup.button.callback('‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑', 'edit_description')],
                    [Markup.button.callback('üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ', 'regenerate')],
                    [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel')]
                ])
            );

            
            console.log('Step 3: Description updated successfully');
        } catch (error) {
            console.error('Step 3: Error processing description:', error);
            await ctx.reply(
                '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è.',
                Markup.inlineKeyboard([[
                    Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'edit_description')
                ]])
            );
        }
    }
);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
changeDescriptionScene.action('confirm_description', async (ctx) => {
    await ctx.answerCbQuery();
    const description = ctx.session.descriptionForm?.generatedDescription;

    if (!description) {
        await ctx.reply('–û—à–∏–±–∫–∞: –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.');
        return ctx.scene.reenter();
    }

    const processingMessage = await ctx.reply('‚è≥ –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...');

    try {
        const updated = await laravelService.updateMasterDescription(
            ctx.session.phone!,
            ctx.session.password!,
            description
        );

        if (!updated) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ');
        }

        await ctx.telegram.deleteMessage(ctx.chat!.id, processingMessage.message_id).catch(() => {});
        await ctx.reply(
            '‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n' +
            'üí´ –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.',
            Markup.inlineKeyboard([[Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]])
        );

        return ctx.scene.enter('main');
    } catch (error) {
        await ctx.telegram.deleteMessage(ctx.chat!.id, processingMessage.message_id).catch(() => {});
        await ctx.reply(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.',
            Markup.inlineKeyboard([
                [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'retry_description')],
                [Markup.button.callback('üëà –í –º–µ–Ω—é', 'back_to_menu')]
            ])
        );
    }
});

changeDescriptionScene.action('edit_description', async (ctx) => {
    console.log('Edit action triggered');
    await ctx.answerCbQuery();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    ctx.session.isEditing = true;
    console.log('Set editing mode, isEditing:', ctx.session.isEditing);
    
    await ctx.reply(
        '‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ–ø–∏—Å–∞–Ω–∏—è:\n\n' +
        ctx.session.descriptionForm?.generatedDescription,
        Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel')]])
    );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
changeDescriptionScene.action('regenerate', async (ctx) => {
    await ctx.answerCbQuery();
    
    if (!ctx.session.descriptionForm?.tempDescription) {
        await ctx.reply(
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç. –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.',
            Markup.inlineKeyboard([[
                Markup.button.callback('üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', 'retry_description')
            ]])
        );
        return;
    }

    try {
        const processingMessage = await ctx.reply('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ...');
        
        const newDescription = await openAIService.generateDescription(
            ctx.session.descriptionForm.tempDescription
        );

        ctx.session.descriptionForm.generatedDescription = newDescription;
        await ctx.telegram.deleteMessage(ctx.chat!.id, processingMessage.message_id).catch(() => {});

        await ctx.reply(
            '‚ú® –í–æ—Ç –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ–ø–∏—Å–∞–Ω–∏—è:\n\n' + 
            newDescription + '\n\n' +
            '–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º?',
            Markup.inlineKeyboard([
                [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', 'confirm_description')],
                [Markup.button.callback('‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'edit_description')],
                [Markup.button.callback('üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ', 'regenerate')],
                [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel')]
            ])
        );
    } catch (error) {
        console.error('Error regenerating description:', error);
        await ctx.reply(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è.',
            Markup.inlineKeyboard([
                [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'regenerate')],
                [Markup.button.callback('üëà –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'back_to_menu')]
            ])
        );
    }
});

changeDescriptionScene.action('retry_description', async (ctx) => {
    await ctx.answerCbQuery();
    return ctx.scene.reenter();
});

changeDescriptionScene.action('cancel', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
    return ctx.scene.enter('main');
});

changeDescriptionScene.action('back_to_menu', async (ctx) => {
    await ctx.answerCbQuery();
    return ctx.scene.enter('main');
});