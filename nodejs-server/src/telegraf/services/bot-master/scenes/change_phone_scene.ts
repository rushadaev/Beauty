import { Scenes, Markup } from 'telegraf';
import { MyContext, ChangePhoneState } from '../../../types/MyContext';
import laravelService from '../../../../services/laravelService';

export const changePhoneScene = new Scenes.BaseScene<MyContext>('change_phone_scene');

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
changePhoneScene.enter(async (ctx: MyContext) => {
    const state = ctx.scene.state as ChangePhoneState;

    try {
        if (!state?.recordId) {
            return ctx.reply(
                '‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∑–∞–ø–∏—Å—å',
                Markup.inlineKeyboard([[
                    Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞–ø–∏—Å—è–º', 'back_to_records')
                ]])
            );
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è ctx.scene.state
        const recordId = state.recordId;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏
        ctx.session.changePhoneState = {
            recordId,
            phone: state.phone || ctx.session.phone,
            password: state.password || ctx.session.password
        };

        await ctx.reply(
            '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79XXXXXXXXX:',
            Markup.inlineKeyboard([[
                Markup.button.callback('¬´ –û—Ç–º–µ–Ω–∞', 'cancel_phone_change')
            ]])
        );

    } catch (error) {
        console.error('Error in changePhoneScene enter:', error);
        await ctx.reply(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            Markup.inlineKeyboard([[
                Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞–ø–∏—Å—è–º', 'back_to_records')
            ]])
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
changePhoneScene.on('text', async (ctx) => {
    const state = ctx.session.changePhoneState;
    
    try {
        if (!state || !state.recordId || !state.phone || !state.password) {
            return ctx.reply(
                '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.',
                Markup.inlineKeyboard([[
                    Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞–ø–∏—Å—è–º', 'back_to_records')
                ]])
            );
        }

        const newPhone = ctx.message.text.trim();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if (!/^7\d{10}$/.test(newPhone)) {
            return ctx.reply(
                '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79XXXXXXXXX:',
                Markup.inlineKeyboard([[
                    Markup.button.callback('¬´ –û—Ç–º–µ–Ω–∞', 'cancel_phone_change')
                ]])
            );
        }

        const loadingMsg = await ctx.reply('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞...');

        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º recordId –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            const recordId = state.recordId;
            
            const result = await laravelService.updateMasterRecord({
                phone: state.phone,
                password: state.password,
                recordId: state.recordId,
                updateData: {
                    client: {
                        phone: newPhone
                    }
                }
            });

            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            await ctx.telegram.deleteMessage(ctx.chat!.id, loadingMsg.message_id).catch(() => {});

            await ctx.reply(
                '‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
                Markup.inlineKeyboard([[
                    Markup.button.callback('¬´ –ö –∑–∞–ø–∏—Å–∏', 'back_to_record')
                ]])
            );

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            ctx.session.changePhoneState = {
                ...state,
                newPhone
            };

        } catch (error: any) {
            await ctx.telegram.deleteMessage(ctx.chat!.id, loadingMsg.message_id).catch(() => {});

            await ctx.reply(
                '‚ùå ' + (error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'),
                Markup.inlineKeyboard([[
                    Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'cancel_phone_change')
                ]])
            );
        }

    } catch (error) {
        console.error('Error handling phone number:', error);
        await ctx.reply(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            Markup.inlineKeyboard([[
                Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞–ø–∏—Å—è–º', 'back_to_records')
            ]])
        );
    }
});

// –û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
changePhoneScene.action('cancel_phone_change', async (ctx) => {
    try {
        await ctx.answerCbQuery();
        const recordId = ctx.session.changePhoneState?.recordId;
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É
        delete ctx.session.changePhoneState;
        
        return ctx.scene.enter('clients_management_scene', {
            action: 'show_record',
            recordId
        });
    } catch (error) {
        console.error('Error in cancel_phone_change:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –í–æ–∑–≤—Ä–∞—Ç –∫ –∑–∞–ø–∏—Å–∏
changePhoneScene.action('back_to_record', async (ctx) => {
    try {
        await ctx.answerCbQuery();
        const recordId = ctx.session.changePhoneState?.recordId;
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É
        delete ctx.session.changePhoneState;
        
        return ctx.scene.enter('clients_management_scene', {
            action: 'show_record',
            recordId
        });
    } catch (error) {
        console.error('Error in back_to_record:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

export default changePhoneScene;