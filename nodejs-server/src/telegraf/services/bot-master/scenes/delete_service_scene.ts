import { Scenes, Markup } from 'telegraf';
import { MyContext } from '../../../types/MyContext';
import laravelService from '../../../../services/laravelService';

export interface DeleteServiceState {
    recordId: string;
    phone?: string;
    password?: string;
}

export const deleteServiceScene = new Scenes.BaseScene<MyContext>('delete_service_scene');

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
deleteServiceScene.enter(async (ctx: MyContext) => {
    const state = ctx.scene.state as DeleteServiceState;

    try {
        if (!state?.recordId) {
            return ctx.reply(
                '‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∑–∞–ø–∏—Å—å',
                Markup.inlineKeyboard([[
                    Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞–ø–∏—Å—è–º', 'back_to_records')
                ]])
            );
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        ctx.session.deleteServiceState = {
            recordId: state.recordId,
            phone: state.phone || ctx.session.phone,
            password: state.password || ctx.session.password
        };

        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥
        const record = await laravelService.getMasterRecordDetails({
            phone: ctx.session.deleteServiceState.phone!,
            password: ctx.session.deleteServiceState.password!,
            recordId: state.recordId
        });

        if (!record?.success || !record.data?.services?.length) {
            return ctx.reply(
                '‚ùå –í –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç —É—Å–ª—É–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
                Markup.inlineKeyboard([[
                    Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞–ø–∏—Å–∏', 'back_to_record')
                ]])
            );
        }

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —É—Å–ª—É–≥–∞–º–∏
        const buttons = record.data.services.map(service => ([
            Markup.button.callback(
                `${service.title} (${service.cost}‚ÇΩ)`,
                `delete_service_${service.id}`
            )
        ]));

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        buttons.push([
            Markup.button.callback('¬´ –û—Ç–º–µ–Ω–∞', 'cancel_service_delete')
        ]);

        await ctx.reply(
            '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
            Markup.inlineKeyboard(buttons)
        );

    } catch (error) {
        console.error('Error in deleteServiceScene enter:', error);
        await ctx.reply(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            Markup.inlineKeyboard([[
                Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞–ø–∏—Å–∏', 'back_to_record')
            ]])
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
deleteServiceScene.action(/^delete_service_(\d+)$/, async (ctx) => {
    const state = ctx.session.deleteServiceState;
    const serviceId = ctx.match[1];

    try {
        if (!state?.recordId || !state.phone || !state.password) {
            throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ');
        }

        await ctx.answerCbQuery();
        const loadingMsg = await ctx.reply('üîÑ –£–¥–∞–ª—è–µ–º —É—Å–ª—É–≥—É...');

        try {
            const result = await laravelService.updateMasterRecord({
                phone: state.phone,
                password: state.password,
                recordId: state.recordId,
                updateData: {
                    services: {
                        remove: [parseInt(serviceId)]
                    }
                }
            });

            await ctx.telegram.deleteMessage(ctx.chat!.id, loadingMsg.message_id).catch(() => {});

            await ctx.reply(
                '‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞',
                Markup.inlineKeyboard([[
                    Markup.button.callback('¬´ –ö –∑–∞–ø–∏—Å–∏', 'back_to_record')
                ]])
            );

        } catch (error: any) {
            await ctx.telegram.deleteMessage(ctx.chat!.id, loadingMsg.message_id).catch(() => {});

            await ctx.reply(
                '‚ùå ' + (error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É'),
                Markup.inlineKeyboard([[
                    Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'cancel_service_delete')
                ]])
            );
        }

    } catch (error) {
        console.error('Error in service deletion:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
deleteServiceScene.action('cancel_service_delete', async (ctx) => {
    try {
        await ctx.answerCbQuery();
        const recordId = ctx.session.deleteServiceState?.recordId;
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        delete ctx.session.deleteServiceState;
        
        return ctx.scene.enter('clients_management_scene', {
            action: 'show_record',
            recordId
        });
    } catch (error) {
        console.error('Error in cancel_service_delete:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –í–æ–∑–≤—Ä–∞—Ç –∫ –∑–∞–ø–∏—Å–∏
deleteServiceScene.action('back_to_record', async (ctx) => {
    try {
        await ctx.answerCbQuery();
        const recordId = ctx.session.deleteServiceState?.recordId;
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        delete ctx.session.deleteServiceState;
        
        return ctx.scene.enter('clients_management_scene', {
            action: 'show_record',
            recordId
        });
    } catch (error) {
        console.error('Error in back_to_record:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

export default deleteServiceScene;