import { Scenes, Markup } from 'telegraf';
import { MyContext } from '../../../types/MyContext';
import laravelService from '../../../../services/laravelService';


export const clientsManagementScene = new Scenes.BaseScene<MyContext>('clients_management_scene');

interface RecordData {
    id: string;
    date: string;
    client?: {
        name?: string;
        phone?: string;
    };
    services?: Array<{
        id: number;
        title: string;
        cost: number;
    }>;
}

const DAYS_PER_PAGE = 7;

// –î–æ–±–∞–≤–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ —Å–µ—Å—Å–∏—é
interface SessionData {
    currentPage?: number;
    recordsByDate?: Record<string, RecordData[]>;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
const formatDate = (date: Date, format: string = 'YYYY-MM-DD'): string => {
    const pad = (n: number) => n.toString().padStart(2, '0');
    
    const year = date.getFullYear();
    const month = pad(date.getMonth() + 1);
    const day = pad(date.getDate());
    
    return format
        .replace('YYYY', year.toString())
        .replace('MM', month)
        .replace('DD', day);
};

const formatTime = (date: string) => {
    const d = new Date(date);
    return `${String(d.getHours()).padStart(2, '0')}:${String(d.getMinutes()).padStart(2, '0')}`;
};

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
clientsManagementScene.enter(async (ctx: MyContext) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if (!ctx.session.phone || !ctx.session.password) {
            await ctx.reply(
                '‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π.',
                Markup.inlineKeyboard([[
                    Markup.button.callback('–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç', 'start_login')
                ]])
            );
            return;
        }

        const loadingMessage = await ctx.reply('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏...');

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ Laravel Service
            const response = await laravelService.getMasterRecords({
                phone: ctx.session.phone,
                password: ctx.session.password,
                params: {
                    start_date: formatDate(new Date()),
                    end_date: formatDate(new Date(Date.now() + 30 * 24 * 60 * 60 * 1000))
                }
            }) as { success: boolean; data: RecordData[] };

            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            await ctx.telegram.deleteMessage(ctx.chat!.id, loadingMessage.message_id).catch(() => {});

            if (!response?.success || !response.data?.length) {
                return await ctx.reply(
                    'üìÖ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü.',
                    Markup.inlineKeyboard([[
                        Markup.button.callback('¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'mainmenu')
                    ]])
                );
            }

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–Ω—è–º
            const recordsByDate = response.data.reduce((acc, record) => {
                const date = new Date(record.date);
                const dateKey = formatDate(date, 'DD.MM.YYYY');
                if (!acc[dateKey]) {
                    acc[dateKey] = [];
                }
                acc[dateKey].push(record);
                return acc;
            }, {} as Record<string, RecordData[]>);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–µ—Å—Å–∏–∏
            ctx.scene.session.recordsByDate = recordsByDate;
            ctx.scene.session.currentPage = ctx.scene.session.currentPage || 1;

            await showRecordsPage(ctx);

            

        } catch (error: any) {
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            await ctx.telegram.deleteMessage(ctx.chat!.id, loadingMessage.message_id).catch(() => {});

            console.error('Error loading records:', error);

            let errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π.';
            
            if (error?.response?.status === 401) {
                errorMessage = 'üîí –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.';
                return ctx.scene.enter('login_wizard');
            }
            
            await ctx.reply(
                errorMessage,
                Markup.inlineKeyboard([[
                    Markup.button.callback('¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'mainmenu')
                ]])
            );
        }

    } catch (error) {
        console.error('Error in clientsManagementScene:', error);
        await ctx.reply(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            Markup.inlineKeyboard([[
                Markup.button.callback('¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'mainmenu')
            ]])
        );
    }
});

async function showRecordsPage(ctx: MyContext) {
    const recordsByDate = ctx.scene.session.recordsByDate;
    const currentPage = ctx.scene.session.currentPage || 1;
    
    if (!recordsByDate) {
        return ctx.reply('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    const dates = Object.keys(recordsByDate).sort((a, b) => {
        return new Date(a).getTime() - new Date(b).getTime();
    });

    const totalPages = Math.ceil(dates.length / DAYS_PER_PAGE);
    const startIdx = (currentPage - 1) * DAYS_PER_PAGE;
    const endIdx = startIdx + DAYS_PER_PAGE;
    const currentDates = dates.slice(startIdx, endIdx);

    const buttons: any[] = [];
    
    currentDates.forEach(date => {
        buttons.push([Markup.button.callback(`üìÖ ${date}`, 'noop')]);
        
        recordsByDate[date]
            .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())
            .forEach(record => {
                const time = formatTime(record.date);
                const clientName = record.client?.name || '–ö–ª–∏–µ–Ω—Ç';
                const services = record.services
                    ?.map(s => s.title)
                    .slice(0, 2)
                    .join(', ');
                
                const buttonText = `${time} | ${clientName}${services ? ` - ${services}` : ''}`;
                buttons.push([
                    Markup.button.callback(
                        buttonText.length > 60 ? buttonText.slice(0, 57) + '...' : buttonText,
                        `record_${record.id}`
                    )
                ]);
            });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const navButtons = [];
    if (currentPage > 1) {
        navButtons.push(Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'prev_page'));
    }
    if (currentPage < totalPages) {
        navButtons.push(Markup.button.callback('–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è', 'next_page'));
    }
    if (navButtons.length > 0) {
        buttons.push(navButtons);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    buttons.push([
        Markup.button.callback(
            `üìÑ ${currentPage}/${totalPages}`,
            'page_info'
        )
    ]);
    buttons.push([Markup.button.callback('¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'mainmenu')]);

    await ctx.editMessageText(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:',
        Markup.inlineKeyboard(buttons)
    ).catch(async () => {
        await ctx.reply(
            '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:',
            Markup.inlineKeyboard(buttons)
        );
    });
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
clientsManagementScene.action('prev_page', async (ctx) => {
    await ctx.answerCbQuery();
    if (ctx.scene.session.currentPage && ctx.scene.session.currentPage > 1) {
        ctx.scene.session.currentPage--;
        await showRecordsPage(ctx);
    }
});

clientsManagementScene.action('next_page', async (ctx) => {
    await ctx.answerCbQuery();
    if (ctx.scene.session.recordsByDate) {
        const totalPages = Math.ceil(Object.keys(ctx.scene.session.recordsByDate).length / DAYS_PER_PAGE);
        if (ctx.scene.session.currentPage && ctx.scene.session.currentPage < totalPages) {
            ctx.scene.session.currentPage++;
            await showRecordsPage(ctx);
        }
    }
});

clientsManagementScene.action('page_info', async (ctx) => {
    await ctx.answerCbQuery('–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π').catch(() => {});
});

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–∞—Ç
clientsManagementScene.action('noop', async (ctx) => {
    await ctx.answerCbQuery('–≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞—Ç—ã').catch(() => {});
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
clientsManagementScene.action(/^record_(\d+)$/, async (ctx: MyContext) => {
    try {
        const recordId = ctx.match[1];
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–ø–∏—Å–∏ –≤ —Å–µ—Å—Å–∏–∏
        ctx.scene.session.selectedRecordId = recordId;
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏
        const response = await laravelService.getMasterRecordDetails({
            phone: ctx.session.phone!,
            password: ctx.session.password!,
            recordId: recordId
        });

        if (!response?.success) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏');
        }

        const record = response.data;
        const date = new Date(record.date);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
        const recordInfo = [
            `üìÖ –î–∞—Ç–∞: ${formatDate(date, 'DD.MM.YYYY')}`,
            `üïí –í—Ä–µ–º—è: ${formatTime(record.date)}`,
            `üë§ –ö–ª–∏–µ–Ω—Ç: ${record.client?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}`,
            `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${record.client?.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}`,
            `üíÖ –£—Å–ª—É–≥–∏:\n${record.services?.map(s => `‚Ä¢ ${s.title}`).join('\n') || '–ù–µ—Ç —É—Å–ª—É–≥'}`
        ].join('\n');

        const managementKeyboard = Markup.inlineKeyboard([
            [
                Markup.button.callback('‚è± –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è', 'change_service_time'),
                Markup.button.callback('‚ùå –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É', 'delete_service_from_order'),
            ],
            [
                Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É', 'add_service_to_order'),
            ],
            [
                Markup.button.callback('üìû –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', 'change_phone_number'),
            ],
            [
                Markup.button.callback('üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', 'cancel_client_booking'),
            ],
            [
                Markup.button.callback('¬´ –ö —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π', 'back_to_records'),
                Markup.button.callback('¬´ –í –º–µ–Ω—é', 'mainmenu'),
            ]
        ]);

        await ctx.editMessageText(recordInfo, managementKeyboard);

    } catch (error) {
        console.error('Error in record selection:', error);
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏').catch(() => {});
        
        await ctx.reply(
            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            Markup.inlineKeyboard([[
                Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞–ø–∏—Å—è–º', 'back_to_records')
            ]])
        );
    }
});

// –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π
clientsManagementScene.action('back_to_records', async (ctx) => {
    await ctx.answerCbQuery();
    // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
    delete ctx.scene.session.selectedRecordId;
    return ctx.scene.reenter();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–ø–∏—Å—å—é
clientsManagementScene.action('change_service_time', async (ctx) => {
    if (!ctx.scene.session.selectedRecordId) {
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
        return ctx.scene.reenter();
    }
    
    await ctx.answerCbQuery();
    return ctx.scene.enter('change_service_time_scene', {
        recordId: ctx.scene.session.selectedRecordId,
        phone: ctx.session.phone,
        password: ctx.session.password
    });
});

clientsManagementScene.action('delete_service_from_order', async (ctx) => {
    if (!ctx.scene.session.selectedRecordId) {
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
        return ctx.scene.reenter();
    }

    await ctx.answerCbQuery();
    return ctx.scene.enter('delete_service_scene', {
        recordId: ctx.scene.session.selectedRecordId,
        phone: ctx.session.phone,
        password: ctx.session.password
    });
});

clientsManagementScene.action('add_service_to_order', async (ctx) => {
    if (!ctx.scene.session.selectedRecordId) {
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
        return ctx.scene.reenter();
    }

    await ctx.answerCbQuery();
    return ctx.scene.enter('add_service_scene', {
        recordId: ctx.scene.session.selectedRecordId,
        phone: ctx.session.phone,
        password: ctx.session.password
    });
});

clientsManagementScene.action('change_phone_number', async (ctx) => {
    if (!ctx.scene.session.selectedRecordId) {
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
        return ctx.scene.reenter();
    }

    await ctx.answerCbQuery();
    return ctx.scene.enter('change_phone_scene', {
        recordId: ctx.scene.session.selectedRecordId,
        phone: ctx.session.phone,
        password: ctx.session.password
    });
});



clientsManagementScene.action('cancel_client_booking', async (ctx) => {
    if (!ctx.scene.session.selectedRecordId) {
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
        return ctx.scene.reenter();
    }

    await ctx.answerCbQuery();
    return ctx.scene.enter('cancel_booking_scene', {
        recordId: ctx.scene.session.selectedRecordId,
        phone: ctx.session.phone,
        password: ctx.session.password
    });
});

// –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
clientsManagementScene.action('mainmenu', async (ctx) => {
    await ctx.answerCbQuery();
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã
    delete ctx.scene.session.selectedRecordId;
    return ctx.scene.enter('main');
});

export default clientsManagementScene;