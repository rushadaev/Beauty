import { Scenes, Markup } from 'telegraf';
import { MyContext } from '../../../types/MyContext';
import laravelService from "../../../../services/laravelService";

export const changeServiceTimeScene = new Scenes.BaseScene<MyContext>('change_service_time_scene');

// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥
changeServiceTimeScene.enter(async (ctx: MyContext) => {
    try {
        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        ctx.session.selectedCategoryId = undefined;
        ctx.session.selectedServiceId = undefined;
        
        const phone = ctx.session?.phone;
        if (!phone) {
            await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è.',
                Markup.inlineKeyboard([[
                    Markup.button.callback('üëà –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')
                ]])
            );
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥ –º–∞—Å—Ç–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
        const response = await laravelService.getMasterCategoriesForTimeChange({
            phone,
            password: ctx.session?.password || ''
        });
        
        if (!response.success) {
            await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥.',
                Markup.inlineKeyboard([[
                    Markup.button.callback('üëà –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')
                ]])
            );
            return;
        }

        const categories = response.data;
        
        if (categories.length === 0) {
            await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥.',
                Markup.inlineKeyboard([[
                    Markup.button.callback('üëà –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')
                ]])
            );
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        const keyboard = categories.map(category => ([
            Markup.button.callback(category.title, `select_category:${category.id}`)
        ]));

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.push([
            Markup.button.callback('üëà –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')
        ]);

        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥:', 
            Markup.inlineKeyboard(keyboard)
        );

    } catch (error) {
        console.error('Error in changeServiceTimeScene enter:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            Markup.inlineKeyboard([[
                Markup.button.callback('üëà –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')
            ]])
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
changeServiceTimeScene.action(/^select_category:(\d+)$/, async (ctx) => {
    try {
        const categoryId = ctx.match[1];
        ctx.session.selectedCategoryId = categoryId;
        
        const phone = ctx.session?.phone;
        const password = ctx.session?.password;
        if (!phone || !password) {
            await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å.',
                Markup.inlineKeyboard([[
                    Markup.button.callback('üëà –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')
                ]])
            );
            return;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥
        const response = await laravelService.getMasterServicesForTimeChange({
            phone,
            password,
            category_id: parseInt(categoryId)
        });
        
        if (!response.success) {
            await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥.',
                Markup.inlineKeyboard([[
                    Markup.button.callback('üëà –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', 'back_to_categories'),
                    Markup.button.callback('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')
                ]])
            );
            return;
        }

        const services = response.data;
        
        if (services.length === 0) {
            await ctx.reply('–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —É—Å–ª—É–≥.',
                Markup.inlineKeyboard([[
                    Markup.button.callback('üëà –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', 'back_to_categories'),
                    Markup.button.callback('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')
                ]])
            );
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Å–ª—É–≥–∞–º–∏
        const keyboard = [];
        for (const service of services) {
            const currentDuration = Math.floor(service.seance_length / 60);
            keyboard.push([
                Markup.button.callback(
                    `${service.title} (${currentDuration} –º–∏–Ω)`,
                    `select_service:${service.id}`
                )
            ]);
        }

        keyboard.push([
            Markup.button.callback('üëà –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', 'back_to_categories'),
            Markup.button.callback('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')
        ]);

        await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:',
            Markup.inlineKeyboard(keyboard)
        );

    } catch (error) {
        console.error('Error in select_category handler:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            Markup.inlineKeyboard([[
                Markup.button.callback('üëà –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')
            ]])
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
changeServiceTimeScene.action(/^select_service:(\d+)$/, async (ctx) => {
    try {
        const serviceId = ctx.match[1];
        ctx.session.selectedServiceId = serviceId;
        
        const phone = ctx.session?.phone;
        const password = ctx.session?.password;
        if (!phone || !password) {
            await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —É—Å–ª—É–≥–∏
        const serviceDetails = await laravelService.getMasterServicesForTimeChange({
            phone,
            password,
            category_id: ctx.session.selectedCategoryId || 0
        });

        if (!serviceDetails.success) {
            await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ.');
            return;
        }

        const service = serviceDetails.data.find(s => s.id.toString() === serviceId);
        if (!service) {
            await ctx.reply('–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
            return;
        }

        const currentDuration = Math.floor(service.seance_length / 60);
        const hours = Math.floor(currentDuration / 60);
        const minutes = currentDuration % 60;
        const currentTimeFormatted = `${hours}:${minutes.toString().padStart(2, '0')}`;

        await ctx.editMessageText(
            `–í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞: ${service.title}\n` +
            `–¢–µ–∫—É—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${currentTimeFormatted}\n\n` +
            '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß:–ú–ú\n' +
            '–ù–∞–ø—Ä–∏–º–µ—Ä: 1:30 –∏–ª–∏ 0:45',
            Markup.inlineKeyboard([[
                Markup.button.callback('üëà –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º', 'back_to_services'),
                Markup.button.callback('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')
            ]])
        );

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
        ctx.session.awaitingServiceDuration = true;
        ctx.session.selectedServiceId = serviceId;

    } catch (error) {
        console.error('Error in select_service handler:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
changeServiceTimeScene.on('text', async (ctx) => {
    if (!ctx.session.awaitingServiceDuration) {
        return;
    }

    const timeInput = ctx.message.text;
    const timeRegex = /^(\d+):([0-5]\d)$/;
    const match = timeInput.match(timeRegex);

    if (!match) {
        await ctx.reply(
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß:–ú–ú\n' +
            '–ù–∞–ø—Ä–∏–º–µ—Ä: 1:30 –∏–ª–∏ 0:45',
            Markup.inlineKeyboard([[
                Markup.button.callback('üëà –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º', 'back_to_services'),
                Markup.button.callback('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')
            ]])
        );
        return;
    }

    const hours = parseInt(match[1]);
    const minutes = parseInt(match[2]);
    const totalMinutes = hours * 60 + minutes;

    if (totalMinutes < 15 || totalMinutes > 480) {
        await ctx.reply(
            '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 15 –º–∏–Ω—É—Ç –¥–æ 8 —á–∞—Å–æ–≤',
            Markup.inlineKeyboard([[
                Markup.button.callback('üëà –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º', 'back_to_services'),
                Markup.button.callback('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')
            ]])
        );
        return;
    }

    try {
        const response = await laravelService.updateMasterServiceTime({
            phone: ctx.session.phone!,
            password: ctx.session.password!,
            service_id: parseInt(ctx.session.selectedServiceId!),
            duration: totalMinutes
        });

        if (!response.success) {
            await ctx.reply(
                '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏.',
                Markup.inlineKeyboard([[
                    Markup.button.callback('üëà –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º', 'back_to_services'),
                    Markup.button.callback('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')
                ]])
            );
            return;
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
        ctx.session.awaitingServiceDuration = false;

        await ctx.reply(
            `‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${hours}:${minutes.toString().padStart(2, '0')}!`,
            Markup.inlineKeyboard([[
                Markup.button.callback('üëà –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º', 'back_to_services'),
                Markup.button.callback('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')
            ]])
        );

    } catch (error) {
        console.error('Error updating service duration:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
changeServiceTimeScene.action(/^set_duration:(\d+):(\d+)$/, async (ctx) => {
    try {
        const serviceId = ctx.match[1];
        const duration = parseInt(ctx.match[2]);
        
        const phone = ctx.session?.phone;
        const password = ctx.session?.password;
        if (!phone || !password) {
            await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
            return;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        const response = await laravelService.updateMasterServiceTime({
            phone,
            password,
            service_id: parseInt(serviceId),
            duration
        });

        if (!response.success) {
            await ctx.reply(
                '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏.',
                Markup.inlineKeyboard([[
                    Markup.button.callback('üëà –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º', 'back_to_services'),
                    Markup.button.callback('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')
                ]])
            );
            return;
        }

        await ctx.editMessageText(
            `‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${duration} –º–∏–Ω—É—Ç!`,
            Markup.inlineKeyboard([[
                Markup.button.callback('üëà –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º', 'back_to_services'),
                Markup.button.callback('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')
            ]])
        );

    } catch (error) {
        console.error('Error in set_duration handler:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            Markup.inlineKeyboard([[
                Markup.button.callback('üëà –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')
            ]])
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
changeServiceTimeScene.action('back_to_categories', async (ctx) => {
    await ctx.scene.enter('change_service_time_scene');
});

changeServiceTimeScene.action('back_to_services', async (ctx) => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    const categoryId = ctx.session.selectedCategoryId;
    
    // –ü–µ—Ä–µ–∑–∞—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É
    await ctx.scene.reenter();
    
    // –ï—Å–ª–∏ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë —É—Å–ª—É–≥–∏
    if (categoryId) {
        const phone = ctx.session?.phone;
        const password = ctx.session?.password;
        
        if (phone && password) {
            // –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏ –Ω–∞–ø—Ä—è–º—É—é
            const response = await laravelService.getMasterServicesForTimeChange({
                phone,
                password,
                category_id: parseInt(categoryId)
            });
            
            if (response.success && response.data.length > 0) {
                // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Å–ª—É–≥–∞–º–∏
                const keyboard = [];
                for (const service of response.data) {
                    const currentDuration = Math.floor(service.seance_length / 60);
                    keyboard.push([
                        Markup.button.callback(
                            `${service.title} (${currentDuration} –º–∏–Ω)`,
                            `select_service:${service.id}`
                        )
                    ]);
                }

                keyboard.push([
                    Markup.button.callback('üëà –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', 'back_to_categories'),
                    Markup.button.callback('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')
                ]);

                await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:',
                    Markup.inlineKeyboard(keyboard)
                );
            }
        }
    }
});

changeServiceTimeScene.action('mainmenu', async (ctx) => {
    await ctx.scene.enter('main');
});

export default changeServiceTimeScene;