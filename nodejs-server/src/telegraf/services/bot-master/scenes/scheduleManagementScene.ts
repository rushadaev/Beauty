import { Scenes, Markup } from 'telegraf';
import { MyContext, ScheduleUpdateData } from '../../../types/MyContext';
import { StaffMemberWithSchedule } from '../../../types/MyContext';
import laravelService from '../../../../services/laravelService';

export const scheduleManagementScene = new Scenes.BaseScene<MyContext>('schedule_management');

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è API
const formatDateForApi = (date: string): string => {
    const [day, month, year] = date.split('.');
    return `${year}-${month}-${day}`;
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
const formatDateForDisplay = (date: string): string => {
    const [year, month, day] = date.split('-');
    const dateObj = new Date(Number(year), Number(month) - 1, Number(day));
    const days = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
    return `${day}.${month} (${days[dateObj.getDay()]})`;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
const isValidDateFormat = (date: string): boolean => {
    const dateRegex = /^\d{2}\.\d{2}\.\d{4}$/;
    return dateRegex.test(date);
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
const isValidDate = (dateStr: string): boolean => {
    if (!isValidDateFormat(dateStr)) return false;
    
    const [day, month, year] = dateStr.split('.').map(Number);
    const date = new Date(year, month - 1, day);
    
    return date.getDate() === day && 
           date.getMonth() === month - 1 && 
           date.getFullYear() === year;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
const isDateInFuture = (dateStr: string): boolean => {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const [day, month, year] = dateStr.split('.').map(Number);
    const date = new Date(year, month - 1, day);
    
    return date >= today;
};

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
scheduleManagementScene.enter(async (ctx: MyContext) => {
    try {
        ctx.session.scheduleState = {
            step: 'select_period'
        };

        await ctx.reply(
            '–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:\n\n' +
            '‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–º–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞ —Å –∑–∞–º–µ–Ω—è—é—â–∏–º –º–∞—Å—Ç–µ—Ä–æ–º.',
            Markup.inlineKeyboard([
                [Markup.button.callback('–û–¥–∏–Ω –¥–µ–Ω—å', 'period_single')],
                [Markup.button.callback('–ü–µ—Ä–∏–æ–¥ –¥–∞—Ç', 'period_range')],
                [Markup.button.callback('üëà –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
            ])
        );
    } catch (error) {
        console.error('Error in scheduleManagementScene.enter:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
scheduleManagementScene.action(/^period_(single|range)$/, async (ctx) => {
    try {
        await ctx.answerCbQuery();
        const periodType = ctx.match[1] as 'single' | 'range';
        
        ctx.session.scheduleState = {
            step: 'enter_date',
            periodType
        };

        if (periodType === 'single') {
            await ctx.editMessageText(
                '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.03.2024):',
                Markup.inlineKeyboard([[Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_period')]])
            );
        } else {
            await ctx.editMessageText(
                '–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:',
                Markup.inlineKeyboard([[Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_period')]])
            );
        }
    } catch (error) {
        console.error('Error in period selection:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã/–¥–∞—Ç
scheduleManagementScene.on('text', async (ctx) => {
    try {
        if (!ctx.session.scheduleState) return;
        const state = ctx.session.scheduleState;
        const text = ctx.message.text;

        if (state.step === 'enter_date') {
            if (!isValidDate(text)) {
                await ctx.reply(
                    '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:',
                    Markup.inlineKeyboard([[Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_period')]])
                );
                return;
            }

            if (!isDateInFuture(text)) {
                await ctx.reply(
                    '–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É:',
                    Markup.inlineKeyboard([[Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_period')]])
                );
                return;
            }

            if (state.periodType === 'single') {
                state.startDate = formatDateForApi(text);
                state.endDate = state.startDate;
                await showMastersList(ctx);
            } else {
                if (!state.startDate) {
                    state.startDate = formatDateForApi(text);
                    await ctx.reply(
                        '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:',
                        Markup.inlineKeyboard([[Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_period')]])
                    );
                } else {
                    const endDate = formatDateForApi(text);
                    if (endDate < state.startDate) {
                        await ctx.reply(
                            '–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É —Å–Ω–æ–≤–∞:',
                            Markup.inlineKeyboard([[Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_period')]])
                        );
                        return;
                    }
                    state.endDate = endDate;
                    await showMastersList(ctx);
                }
            }
        }
    } catch (error) {
        console.error('Error in text handler:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});



async function showMastersList(ctx: MyContext) {
    try {
        if (!ctx.session.scheduleState?.startDate || !ctx.session.scheduleState?.endDate) {
            await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –¥–∞—Ç—ã');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏
        const loadingMessage = await ctx.reply(
            '‚åõ –ü–æ–¥–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤...',
            Markup.inlineKeyboard([[
                Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å', 'back_to_period')
            ]])
        );

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
        const masterInfo = await laravelService.getStaffSchedule(
            ctx.from.id,
            ctx.session.scheduleState.startDate,
            ctx.session.scheduleState.endDate,
            true
        );

        if (!masterInfo?.data?.[0]) {
            await ctx.telegram.deleteMessage(ctx.chat!.id, loadingMessage.message_id);
            await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ —Ñ–∏–ª–∏–∞–ª–∞
        const allMastersResponse = await laravelService.getFilialStaff(
            ctx.from.id,
            ctx.session.scheduleState.startDate,
            ctx.session.scheduleState.endDate,
            true
        );

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await ctx.telegram.deleteMessage(ctx.chat!.id, loadingMessage.message_id);

        if (!allMastersResponse?.success || !allMastersResponse.data) {
            await ctx.reply(
                '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤',
                Markup.inlineKeyboard([[
                    Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_period')
                ]])
            );
            return;
        }

        const currentMasterId = masterInfo.data[0].staff_id;

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ - –∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
        const availableMasters = allMastersResponse.data.filter(master => 
            master.id !== currentMasterId
        );

        if (!availableMasters.length) {
            await ctx.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –∑–∞–º–µ–Ω—ã –≤ —Ñ–∏–ª–∏–∞–ª–µ');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–æ–≤
        const buttons = availableMasters.map(master => {
            const buttonText = master.name 
                ? `${master.name}${master.specialization ? ` (${master.specialization})` : ''}`
                : `–ú–∞—Å—Ç–µ—Ä ${master.id}`;

            return [
                Markup.button.callback(
                    buttonText,
                    `select_master_${master.id}`
                )
            ];
        });

        buttons.push([Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_period')]);

        const dateRange = ctx.session.scheduleState.periodType === 'single'
            ? formatDateForDisplay(ctx.session.scheduleState.startDate)
            : `${formatDateForDisplay(ctx.session.scheduleState.startDate)} - ${formatDateForDisplay(ctx.session.scheduleState.endDate)}`;

        ctx.session.scheduleState = {
            ...ctx.session.scheduleState,
            step: 'select_master',
            masters: availableMasters,
            currentMasterId: currentMasterId
        };

        await ctx.reply(
            `–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã –Ω–∞ ${dateRange}:`,
            Markup.inlineKeyboard(buttons)
        );

    } catch (error) {
        console.error('Error in showMastersList:', error);
        await ctx.reply(
            'üòï –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
            Markup.inlineKeyboard([[
                Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_period')
            ]])
        );
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞
scheduleManagementScene.action(/^select_master_(\d+)$/, async (ctx) => {
    try {
        await ctx.answerCbQuery();
        
        if (!ctx.session.scheduleState?.startDate || 
            !ctx.session.scheduleState?.endDate || 
            !ctx.session.scheduleState?.currentMasterId) {
            await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–º–µ–Ω—ã');
            return;
        }
 
        const replacementMasterId = parseInt(ctx.match[1]);
        const currentMasterId = ctx.session.scheduleState.currentMasterId;
 
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        await ctx.editMessageText(
            '‚åõ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–º–µ–Ω—ã...',
            Markup.inlineKeyboard([[
                Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å', 'back_to_period')
            ]])
        );
 
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        const currentMasterSchedule = await laravelService.getStaffSchedule(
            ctx.from.id,
            ctx.session.scheduleState.startDate,
            ctx.session.scheduleState.startDate,
            true
        );
        
        let masterScheduleData = null;
        if (currentMasterSchedule?.data) {
            masterScheduleData = currentMasterSchedule.data.find(
                schedule => schedule.staff_id === currentMasterId
            );
        }
 
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ slots
        if (!masterScheduleData?.slots || !Array.isArray(masterScheduleData.slots) || masterScheduleData.slots.length === 0) {
            await ctx.editMessageText(
                'ü§î –ù–µ –Ω–∞—à–ª–∏ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É',
                Markup.inlineKeyboard([[
                    Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_period')
                ]])
            );
            return;
        }
 
        // –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const scheduleData: ScheduleUpdateData = {
            schedules_to_set: [],
            schedules_to_delete: []
        };
 
        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –¥–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        const start = new Date(ctx.session.scheduleState.startDate);
        const end = new Date(ctx.session.scheduleState.endDate);
 
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ –¥–∞—Ç
        if (start.getTime() !== end.getTime()) {
            await ctx.editMessageText(
                '‚åõ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥...',
                Markup.inlineKeyboard([[
                    Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å', 'back_to_period')
                ]])
            );
        }
 
        for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {
            const date = d.toISOString().split('T')[0];
            
            const daySchedule = await laravelService.getStaffSchedule(
                ctx.from.id,
                date,
                date,
                true
            );
 
            const masterDaySchedule = daySchedule?.data?.find(
                schedule => schedule.staff_id === currentMasterId
            );
 
            if (masterDaySchedule?.slots?.length) {
                scheduleData.schedules_to_set.push({
                    staff_id: replacementMasterId,
                    date,
                    slots: masterDaySchedule.slots
                });
                
                scheduleData.schedules_to_delete.push({
                    staff_id: currentMasterId,
                    date
                });
            }
        }
 
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ—Ç–æ–≤ –≤ –≥–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!scheduleData.schedules_to_set[0]?.slots?.length) {
            await ctx.editMessageText(
                'üòï –ù–µ –Ω–∞—à–ª–∏ —Ä–∞–±–æ—á–∏—Ö —Å–º–µ–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏',
                Markup.inlineKeyboard([[
                    Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_period')
                ]])
            );
            return;
        }
 
        const selectedMaster = ctx.session.scheduleState.masters?.find(
            m => m.id === replacementMasterId
        );
        
        if (!selectedMaster?.name) {
            await ctx.editMessageText(
                'üòï –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–∞—Å—Ç–µ—Ä–µ',
                Markup.inlineKeyboard([[
                    Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_period')
                ]])
            );
            return;
        }
 
        const dateRange = ctx.session.scheduleState.periodType === 'single'
            ? formatDateForDisplay(ctx.session.scheduleState.startDate)
            : `${formatDateForDisplay(ctx.session.scheduleState.startDate)} - ${formatDateForDisplay(ctx.session.scheduleState.endDate)}`;
 
        ctx.session.scheduleState = {
            ...ctx.session.scheduleState,
            updateData: scheduleData
        };
 
        await ctx.editMessageText(
            `üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–º–µ–Ω—É:\n\n` +
            `üóì –ü–µ—Ä–∏–æ–¥: ${dateRange}\n` +
            `üë§ –ó–∞–º–µ–Ω—è—é—â–∏–π –º–∞—Å—Ç–µ—Ä: ${selectedMaster.name}\n\n` +
            `‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å —Å–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã —ç—Ç–æ–º—É –º–∞—Å—Ç–µ—Ä—É?`,
            Markup.inlineKeyboard([
                [Markup.button.callback('‚úÖ –î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', `confirm_replacement_${replacementMasterId}`)],
                [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'back_to_period')]
            ])
        );
 
    } catch (error) {
        console.error('Error in master selection:', error);
        await ctx.editMessageText(
            'üòï –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –º–∞—Å—Ç–µ—Ä–∞',
            Markup.inlineKeyboard([[
                Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_period')
            ]])
        );
    }
 });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–º–µ–Ω—ã
scheduleManagementScene.action(/^confirm_replacement_(\d+)$/, async (ctx) => {
    try {
        await ctx.answerCbQuery();
 
        const scheduleState = ctx.session.scheduleState;
        if (!scheduleState?.updateData) {
            await ctx.editMessageText(
                'üòï –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞',
                Markup.inlineKeyboard([[
                    Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'back_to_period')
                ]])
            );
            return;
        }
 
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await ctx.editMessageText(
            '‚åõ –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã...',
            Markup.inlineKeyboard([[
                Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å', 'back_to_period')
            ]])
        );
 
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
        const formattedData = {
            schedules_to_set: scheduleState.updateData.schedules_to_set.map(schedule => {
                if ('dates' in schedule) {
                    const dates = (schedule as any).dates;
                    return {
                        staff_id: schedule.staff_id,
                        date: dates[0].date,
                        slots: dates[0].slots
                    };
                }
                return schedule;
            }),
            schedules_to_delete: scheduleState.updateData.schedules_to_delete.map(schedule => {
                if ('dates' in schedule) {
                    const dates = (schedule as any).dates;
                    return {
                        staff_id: schedule.staff_id,
                        date: dates[0]
                    };
                }
                return schedule;
            })
        };
 
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        const result = await laravelService.updateStaffSchedule(
            ctx.from.id,
            scheduleState.startDate!,
            formattedData,
            true
        );
 
        if (result?.success) {
            const dateRange = ctx.session.scheduleState.periodType === 'single'
                ? formatDateForDisplay(ctx.session.scheduleState.startDate)
                : `${formatDateForDisplay(ctx.session.scheduleState.startDate)} - ${formatDateForDisplay(ctx.session.scheduleState.endDate)}`;
 
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            await ctx.editMessageText(
                `‚ú® –û—Ç–ª–∏—á–Ω–æ! –ó–∞–º–µ–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞\n\n` +
                `üóì –ü–µ—Ä–∏–æ–¥: ${dateRange}\n\n` +
                `–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –∑–∞–º–µ–Ω—è—é—â–µ–º—É –º–∞—Å—Ç–µ—Ä—É`,
                Markup.inlineKeyboard([[
                    Markup.button.callback('üëà –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'mainmenu')
                ]])
            );
        } else {
            throw new Error('Failed to update schedule');
        }
    } catch (error) {
        console.error('Error in replacement confirmation:', error);
        await ctx.editMessageText(
            'üòï –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫\n' +
            '–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ –≤—Ä–µ–º—è',
            Markup.inlineKeyboard([[
                Markup.button.callback('üëà –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'back_to_period')
            ]])
        );
    }
 });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
scheduleManagementScene.action('back_to_period', async (ctx) => {
    try {
        await ctx.answerCbQuery();
        
        ctx.session.scheduleState = {
            step: 'select_period'
        };

        await ctx.editMessageText(
            '–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:\n\n' +
            '‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–º–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞ —Å –∑–∞–º–µ–Ω—è—é—â–∏–º –º–∞—Å—Ç–µ—Ä–æ–º.',
            Markup.inlineKeyboard([
                [Markup.button.callback('–û–¥–∏–Ω –¥–µ–Ω—å', 'period_single')],
                [Markup.button.callback('–ü–µ—Ä–∏–æ–¥ –¥–∞—Ç', 'period_range')],
                [Markup.button.callback('üëà –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
            ])
        );
    } catch (error) {
        console.error('Error in back_to_period:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
scheduleManagementScene.action('mainmenu', async (ctx) => {
    try {
        await ctx.answerCbQuery('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
        return ctx.scene.enter('main');
    } catch (error) {
        console.error('Error in mainmenu:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

export default scheduleManagementScene;