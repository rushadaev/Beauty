import { Scenes, Markup, Composer } from 'telegraf';
import { MyContext } from '../../../types/MyContext';
import laravelService from "../../../../services/laravelService";
import { CallbackQuery } from 'telegraf/types';

// Session interface to store user data
interface RegistrationSession {
    fullName?: string;
    birthDate?: string;
    passport?: string;
    issuedBy?: string;
    issueDate?: string;
    divisionCode?: string;
    registrationAddress?: string;
    inn?: string;
    accountNumber?: string;
    bankName?: string;
    bik?: string;
    corrAccount?: string;
    bankInn?: string;
    bankKpp?: string;
    phone?: string;
    email?: string;
    hasMedBook?: boolean;
    medBookExpiry?: string;
    hasEducationCert?: boolean;
    educationCertPhoto?: string;
    isSelfEmployed?: boolean;
    masterPrice: number;  // –£–±–∏—Ä–∞–µ–º ? —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
}

// Validation formats
const ValidationFormats = {
    FULL_NAME: /^[–ê-–Ø–Å][–∞-—è—ë]+(?:-[–ê-–Ø–Å][–∞-—è—ë]+)?\s[–ê-–Ø–Å][–∞-—è—ë]+(?:\s[–ê-–Ø–Å][–∞-—è—ë]+)?$/,
    BIRTH_DATE: /^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.\d{4}$/,
    PASSPORT: /^\d{4}\s\d{6}$/,
    DIVISION_CODE: /^\d{3}-\d{3}$/,
    INN: /^\d{12}$/,
    ACCOUNT_NUMBER: /^\d{20}$/,
    BIK: /^\d{9}$/,
    CORR_ACCOUNT: /^\d{20}$/,
    BANK_INN: /^\d{10}$/,
    BANK_KPP: /^\d{9}$/,
    PHONE: /^\+7\d{10}$/,
    EMAIL: /^[a-zA-Z0-9](?:[a-zA-Z0-9._-]{0,61}[a-zA-Z0-9])?@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z]{2,})+$/,
    ISSUE_DATE: /^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.\d{4}$/,
    MED_BOOK_EXPIRY: /^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.\d{4}$/
};

// Validation messages
const ValidationMessages = {
    FULL_NAME: {
        prompt: '–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–µ –§–ò–û\n\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å.\n\n–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á'
    },
    BIRTH_DATE: {
        prompt: '–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n\n–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n–ü—Ä–∏–º–µ—Ä: 01.01.1990',
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n–ü—Ä–∏–º–µ—Ä: 01.01.1990'
    },
    PASSPORT: {
        prompt: '–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞\n\n–§–æ—Ä–º–∞—Ç: –°–°–°–° –ù–ù–ù–ù–ù–ù\n–ü—Ä–∏–º–µ—Ä: 4444 555666',
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n–§–æ—Ä–º–∞—Ç: –°–°–°–° –ù–ù–ù–ù–ù–ù\n–ü—Ä–∏–º–µ—Ä: 4444 555666'
    },
    ISSUED_BY: {
        prompt: '–ö–µ–º –≤—ã–¥–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç?\n\n–ü—Ä–∏–º–µ—Ä: –ì–£ –ú–í–î –†–û–°–°–ò–ò –ü–û –ú–û–°–ö–û–í–°–ö–û–ô –û–ë–õ–ê–°–¢–ò',
        error: '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∞.\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∞, –≤—ã–¥–∞–≤—à–µ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç\n–ü—Ä–∏–º–µ—Ä: –ì–£ –ú–í–î –†–û–°–°–ò–ò –ü–û –ú–û–°–ö–û–í–°–ö–û–ô –û–ë–õ–ê–°–¢–ò'
    },
    ISSUE_DATE: {
        prompt: '–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞\n\n–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n–ü—Ä–∏–º–µ—Ä: 01.01.2020',
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤—ã–¥–∞—á–∏.\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n–ü—Ä–∏–º–µ—Ä: 01.01.2020'
    },
    DIVISION_CODE: {
        prompt: '–ö–æ–¥ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è\n\n–§–æ—Ä–º–∞—Ç: XXX-XXX\n–ü—Ä–∏–º–µ—Ä: 770-001',
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è.\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n–§–æ—Ä–º–∞—Ç: XXX-XXX\n–ü—Ä–∏–º–µ—Ä: 770-001'
    },
    ADDRESS: {
        prompt: '–ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n–ü—Ä–∏–º–µ—Ä: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1, –∫–≤. 1',
        error: '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–π –∞–¥—Ä–µ—Å.\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n–ü—Ä–∏–º–µ—Ä: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1, –∫–≤. 1'
    },
    INN: {
        prompt: '–ò–ù–ù\n\n–ü—Ä–∏–º–µ—Ä: 123456789012 (12 —Ü–∏—Ñ—Ä)',
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù.\n\n–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n–ü—Ä–∏–º–µ—Ä: 123456789012 (12 —Ü–∏—Ñ—Ä)'
    },
    ACCOUNT_NUMBER: {
        prompt: '–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞\n\n–ü—Ä–∏–º–µ—Ä: 40817810099910004312 (20 —Ü–∏—Ñ—Ä)',
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Å—á–µ—Ç–∞.\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞\n–ü—Ä–∏–º–µ—Ä: 40817810099910004312 (20 —Ü–∏—Ñ—Ä)'
    },
    BANK_NAME: {
        prompt: '–ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n\n–ü—Ä–∏–º–µ—Ä: –ü–ê–û –°–ë–ï–†–ë–ê–ù–ö',
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞.\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞\n–ü—Ä–∏–º–µ—Ä: –ü–ê–û –°–ë–ï–†–ë–ê–ù–ö'
    },
    BIK: {
        prompt: '–ë–ò–ö\n\n–ü—Ä–∏–º–µ—Ä: 044525225 (9 —Ü–∏—Ñ—Ä)',
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ë–ò–ö.\n\n–í–≤–µ–¥–∏—Ç–µ –ë–ò–ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n–ü—Ä–∏–º–µ—Ä: 044525225 (9 —Ü–∏—Ñ—Ä)'
    },
    CORR_ACCOUNT: {
        prompt: '–ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç\n\n–ü—Ä–∏–º–µ—Ä: 30101810400000000225 (20 —Ü–∏—Ñ—Ä)',
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä. —Å—á–µ—Ç–∞.\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç\n–ü—Ä–∏–º–µ—Ä: 30101810400000000225 (20 —Ü–∏—Ñ—Ä)'
    },
    BANK_INN: {
        prompt: '–ò–ù–ù –±–∞–Ω–∫–∞\n\n–ü—Ä–∏–º–µ—Ä: 7707083893 (10 —Ü–∏—Ñ—Ä)',
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù –±–∞–Ω–∫–∞.\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ò–ù–ù –±–∞–Ω–∫–∞\n–ü—Ä–∏–º–µ—Ä: 7707083893 (10 —Ü–∏—Ñ—Ä)'
    },
    BANK_KPP: {
        prompt: '–ö–ü–ü –±–∞–Ω–∫–∞\n\n–ü—Ä–∏–º–µ—Ä: 773601001 (9 —Ü–∏—Ñ—Ä)',
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ö–ü–ü –±–∞–Ω–∫–∞.\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ö–ü–ü –±–∞–Ω–∫–∞\n–ü—Ä–∏–º–µ—Ä: 773601001 (9 —Ü–∏—Ñ—Ä)'
    },
    PHONE: {
        prompt: '–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX\n–ü—Ä–∏–º–µ—Ä: +79001234567',
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX\n–ü—Ä–∏–º–µ—Ä: +79001234567'
    },
    EMAIL: {
        prompt: '–í–∞—à–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞\n\n–ü—Ä–∏–º–µ—Ä: example@mail.ru',
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email.\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å\n–ü—Ä–∏–º–µ—Ä: example@mail.ru'
    },
    MED_BOOK_EXPIRY: {
        prompt: '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–Ω–∏–∂–∫–∏\n\n–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n–ü—Ä–∏–º–µ—Ä: 01.01.2025',
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–Ω–∏–∂–∫–∏\n–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n–ü—Ä–∏–º–µ—Ä: 01.01.2025'
    },
    MASTER_PRICE: {
        prompt: 'üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ç–∞–≤–∫–∏, —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–π —Å —É–ø—Ä–∞–≤–ª—è—é—â–∏–º\n\n‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 50%\n\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50',
        error: '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ç–∞–≤–∫–∏\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50'
    }
};

// Validation helper functions
const validateField = (value: string, type: keyof typeof ValidationFormats): boolean => {
    const pattern = ValidationFormats[type];
    return pattern.test(value);
};

const validateIssuedBy = (value: string): boolean => {
    return value.length >= 5 && value.length <= 150;
};

const validateAddress = (value: string): boolean => {
    return value.length >= 10 && value.length <= 200;
};

const validateBankName = (value: string): boolean => {
    return value.length >= 3 && value.length <= 100;
};

// Helper function to create back button
const getBackButton = () => {
    return Markup.inlineKeyboard([
        [Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'back')]
    ]);
};

// Initial welcome message
const showWelcome = async (ctx: MyContext) => {
    const registrationForm: RegistrationSession = {
        fullName: '',
        birthDate: '',
        passport: '',
        issuedBy: '',
        issueDate: '',
        divisionCode: '',
        registrationAddress: '',
        inn: '',
        accountNumber: '',
        bankName: '',
        bik: '',
        corrAccount: '',
        bankInn: '',
        bankKpp: '',
        phone: '',
        email: '',
        hasMedBook: false,
        medBookExpiry: '',
        hasEducationCert: false,
        educationCertPhoto: '',
        isSelfEmployed: false,
        masterPrice: 0  // –°—Ç–∞–≤–∏–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ undefined
    };
    ctx.scene.session.registrationForm = registrationForm;

    const messageText = '–î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —É—Å—Ç—Ä–æ–∏–º—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É!';
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('–î–∞–≤–∞–π—Ç–µ', 'start_registration')]
    ]);

    if (ctx.callbackQuery?.message) {
        await ctx.editMessageText(messageText, keyboard);
    } else {
        await ctx.reply(messageText, keyboard);
    }
    return ctx.wizard.next();
};

// Check self-employment status
// Type guard –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ callback query
function isDataCallbackQuery(query: CallbackQuery): query is CallbackQuery.DataQuery {
    return 'data' in query;
}

const checkSelfEmployment = async (ctx: MyContext) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ callback query –∏ –µ–≥–æ —Ç–∏–ø
    if (ctx.callbackQuery && isDataCallbackQuery(ctx.callbackQuery)) {
        // –¢–µ–ø–µ—Ä—å TypeScript –∑–Ω–∞–µ—Ç, —á—Ç–æ data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (ctx.callbackQuery.data === 'start_registration') {
            const messageText = '–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–º?';
            const keyboard = Markup.inlineKeyboard([
                [
                    Markup.button.callback('–î–∞', 'self_employed_yes'),
                    Markup.button.callback('–ù–µ—Ç', 'self_employed_no')
                ]
            ]);
            await ctx.editMessageText(messageText, keyboard);
            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
            await ctx.answerCbQuery();
        }
    }
    return ctx.wizard.next();
};

// Handle self-employment response
const handleSelfEmployment = new Composer<MyContext>();
handleSelfEmployment.action('self_employed_no', async (ctx) => {
    ctx.scene.session.registrationForm.isSelfEmployed = false;
    const messageText = '–û—Ñ–æ—Ä–º–∏—Ç–µ—Å—å –∫–∞–∫ –°–ú–ó –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.url('–û—Ñ–æ—Ä–º–∏—Ç—å—Å—è', 'https://npd.nalog.ru/')],
        [Markup.button.callback('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'continue_registration')]
    ]);
    await ctx.editMessageText(messageText, keyboard);
});

handleSelfEmployment.action('self_employed_yes', async (ctx) => {
    ctx.scene.session.registrationForm.isSelfEmployed = true;
    return requestFullName(ctx);
});

handleSelfEmployment.action('continue_registration', async (ctx) => {
    return requestFullName(ctx);
});

// Request full name
const requestFullName = async (ctx: MyContext) => {
    await ctx.reply(ValidationMessages.FULL_NAME.prompt);
    return ctx.wizard.next();
};

// Handle full name input
const handleFullName = new Composer<MyContext>();
handleFullName.on('text', async (ctx) => {
    const fullName = ctx.message.text;
    
    if (!validateField(fullName, 'FULL_NAME')) {
        await ctx.reply(ValidationMessages.FULL_NAME.error);
        
        return;
    }
    
    ctx.scene.session.registrationForm.fullName = fullName;
    await ctx.reply(ValidationMessages.BIRTH_DATE.prompt);
    return ctx.wizard.next();
});

// Handle birth date
// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
const handleBirthDate = new Composer<MyContext>();
handleBirthDate.on('text', async (ctx) => {
    const birthDate = ctx.message.text.trim();
    
    if (!validateField(birthDate, 'BIRTH_DATE')) {
        await ctx.reply(ValidationMessages.BIRTH_DATE.error);
        return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ä–∞–∑—É–º–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
    const [day, month, year] = birthDate.split('.').map(Number);
    const birthTimestamp = new Date(year, month - 1, day).getTime();
    const now = new Date().getTime();
    const age = (now - birthTimestamp) / (365.25 * 24 * 60 * 60 * 1000);
    
    if (age < 18 || age > 100) {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã. –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 100 –ª–µ—Ç.');
        return;
    }
    
    ctx.scene.session.registrationForm.birthDate = birthDate;
    await ctx.reply(ValidationMessages.PASSPORT.prompt);
    return ctx.wizard.next();
});

// Handle passport
const handlePassport = new Composer<MyContext>();
handlePassport.on('text', async (ctx) => {
    const passport = ctx.message.text;
    
    if (!validateField(passport, 'PASSPORT')) {
        await ctx.reply(ValidationMessages.PASSPORT.error);
        
        return;
    }
    
    ctx.scene.session.registrationForm.passport = passport;
    await ctx.reply(ValidationMessages.ISSUED_BY.prompt);
    return ctx.wizard.next();
});

// Handle issued by
const handleIssuedBy = new Composer<MyContext>();
handleIssuedBy.on('text', async (ctx) => {
    const issuedBy = ctx.message.text;
    
    if (!validateIssuedBy(issuedBy)) {
        await ctx.reply(ValidationMessages.ISSUED_BY.error);
        
        return;
    }
    
    ctx.scene.session.registrationForm.issuedBy = issuedBy;
    await ctx.reply(ValidationMessages.ISSUE_DATE.prompt);
    return ctx.wizard.next();
});

// Handle issue date
const handleIssueDate = new Composer<MyContext>();
handleIssueDate.on('text', async (ctx) => {
    const issueDate = ctx.message.text;
    
    if (!validateField(issueDate, 'ISSUE_DATE')) {
        await ctx.reply(ValidationMessages.ISSUE_DATE.error);
        
        return;
    }
    
    ctx.scene.session.registrationForm.issueDate = issueDate;
    await ctx.reply(ValidationMessages.DIVISION_CODE.prompt);
    return ctx.wizard.next();
});

// Handle division code
const handleDivisionCode = new Composer<MyContext>();
handleDivisionCode.on('text', async (ctx) => {
    const divisionCode = ctx.message.text;
    
    if (!validateField(divisionCode, 'DIVISION_CODE')) {
        await ctx.reply(ValidationMessages.DIVISION_CODE.error);
       
        return;
    }
    
    ctx.scene.session.registrationForm.divisionCode = divisionCode;
    await ctx.reply(ValidationMessages.ADDRESS.prompt);
    return ctx.wizard.next();
});

// Handle address
const handleAddress = new Composer<MyContext>();
handleAddress.on('text', async (ctx) => {
    const address = ctx.message.text;
    
    if (!validateAddress(address)) {
        await ctx.reply(ValidationMessages.ADDRESS.error);
        
        return;
    }
    
    ctx.scene.session.registrationForm.registrationAddress = address;
    await ctx.reply(ValidationMessages.INN.prompt);
    return ctx.wizard.next();
});

// Handle INN
const handleInn = new Composer<MyContext>();
handleInn.on('text', async (ctx) => {
    const inn = ctx.message.text;
    
    if (!validateField(inn, 'INN')) {
        await ctx.reply(ValidationMessages.INN.error);
        
        return;
    }
    
    ctx.scene.session.registrationForm.inn = inn;
    await ctx.reply(ValidationMessages.ACCOUNT_NUMBER.prompt);
    return ctx.wizard.next();
});

// Handle account number
const handleAccountNumber = new Composer<MyContext>();
handleAccountNumber.on('text', async (ctx) => {
    const accountNumber = ctx.message.text;
    
    if (!validateField(accountNumber, 'ACCOUNT_NUMBER')) {
        await ctx.reply(ValidationMessages.ACCOUNT_NUMBER.error);
        
        return;
    }
    
    ctx.scene.session.registrationForm.accountNumber = accountNumber;
    await ctx.reply(ValidationMessages.BANK_NAME.prompt);
    return ctx.wizard.next();
});

// Handle bank name
const handleBankName = new Composer<MyContext>();
handleBankName.on('text', async (ctx) => {
    const bankName = ctx.message.text;
    
    if (!validateBankName(bankName)) {
        await ctx.reply(ValidationMessages.BANK_NAME.error);
       
        return;
    }
    
    ctx.scene.session.registrationForm.bankName = bankName;
    await ctx.reply(ValidationMessages.BIK.prompt);
    return ctx.wizard.next();
});

// Handle BIK
const handleBik = new Composer<MyContext>();
handleBik.on('text', async (ctx) => {
    const bik = ctx.message.text;
    
    if (!validateField(bik, 'BIK')) {
        await ctx.reply(ValidationMessages.BIK.error);
        
        return;
    }
    
    ctx.scene.session.registrationForm.bik = bik;
    await ctx.reply(ValidationMessages.CORR_ACCOUNT.prompt);
    return ctx.wizard.next();
});

// Handle correspondent account
const handleCorrAccount = new Composer<MyContext>();
handleCorrAccount.on('text', async (ctx) => {
    const corrAccount = ctx.message.text;
    
    if (!validateField(corrAccount, 'CORR_ACCOUNT')) {
        await ctx.reply(ValidationMessages.CORR_ACCOUNT.error);
        
        return;
    }
    
    ctx.scene.session.registrationForm.corrAccount = corrAccount;
    await ctx.reply(ValidationMessages.BANK_INN.prompt);
    return ctx.wizard.next();
});

// Handle bank INN
const handleBankInn = new Composer<MyContext>();
handleBankInn.on('text', async (ctx) => {
    const bankInn = ctx.message.text;
    
    if (!validateField(bankInn, 'BANK_INN')) {
        await ctx.reply(ValidationMessages.BANK_INN.error);
        
        return;
    }
    
    ctx.scene.session.registrationForm.bankInn = bankInn;
    await ctx.reply(ValidationMessages.BANK_KPP.prompt);
    return ctx.wizard.next();
});

// Handle bank KPP
const handleBankKpp = new Composer<MyContext>();
handleBankKpp.on('text', async (ctx) => {
    const bankKpp = ctx.message.text;
    
    if (!validateField(bankKpp, 'BANK_KPP')) {
        await ctx.reply(ValidationMessages.BANK_KPP.error);
        
        return;
    }
    
    ctx.scene.session.registrationForm.bankKpp = bankKpp;
    await ctx.reply(ValidationMessages.PHONE.prompt);
    return ctx.wizard.next();
});

// Handle phone
const handlePhone = new Composer<MyContext>();
handlePhone.on('text', async (ctx) => {
    const phone = ctx.message.text;
    
    if (!validateField(phone, 'PHONE')) {
        await ctx.reply(ValidationMessages.PHONE.error);
        
        return;
    }
    
    ctx.scene.session.registrationForm.phone = phone;
    await ctx.reply(ValidationMessages.EMAIL.prompt);
    return ctx.wizard.next();
});

// Handle email
const handleEmail = new Composer<MyContext>();
handleEmail.on('text', async (ctx) => {
    const email = ctx.message.text;
    
    if (!validateField(email, 'EMAIL')) {
        await ctx.reply(ValidationMessages.EMAIL.error);
        
        return;
    }
    
    ctx.scene.session.registrationForm.email = email;
    await ctx.reply('–£ –≤–∞—Å –µ—Å—Ç—å –º–µ–¥ –∫–Ω–∏–∂–∫–∞?', Markup.inlineKeyboard([
        [
            Markup.button.callback('–î–∞', 'med_book_yes'),
            Markup.button.callback('–ù–µ—Ç', 'med_book_no')
        ]
    ]));
    return ctx.wizard.next();
});

// Handle med book response
const handleMedBook = new Composer<MyContext>();
handleMedBook.action('med_book_yes', async (ctx) => {
    ctx.scene.session.registrationForm.hasMedBook = true;
    await ctx.reply(ValidationMessages.MED_BOOK_EXPIRY.prompt);
    return ctx.wizard.next();
});
handleMedBook.action('med_book_no', async (ctx) => {
    ctx.scene.session.registrationForm.hasMedBook = false;
    return handleEducationCertQuestion(ctx);
});

// Handle med book expiry
const handleMedBookExpiry = new Composer<MyContext>();
handleMedBookExpiry.on('text', async (ctx) => {
    const medBookExpiry = ctx.message.text;
    
    if (!validateField(medBookExpiry, 'MED_BOOK_EXPIRY')) {
        await ctx.reply(ValidationMessages.MED_BOOK_EXPIRY.error);
        
        return;
    }
    
    ctx.scene.session.registrationForm.medBookExpiry = medBookExpiry;
    return handleEducationCertQuestion(ctx);
});

// Handle education certificate question
const handleEducationCertQuestion = async (ctx: MyContext) => {
    await ctx.reply('–£ –≤–∞—Å –µ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏?', Markup.inlineKeyboard([
        [
            Markup.button.callback('–î–∞', 'education_cert_yes'),
            Markup.button.callback('–ù–µ—Ç', 'education_cert_no')
        ]
    ]));
    return ctx.wizard.next();
};

// Handle education certificate response
const handleEducationCert = new Composer<MyContext>();
handleEducationCert.action('education_cert_yes', async (ctx) => {
    ctx.scene.session.registrationForm.hasEducationCert = true;
    await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞');
    return ctx.wizard.next();
});

handleEducationCert.action('education_cert_no', async (ctx) => {
    ctx.scene.session.registrationForm.hasEducationCert = false;
    await ctx.reply(ValidationMessages.MASTER_PRICE.prompt);
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥ handleEducationCertPhoto
    ctx.wizard.selectStep(ctx.wizard.cursor + 2);
    return;
});

// Handle education certificate photo
const handleEducationCertPhoto = new Composer<MyContext>();
handleEducationCertPhoto.on('photo', async (ctx) => {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ
    await ctx.reply('‚úÖ –§–æ—Ç–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–æ');
    
    const photo = ctx.message.photo[ctx.message.photo.length - 1];
    ctx.scene.session.registrationForm.educationCertPhoto = photo.file_id;

    // –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —à–∞–≥–æ–º
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
    await ctx.reply(ValidationMessages.MASTER_PRICE.prompt);
    return ctx.wizard.next();
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è —Ç–µ—Ö, —É –∫–æ–≥–æ –Ω–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
handleEducationCertPhoto.action('skip_photo', async (ctx) => {
    await ctx.reply(ValidationMessages.MASTER_PRICE.prompt);
    return ctx.wizard.next();
});


const handleMasterPrice = new Composer<MyContext>();

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
handleMasterPrice.on('text', async (ctx) => {
    const price = parseInt(ctx.message.text);
    console.log('Received master price:', price);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–º
    if (isNaN(price)) {
        await ctx.reply(ValidationMessages.MASTER_PRICE.error);
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
    if (price <= 0 || price > 50) {
        await ctx.reply(ValidationMessages.MASTER_PRICE.error);
        return;
    }

    try {
        ctx.scene.session.registrationForm.masterPrice = price;
        console.log('Saved master price:', ctx.scene.session.registrationForm);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await ctx.reply(
            `‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞: ${price}%\n\n–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...`
        );

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —à–∞–≥—É
        await handleFinalStep(ctx);
    } catch (error) {
        console.error('Error in handleMasterPrice:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å—Ç–∞–≤–∫—É —Å–Ω–æ–≤–∞.');
    }
});

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
handleMasterPrice.on('message', async (ctx) => {
    console.log('Received non-text message in master price handler');
    await ctx.reply(ValidationMessages.MASTER_PRICE.error);
});



// –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≥—Ä—É–ø–ø –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
const documentGroups = new Map<string, {
    files: Array<{file_id: string, file_name: string}>,
    timer?: NodeJS.Timeout,
    processed: boolean
}>();

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function logDebug(message: string, data?: any) {
    console.log(`[${new Date().toISOString()}] ${message}`, data ? JSON.stringify(data, null, 2) : '');
}

const handleSignedDocuments = new Composer<MyContext>();

handleSignedDocuments.on('document', async (ctx) => {
    console.log('DEBUG: Document handler triggered', {
        sessionData: ctx.scene?.session,
        registrationId: ctx.scene?.session?.registrationId
    });
    const message = ctx.message;
    const mediaGroupId = message.media_group_id;
    const document = message.document;

    logDebug('–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç:', {
        mediaGroupId,
        fileName: document.file_name,
        fileId: document.file_id,
        fileSize: document.file_size,
        registrationId: ctx.scene.session.registrationId
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    const fileName = document.file_name?.toLowerCase();
    if (!fileName?.endsWith('.pdf') && !fileName?.endsWith('.docx')) {
        logDebug('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:', { fileName });
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö PDF –∏–ª–∏ DOCX');
        return;
    }

    if (!mediaGroupId) {
        logDebug('–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ –≤ –≥—Ä—É–ø–ø–µ');
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –≤—ã–±—Ä–∞–≤ –∏—Ö –≤—Å–µ —Å—Ä–∞–∑—É.');
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    let group = documentGroups.get(mediaGroupId);
    if (!group) {
        logDebug('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', { mediaGroupId });
        group = {
            files: [],
            processed: false
        };
        documentGroups.set(mediaGroupId, group);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –≥—Ä—É–ø–ø—É
    group.files.push({
        file_id: document.file_id,
        file_name: document.file_name
    });
    logDebug('–î–æ–±–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –≤ –≥—Ä—É–ø–ø—É:', {
        mediaGroupId,
        totalFiles: group.files.length,
        currentFile: document.file_name
    });

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (group.timer) {
        clearTimeout(group.timer);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø—ã
    group.timer = setTimeout(async () => {
        logDebug('–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', {
            mediaGroupId,
            filesCount: group.files.length
        });

        if (group.processed) {
            logDebug('–ì—Ä—É–ø–ø–∞ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞:', { mediaGroupId });
            return;
        }

        try {
            group.processed = true;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ registrationId
            const registrationId = ctx.scene.session.registrationId;
            if (!registrationId) {
                throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç registrationId –≤ —Å–µ—Å—Å–∏–∏');
            }

            logDebug('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤:', {
                mediaGroupId,
                registrationId,
                filesCount: group.files.length
            });

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            const uploadPromises = group.files.map(async (doc) => {
                logDebug('–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –æ—Ç Telegram:', {
                    fileId: doc.file_id,
                    fileName: doc.file_name
                });

                const file = await ctx.telegram.getFile(doc.file_id);
                const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN_MASTER}/${file.file_path}`;

                logDebug('–ü–æ–ª—É—á–µ–Ω URL —Ñ–∞–π–ª–∞:', {
                    fileName: doc.file_name,
                    fileUrl: fileUrl
                });

                return {
                    url: fileUrl,
                    name: doc.file_name
                };
            });

            const uploadedFiles = await Promise.all(uploadPromises);
            logDebug('–í—Å–µ —Ñ–∞–π–ª—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –∫ –∑–∞–≥—Ä—É–∑–∫–µ:', {
                filesCount: uploadedFiles.length,
                files: uploadedFiles.map(f => f.name)
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ API
            logDebug('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ API:', {
                registrationId,
                filesCount: uploadedFiles.length
            });

            const response = await laravelService.uploadSignedDocuments(
                registrationId,
                uploadedFiles
            );

            logDebug('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API:', { response });

            await ctx.reply('–°–ø–∞—Å–∏–±–æ! –î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º –∏—Ö –∏ —Å–æ–æ–±—â–∏–º –≤–∞–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö.');
            
            // –û—á–∏—â–∞–µ–º –≥—Ä—É–ø–ø—É
            documentGroups.delete(mediaGroupId);
            logDebug('–ì—Ä—É–ø–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞:', { mediaGroupId });
            
            return ctx.scene.leave();
        } catch (error) {
            logDebug('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', {
                mediaGroupId,
                error: error.message,
                stack: error.stack
            });

            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
            
            // –û—á–∏—â–∞–µ–º –≥—Ä—É–ø–ø—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            documentGroups.delete(mediaGroupId);
        }
    }, 2000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ 2 —Å–µ–∫—É–Ω–¥
});

// Handle final step
// –í handleFinalStep –¥–æ–±–∞–≤–∏–º:
const handleFinalStep = async (ctx: MyContext) => {
    await ctx.reply('–û—Ç–ª–∏—á–Ω–æ, –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –∏—Ö —Å—é–¥–∞.');
    
    try {
        console.log('Attempting to submit registration with data:', {
            ...ctx.scene.session.registrationForm,
            masterPrice: ctx.scene.session.registrationForm.masterPrice
        });
        
        const registrationResponse = await laravelService.submitRegistration(ctx.scene.session.registrationForm);
        console.log('Registration submitted successfully:', registrationResponse);
        
        const registrationId = registrationResponse.data.id;
        // –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º registrationId –≤ —Å–µ—Å—Å–∏–∏
        ctx.scene.session.registrationId = registrationId;
        console.log('DEBUG: Registration ID saved to session:', registrationId);
        ctx.scene.session.documentUpload = {
            documents: [],
            registrationId: registrationId
        };
        
        if (!registrationId) {
            throw new Error('Registration ID not found in response');
        }

        const zipBuffer = await laravelService.generateContract({
            id: registrationId
        });

        await ctx.replyWithDocument({
            source: zipBuffer,
            filename: `–î–æ–∫—É–º–µ–Ω—Ç—ã_${registrationResponse.data.contract_number}.zip`
        });

        const instructions = `
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é!!!

1. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤
2. –ü–æ–¥–ø–∏—à–∏—Ç–µ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–°–ï –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –û–î–ù–ò–ú –°–û–û–ë–©–ï–ù–ò–ï–ú –≤ —ç—Ç–æ—Ç —á–∞—Ç

‚ùóÔ∏è –í–∞–∂–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤)
- –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö PDF –∏–ª–∏ DOCX
- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ö–æ—Ä–æ—à–æ —á–∏—Ç–∞–µ–º—ã
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:
üì± –í –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É
2. –í—ã–±–µ—Ä–∏—Ç–µ "–§–∞–π–ª"
3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç—Ä–∏ —Ç–æ—á–∫–∏ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
4. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
5. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"

üíª –í –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏:
1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É
2. –ó–∞–∂–º–∏—Ç–µ Ctrl –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
3. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å"`;

        await ctx.reply(instructions, { parse_mode: 'HTML' });
        return ctx.wizard.next();

    } catch (error) {
        console.error('Error in handleFinalStep:', error);
        
        let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. ';
        
        if (error.response?.status === 422) {
            const validationErrors = error.response.data.errors;
            if (validationErrors.email) {
                errorMessage += '–≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π email.';
            } else {
                errorMessage += '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.';
            }
        } else {
            errorMessage += '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        }
        
        await ctx.reply(errorMessage);
    }
};


export const registrationWizard = new Scenes.WizardScene<MyContext>(
    'registration_wizard',
    showWelcome,
    checkSelfEmployment,
    handleSelfEmployment,
    handleFullName,
    handleBirthDate,
    handlePassport,
    handleIssuedBy,
    handleIssueDate,
    handleDivisionCode,
    handleAddress,
    handleInn,
    handleAccountNumber,
    handleBankName,
    handleBik,
    handleCorrAccount,
    handleBankInn,
    handleBankKpp,
    handlePhone,
    handleEmail,
    handleMedBook,
    handleMedBookExpiry,
    handleEducationCert,
    handleEducationCertPhoto,
    handleMasterPrice, // –ù–æ–≤—ã–π —à–∞–≥
    handleFinalStep,
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —ç—Ç–∞–ø –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    async (ctx) => {
        // –Ø–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Promise<void>
        await ctx.reply('–û–∂–∏–¥–∞—é –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã...');
        return;
    }
);

registrationWizard.action('cancel', async (ctx) => {
    await ctx.reply(
        '‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n' +
        '–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã',
        Markup.inlineKeyboard([[
            Markup.button.callback('–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', 'start_registration')
        ]])
    );
    return ctx.scene.leave();
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ middleware
registrationWizard.command('restart', async (ctx) => {
    await ctx.scene.leave();
    await ctx.scene.enter('registration_wizard');
});

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å—Ü–µ–Ω—ã
registrationWizard.on('document', handleSignedDocuments);

// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π middleware
registrationWizard.use(async (ctx, next) => {
    console.log('Scene middleware triggered:', {
        step: ctx.wizard?.cursor,
        sessionData: ctx.scene?.session,
        updateType: ctx.updateType
    });
    return next();
});