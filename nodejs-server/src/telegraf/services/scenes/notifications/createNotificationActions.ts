import {Markup} from "telegraf";
import {MyContext} from "../../../types/MyContext";
import {code, fmt} from "telegraf/format";
import logger from "../../../../utils/logger/loggerTelegram";
import LaravelService from "../../../../services/laravelService";

const defaultButtons = [
    [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'reenter')],
    [Markup.button.callback('üëå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')],
];

const defaultButtonsMenuOnly = [
    [Markup.button.callback('üëå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')],
];

export const enterHandler = async (ctx: MyContext) => {
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')],
    ]);
    const message = fmt`–°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é: 
${code('–ù–∞–∑–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')}`;

    try {
        await ctx.editMessageText(message, {
            ...keyboard, // Spread the keyboard markup
            link_preview_options: {
                is_disabled: true
            },
        });
        await ctx.answerCbQuery('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    } catch (error) {
        logger.error('Error sending autobooking message:', error);
        await ctx.reply(message, keyboard);
    }

    return ctx.wizard.next();
}

export const promptForSum = async (ctx: MyContext) => {
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'notification_skip_sum')],
        [Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')],
    ]);

    const message = fmt`–ö–∞–∫–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã?
(–µ—Å–ª–∏ —Å—É–º–º—ã –Ω–µ—Ç, —Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ –ø–æ–ª–µ)`;

    try {
        await ctx.editMessageText(message, {
            ...keyboard, // Spread the keyboard markup
            link_preview_options: {
                is_disabled: true
            },
        });
        await ctx.answerCbQuery('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã');
    } catch (error) {
        logger.error('Error sending autobooking message:', error);
        await ctx.reply(message, keyboard);
    }

    return ctx.wizard.next();
}

export const promptForDateTime = async (ctx: MyContext) => {
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')],
    ]);

    const message = fmt`–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
dd.mm.yyyy hh:mm`;

    try {
        await ctx.editMessageText(message, {
            ...keyboard, // Spread the keyboard markup
            link_preview_options: {
                is_disabled: true
            },
        });
        await ctx.answerCbQuery('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    } catch (error) {
        logger.error('Error sending autobooking message:', error);
        await ctx.reply(message, keyboard);
    }

    return ctx.wizard.next();
}

export const promptForNotificationType = async (ctx: MyContext) => {
    //keyboard one time or constant notification
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('–û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', 'notification_one_time')],
        [Markup.button.callback('–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', 'notification_constant')],
        [Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')],
    ]);

    const message = fmt`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–∑–æ–≤–æ–µ –∏–ª–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ?`;

    try {
        await ctx.editMessageText(message, {
            ...keyboard, // Spread the keyboard markup
            link_preview_options: {
                is_disabled: true
            },
        });
        await ctx.answerCbQuery('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    } catch (error) {
        logger.error('Error sending autobooking message:', error);
        await ctx.reply(message, keyboard);
    }

    return ctx.wizard.next();
}

export const sendSuccessMessage = async (ctx: MyContext) => {
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('–°–æ–∑–¥–∞—Ç—å –µ—â–µ', 'create_notification')],
        [Markup.button.callback('–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'active_notifications')],
        [Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')],
    ]);

    const message = fmt`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ
${code('–ù–∞–∑–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')}: ${ctx.scene.session.notificationForm.name}
${code('–°—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã')}: ${ctx.scene.session.notificationForm.sum}
${code('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')}: ${ctx.scene.session.notificationForm.dateTime}
${code('–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')}: ${ctx.scene.session.notificationForm.type}`;

    try {
        await LaravelService.createNotificationByTelegramId(ctx.from.id, ctx.scene.session.notificationForm);
    } catch (error) {
        logger.error('Error creating notification:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', Markup.inlineKeyboard(defaultButtonsMenuOnly));
    }

    try {
        await ctx.editMessageText(message, {
            ...keyboard, // Spread the keyboard markup
            link_preview_options: {
                is_disabled: true
            },
        });
        await ctx.answerCbQuery('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');
    } catch (error) {
        logger.error('Error sending autobooking message:', error);
        await ctx.reply(message, keyboard);
    }

}