import {Markup} from "telegraf";
import {MyContext} from "../../../types/MyContext";
import LaravelService from "../../../../services/laravelService";
import logger from "../../../../utils/logger/loggerTelegram";
import {code, fmt} from "telegraf/format";

const defaultButtons = [
    [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'reenter')],
    [Markup.button.callback('üëå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')],
];

const defaultButtonsMenuOnly = [
    [Markup.button.callback('üëå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')],
];

export const enterHandler = async (ctx: MyContext) => {

    const page = ctx.session.page || 1; // Store page in session for navigation
    const perPage = 10; // Adjust perPage if needed

    try {
        const productData = await LaravelService.getTaskByTelegramId(ctx.from.id, page, perPage);

        console.log('productData', productData);

        if (!productData || productData.tasks.length === 0) {
            await ctx.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.', Markup.inlineKeyboard([
                [Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
            ]));
            return ctx.wizard.next();
        }

        const { tasks, currentPage, totalPages } = productData;


        // Generate buttons for products
        const buttons = tasks.map(task => {
            const statusEmoji = task.status == 'open' ? 'üü°' : 'üü¢';
            return [
            Markup.button.callback(statusEmoji + ' ' + task.name, `task_${task.id}`)
        ]
        });

        // Add navigation buttons
        const navigationButtons = [];
        if (currentPage > 1) {
            navigationButtons.push(Markup.button.callback('‚Üê –ù–∞–∑–∞–¥', `tasks_page_${currentPage - 1}`));
        }
        if (currentPage < totalPages) {
            navigationButtons.push(Markup.button.callback('–í–ø–µ—Ä–µ–¥ ‚Üí', `tasks_page_${currentPage + 1}`));
        }
        if (navigationButtons.length) {
            buttons.push(navigationButtons);
        }

        buttons.push(...defaultButtonsMenuOnly);

        const message = `[–∑–∞–¥–∞—á–∏]

–í —ç—Ç–æ–º –±–ª–æ–∫–µ –±—É–¥—É—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏

[—Å–ø–∏—Å–∫–æ–º –≤ –∫–Ω–æ–ø–∫–∞—Ö –≤—ã–≤–æ–¥–∏ –∑–∞–¥–∞—á–∏]`;
        const keyboard = Markup.inlineKeyboard(buttons);

        try {
            await ctx.editMessageText(message, {
                ...keyboard, // Spread the keyboard markup
                link_preview_options: {
                    is_disabled: true
                },
            });
            await ctx.answerCbQuery('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã');
        } catch (error) {
            logger.error('Error sending autobooking message:', error);
            await ctx.reply(message, keyboard);
        }

        await ctx.answerCbQuery();
    } catch (error) {
        logger.error('Error fetching products:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤.', Markup.inlineKeyboard([
            [Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
        ]));
    }
}

export const taskBlockHandler = async (ctx: MyContext) => {
    const task_id = ctx.scene.session.task_id;

    try {
        const tasks = await LaravelService.getTaskById(ctx.from.id, task_id);
        const task = tasks[0];
        const message = fmt`
        [–∑–∞–¥–∞—á–∞]
–ù–∞–∑–≤–∞–Ω–∏–µ: ${code(task.name)}
–û–ø–∏—Å–∞–Ω–∏–µ: ${code(task.description)}
–û–ø–∏—Å–∞–Ω–∏–µ: ${code(task.description)}
–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏: ${code(task.task_number)}
–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ${code(task.responsible)}
–°—Ä–æ–∫: ${code(task.deadline)}
–î–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${code(task.assigned_date)}
–°—Ç–∞—Ç—É—Å: ${code(task.status)}
`;
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('–ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É', 'close_task')],
            [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'reenter')],
            [Markup.button.callback('üëå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')],
        ]);

        try {
            await ctx.editMessageText(message, {
                ...keyboard, // Spread the keyboard markup
                link_preview_options: {
                    is_disabled: true
                },
            });
            await ctx.answerCbQuery('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤');
        } catch (error) {
            logger.error('Error sending autobooking message:', error);
            await ctx.reply(message, keyboard);
        }

    } catch (error) {
        logger.error('Error fetching products:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á', Markup.inlineKeyboard([
            [Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
        ]));
    }
}