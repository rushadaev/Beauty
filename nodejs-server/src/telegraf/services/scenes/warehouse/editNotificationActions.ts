import {Markup} from "telegraf";
import {MyContext} from "../../../types/MyContext";
import {bold, code, fmt} from "telegraf/format";
import logger from "../../../../utils/logger/loggerTelegram";
import LaravelService from "../../../../services/laravelService";
import CacheService from "../../../../utils/redis/Cache/Cache";

const defaultButtons = [
    [Markup.button.callback('üëà –ù–∞–∑–∞–¥', 'reenter')],
    [Markup.button.callback('üëå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')],
];

const defaultButtonsMenuOnly = [
    [Markup.button.callback('üëå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')],
];

export const enterHandler = async (ctx: MyContext) => {
    const page = ctx.session.page || 1; // Store page in session for navigation
    const perPage = 10; // Adjust perPage if needed

    ctx.scene.session.notificationForm.product_id = null;
    ctx.scene.session.notificationForm.product_name = null;
    ctx.scene.session.notificationForm.sum = null;
    ctx.scene.session.notificationForm.type = null;

    try {
        await CacheService.forgetByPattern(`notifications_product_balance_telegram_id_${ctx.from.id}_page_*`);
        const notificationData = await LaravelService.getNotificationsByTelegramId(ctx.from.id, page, perPage, 'product_balance');

        if (!notificationData || notificationData.data.length === 0) {
            await ctx.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.', Markup.inlineKeyboard([
                [Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
            ]));
            return ctx.wizard.next();
        }

        const { data, current_page, last_page: total } = notificationData;

        // Generate buttons for products
        const buttons = data.map(notification => [
            Markup.button.callback(notification.settings.product_name, `edit_warehouse_product_${notification.id}`)
        ]);

        // Add navigation buttons
        const navigationButtons = [];
        if (current_page > 1) {
            navigationButtons.push(Markup.button.callback('‚Üê –ù–∞–∑–∞–¥', `edit_products_page_${current_page - 1}`));
        }
        if (current_page < total) {
            navigationButtons.push(Markup.button.callback('–í–ø–µ—Ä–µ–¥ ‚Üí', `edit_products_page_${current_page + 1}`));
        }
        if (navigationButtons.length) {
            buttons.push(navigationButtons);
        }

        buttons.push(...defaultButtonsMenuOnly);

        const message = `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:`
        const keyboard = Markup.inlineKeyboard(buttons);

        try {
            await ctx.editMessageText(message, {
                ...keyboard, // Spread the keyboard markup
                link_preview_options: {
                    is_disabled: true
                },
            });
            await ctx.answerCbQuery('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä');
        } catch (error) {
            logger.error('Error sending autobooking message:', error);
            await ctx.reply(message, keyboard);
        }

        await ctx.answerCbQuery();
    } catch (error) {
        logger.error('Error fetching products:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤.', Markup.inlineKeyboard([
            [Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')]
        ]));
    }
    return ctx.wizard.next();
};

export const promptForSum = async (ctx: MyContext) => {
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('–ù–∞–∑–∞–¥', 'warehouse_product_' + ctx.scene.session.notificationForm.product_id)],
    ]);

    const product_name = ctx.scene.session.notificationForm.product_name;
    const message = fmt`–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${code(product_name)}`;

    try {
        await ctx.editMessageText(message, {
            ...keyboard, // Spread the keyboard markup
            link_preview_options: {
                is_disabled: true
            },
        });
        await ctx.answerCbQuery('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞');
    } catch (error) {
        logger.error('Error sending autobooking message:', error);
        await ctx.reply(message, keyboard);
    }


}

export const promptForAction = async (ctx: MyContext) => {

    const product = await LaravelService.getOneProductByTelegramId(ctx.from.id, ctx.scene.session.notificationForm.product_id);

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('–ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'change_minimal_sum')],
        [Markup.button.callback('–£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', 'delete_notification')],
        [Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')],
    ]);

    const amount = product.actual_amounts[0].amount ?? 0;

    const message = fmt`
–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - ${code(ctx.scene.session.notificationForm.product_name)} 
–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª-–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ - ${code(amount)}
–ú–∏–Ω –∫–æ–ª-–≤–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${code(ctx.scene.session.notificationForm.sum)}`;

    try {
        await ctx.editMessageText(message, {
            ...keyboard, // Spread the keyboard markup
            link_preview_options: {
                is_disabled: true
            },
        });
        await ctx.answerCbQuery('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ');
    } catch (error) {
        logger.error('Error sending autobooking message:', error);
        await ctx.reply(message, keyboard);
    }
}

export const promptForDateTime = async (ctx: MyContext) => {
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'notification_skip_date')],
        [Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')],
    ]);

    const message = fmt`–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
dd.mm.yyyy hh:mm

 ${bold('–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ')} ${code(ctx.session.notificationForm.dateTime)}
 
 –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
`;

    try {
        await ctx.editMessageText(message, {
            ...keyboard, // Spread the keyboard markup
            link_preview_options: {
                is_disabled: true
            },
        });
        await ctx.answerCbQuery('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    } catch (error) {
        logger.error('Error sending autobooking message:', error);
        await ctx.reply(message, keyboard);
    }

    return ctx.wizard.next();
}

export const promptForNotificationType = async (ctx: MyContext) => {
    //keyboard one time or constant notification
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'notification_skip_type')],
        [Markup.button.callback('–û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', 'notification_one_time')],
        [Markup.button.callback('–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', 'notification_constant')],
        [Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')],
    ]);

    const message = fmt`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–∑–æ–≤–æ–µ –∏–ª–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ?
    
    ${bold('–¢–µ–∫—É—â–∏–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ')} ${code(ctx.session.notificationForm.type)}
    
    –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    `;

    try {
        await ctx.editMessageText(message, {
            ...keyboard, // Spread the keyboard markup
            link_preview_options: {
                is_disabled: true
            },
        });
        await ctx.answerCbQuery('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    } catch (error) {
        logger.error('Error sending autobooking message:', error);
        await ctx.reply(message, keyboard);
    }

    return ctx.wizard.next();
}

export const deleteNotification = async (ctx: MyContext) => {
    try {
        await LaravelService.deleteNotification(ctx.scene.session.notificationForm.notification_id);
    } catch (error) {
        logger.error('Error deleting notification:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', Markup.inlineKeyboard(defaultButtonsMenuOnly));
    }

    await ctx.reply('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ', Markup.inlineKeyboard(defaultButtonsMenuOnly));
}

export const sendSuccessMessage = async (ctx: MyContext) => {
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'active_notifications')],
        [Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainmenu')],
    ]);

    const message = fmt`
    –í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${code(ctx.scene.session.notificationForm.product_name)} : ${code(ctx.scene.session.notificationForm.sum)}. 

–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç —ç—Ç–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
`;

    try {
        await LaravelService.updateNotificationById(ctx.scene.session.notificationForm.notification_id, ctx.scene.session.notificationForm);
    } catch (error) {
        logger.error('Error creating notification:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', Markup.inlineKeyboard(defaultButtonsMenuOnly));
    }

    try {
        await ctx.editMessageText(message, {
            ...keyboard, // Spread the keyboard markup
            link_preview_options: {
                is_disabled: true
            },
        });
        await ctx.answerCbQuery('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');
    } catch (error) {
        logger.error('Error sending autobooking message:', error);
        await ctx.reply(message, keyboard);
    }

}