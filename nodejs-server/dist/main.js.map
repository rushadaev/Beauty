{"version":3,"file":"main.js","mappings":"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","sources":["webpack://nodejs-server/./src/controllers/acceptanceController.ts","webpack://nodejs-server/./src/controllers/draftsController.ts","webpack://nodejs-server/./src/controllers/ordersController.ts","webpack://nodejs-server/./src/controllers/yclientsController.ts","webpack://nodejs-server/./src/routes/acceptance.ts","webpack://nodejs-server/./src/routes/drafts.ts","webpack://nodejs-server/./src/routes/orders.ts","webpack://nodejs-server/./src/routes/yclientsRoutes.ts","webpack://nodejs-server/./src/services/laravelService.ts","webpack://nodejs-server/./src/services/openaiService.ts","webpack://nodejs-server/./src/services/wildberriesService.ts","webpack://nodejs-server/./src/telegraf/controllers/telegramBotMasterController.ts","webpack://nodejs-server/./src/telegraf/controllers/telegramController.ts","webpack://nodejs-server/./src/telegraf/services/bot-master/scenes/changeDescriptionScene.ts","webpack://nodejs-server/./src/telegraf/services/bot-master/scenes/loginWizard.ts","webpack://nodejs-server/./src/telegraf/services/bot-master/scenes/mainScene.ts","webpack://nodejs-server/./src/telegraf/services/bot-master/scenes/registrationWizard.ts","webpack://nodejs-server/./src/telegraf/services/scenes/employment/employmentActions.ts","webpack://nodejs-server/./src/telegraf/services/scenes/employment/employmentScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/mainScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/notifications/createNotificationActions.ts","webpack://nodejs-server/./src/telegraf/services/scenes/notifications/createNotificationScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/notifications/editNotificationActions.ts","webpack://nodejs-server/./src/telegraf/services/scenes/notifications/editNotificationScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/notifications/notificationActions.ts","webpack://nodejs-server/./src/telegraf/services/scenes/notifications/notificationsListScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/notifications/notificationsScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/salary/salaryActions.ts","webpack://nodejs-server/./src/telegraf/services/scenes/salary/salaryScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/staff/staffActions.ts","webpack://nodejs-server/./src/telegraf/services/scenes/staff/staffScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/tasks/tasksActions.ts","webpack://nodejs-server/./src/telegraf/services/scenes/tasks/tasksScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/warehouse/createNotificationActions.ts","webpack://nodejs-server/./src/telegraf/services/scenes/warehouse/createNotificationScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/warehouse/editNotificationActions.ts","webpack://nodejs-server/./src/telegraf/services/scenes/warehouse/editNotificationScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/warehouse/warehouseActions.ts","webpack://nodejs-server/./src/telegraf/services/scenes/warehouse/warehouseScene.ts","webpack://nodejs-server/./src/telegraf/services/warehouseBot.ts","webpack://nodejs-server/./src/telegraf/utils/cabinetGate.ts","webpack://nodejs-server/./src/utils/clusterManager.ts","webpack://nodejs-server/./src/utils/logger/loggerTelegram.ts","webpack://nodejs-server/./src/utils/pow/solveTask.ts","webpack://nodejs-server/./src/utils/redis/Cache/Cache.ts","webpack://nodejs-server/./src/utils/redis/redisClient.ts","webpack://nodejs-server/external commonjs \"@telegraf/session/redis\"","webpack://nodejs-server/external commonjs \"axios\"","webpack://nodejs-server/external commonjs \"body-parser\"","webpack://nodejs-server/external commonjs \"express\"","webpack://nodejs-server/external commonjs \"openai\"","webpack://nodejs-server/external commonjs \"php-serialize\"","webpack://nodejs-server/external commonjs \"playwright-cluster\"","webpack://nodejs-server/external commonjs \"redis\"","webpack://nodejs-server/external commonjs \"telegraf\"","webpack://nodejs-server/external commonjs \"telegraf/format\"","webpack://nodejs-server/external commonjs \"winston\"","webpack://nodejs-server/external node-commonjs \"fs\"","webpack://nodejs-server/external node-commonjs \"path\"","webpack://nodejs-server/external node-commonjs \"vm\"","webpack://nodejs-server/webpack/bootstrap","webpack://nodejs-server/webpack/runtime/compat get default export","webpack://nodejs-server/webpack/runtime/define property getters","webpack://nodejs-server/webpack/runtime/hasOwnProperty shorthand","webpack://nodejs-server/webpack/runtime/make namespace object","webpack://nodejs-server/./src/index.ts"],"sourcesContent":["// src/controllers/acceptanceController.ts\r\n\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport {Request, RequestHandler, Response} from 'express';\r\nimport {solveTaskInNode, TaskInput, wasmPath} from '../utils/pow/solveTask';\r\n\r\n// Define Interfaces for Storage State\r\ninterface Cookie {\r\n    name: string;\r\n    value: string;\r\n}\r\n\r\ninterface LocalStorageItem {\r\n    name: string;\r\n    value: string;\r\n}\r\n\r\ninterface OriginData {\r\n    origin: string;\r\n    localStorage: LocalStorageItem[];\r\n}\r\n\r\ninterface StorageState {\r\n    cookies: Cookie[];\r\n    origins: OriginData[];\r\n}\r\n\r\n// Define Interfaces for Acceptance Costs Response\r\ninterface Coefficient {\r\n    coefficient: number;\r\n    // Add other properties if necessary\r\n}\r\n\r\ninterface AcceptanceCostsResult {\r\n    costs: Coefficient[];\r\n    // Add other properties if necessary\r\n}\r\n\r\ninterface AcceptanceCostsResponse {\r\n    result?: AcceptanceCostsResult;\r\n    // Add other properties if necessary\r\n}\r\n\r\n// Define Interfaces for Book Timeslot Response\r\ninterface BookTimeslotResult {\r\n    // Define the structure based on actual response\r\n    [key: string]: any;\r\n}\r\n\r\n// Define Interfaces for POW Task\r\ninterface PowTask {\r\n    // Define based on actual task structure\r\n    [key: string]: any;\r\n}\r\n\r\ninterface PowAnswer {\r\n    // Define based on actual answer structure\r\n    [key: string]: any;\r\n}\r\n\r\n// Helper function to wait\r\nconst wait = (ms: number): Promise<void> => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// Ensure the functions are typed as RequestHandler\r\nexport const fetchTimeslots: RequestHandler = async (req: Request, res: Response): Promise<void> => {\r\n    const { userId, preorderId } = req.query;\r\n\r\n    if (!userId || !preorderId) {\r\n        res.status(400).json({ error: 'Missing userId or preorderId parameter.' });\r\n        return;\r\n    }\r\n\r\n    try {\r\n        // Path to the user's state.json\r\n        const statePath = path.join('/var/www/wb-back/storage/state', `${userId}.json`);\r\n\r\n        if (!fs.existsSync(statePath)) {\r\n            res.status(404).json({ error: 'User state not found.' });\r\n            return;\r\n        }\r\n\r\n        const storageState: StorageState = JSON.parse(fs.readFileSync(statePath, 'utf-8'));\r\n\r\n        // Extract cookies and WBTokenV3\r\n        const { cookies, origins } = storageState;\r\n        let cookieHeader = cookies.map(cookie => `${cookie.name}=${cookie.value}`).join('; ');\r\n\r\n        const originData = origins.find(origin => origin.origin === 'https://seller.wildberries.ru');\r\n        if (!originData) {\r\n            res.status(400).json({ error: 'Origin data not found in state.' });\r\n            return;\r\n        }\r\n\r\n        const wbTokenEntry = originData.localStorage.find(item => item.name === 'wb-eu-passport-v2.access-token');\r\n        const wbTokenValue = wbTokenEntry ? wbTokenEntry.value : null;\r\n\r\n        if (!wbTokenValue) {\r\n            res.status(400).json({ error: 'WBTokenV3 token not found in localStorage.' });\r\n            return;\r\n        }\r\n\r\n        // Add WBTokenV3 to cookies\r\n        cookieHeader += `; WBTokenV3=${wbTokenValue}`;\r\n\r\n        // Define headers\r\n        const headers = {\r\n            'Content-Type': 'application/json',\r\n            'Cookie': cookieHeader,\r\n            'Accept': '*/*',\r\n            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',\r\n            'Origin': 'https://seller.wildberries.ru',\r\n            'Referer': 'https://seller.wildberries.ru/',\r\n            'Accept-Language': 'ru,en-GB;q=0.9,en-US;q=0.8,en;q=0.7',\r\n            'sec-ch-ua': '\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\"',\r\n            'sec-ch-ua-mobile': '?0',\r\n            'sec-ch-ua-platform': '\"macOS\"',\r\n            'sec-fetch-dest': 'empty',\r\n            'sec-fetch-mode': 'cors',\r\n            'sec-fetch-site': 'same-site',\r\n        };\r\n\r\n        // **a. Get Acceptance Costs**\r\n        const acceptanceCostsUrl = 'https://seller-supply.wildberries.ru/ns/sm-supply/supply-manager/api/v1/supply/getAcceptanceCosts';\r\n        const dateFrom = new Date().toISOString();\r\n        const dateTo = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(); // 30 days from now\r\n        const acceptanceCostsData = {\r\n            \"params\": {\r\n                \"dateFrom\": dateFrom,\r\n                \"dateTo\": dateTo,\r\n                \"preorderID\": Number(preorderId)\r\n            },\r\n            \"jsonrpc\": \"2.0\",\r\n            \"id\": \"json-rpc_35\"\r\n        };\r\n\r\n        const acceptanceCostsResponse: AxiosResponse<AcceptanceCostsResponse> = await axios.post(acceptanceCostsUrl, acceptanceCostsData, { headers });\r\n        const acceptanceCostsResult = acceptanceCostsResponse.data?.result;\r\n\r\n        if (!acceptanceCostsResult) {\r\n            res.status(500).json({ error: 'Failed to retrieve acceptance costs.' });\r\n            return;\r\n        }\r\n\r\n        // Filter coefficients > -1\r\n        acceptanceCostsResult.costs = acceptanceCostsResult.costs.filter(coefficient => coefficient.coefficient > -1);\r\n\r\n        res.status(200).json({\r\n            message: 'Fetched acceptance costs and delivery date successfully.',\r\n            data: {\r\n                acceptanceCosts: acceptanceCostsResult,\r\n            }\r\n        });\r\n    } catch (error: any) {\r\n        console.error('Error fetching acceptance costs:', error.response ? error.response.data : error.message);\r\n        res.status(500).json({ error: 'Internal Server Error.' });\r\n    }\r\n};\r\n\r\nexport const bookTimeslot: RequestHandler = async (req: Request, res: Response): Promise<void> => {\r\n    const { userId, preorderId, deliveryDate, warehouseId, monopalletCount } = req.body;\r\n\r\n    if (!userId || !preorderId || !deliveryDate || !warehouseId) {\r\n        res.status(400).json({ error: 'Missing required parameters.' });\r\n        return;\r\n    }\r\n\r\n    try {\r\n        // Path to the user's state.json\r\n        const statePath = path.join('/var/www/wb-back/storage/state', `${userId}.json`);\r\n\r\n        if (!fs.existsSync(statePath)) {\r\n            res.status(404).json({ error: 'User state not found.' });\r\n            return;\r\n        }\r\n\r\n        const storageState: StorageState = JSON.parse(fs.readFileSync(statePath, 'utf-8'));\r\n\r\n        // Extract cookies and WBTokenV3\r\n        const { cookies, origins } = storageState;\r\n        let cookieHeader = cookies.map(cookie => `${cookie.name}=${cookie.value}`).join('; ');\r\n\r\n        const originData = origins.find(origin => origin.origin === 'https://seller.wildberries.ru');\r\n        if (!originData) {\r\n            res.status(400).json({ error: 'Origin data not found in state.' });\r\n            return;\r\n        }\r\n\r\n        const wbTokenEntry = originData.localStorage.find(item => item.name === 'wb-eu-passport-v2.access-token');\r\n        const wbTokenValue = wbTokenEntry ? wbTokenEntry.value : null;\r\n\r\n        if (!wbTokenValue) {\r\n            res.status(400).json({ error: 'WBTokenV3 token not found in localStorage.' });\r\n            return;\r\n        }\r\n\r\n        // Add WBTokenV3 to cookies\r\n        cookieHeader += `; WBTokenV3=${wbTokenValue}`;\r\n\r\n        // Define headers\r\n        const headers = {\r\n            'Content-Type': 'application/json',\r\n            'Cookie': cookieHeader,\r\n            'Accept': '*/*',\r\n            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',\r\n            'Origin': 'https://seller.wildberries.ru',\r\n            'Referer': 'https://seller.wildberries.ru/',\r\n            'Accept-Language': 'ru,en-GB;q=0.9,en-US;q=0.8,en;q=0.7',\r\n            'sec-ch-ua': '\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\"',\r\n            'sec-ch-ua-mobile': '?0',\r\n            'sec-ch-ua-platform': '\"macOS\"',\r\n            'sec-fetch-dest': 'empty',\r\n            'sec-fetch-mode': 'cors',\r\n            'sec-fetch-site': 'same-site',\r\n        };\r\n\r\n        // **d. Book Timeslot**\r\n        const bookTimeslotUrl = 'https://seller-supply.wildberries.ru/ns/sm/supply-manager/api/v1/plan/add';\r\n\r\n        const bookTimeslotData = {\r\n            \"params\": {\r\n                \"preOrderId\": Number(preorderId),\r\n                \"deliveryDate\": deliveryDate,\r\n                \"warehouseId\": warehouseId,\r\n                ...(monopalletCount !== undefined && { monopalletCount })  // Add monopalletCount if provided\r\n            },\r\n            \"jsonrpc\": \"2.0\",\r\n            \"id\": \"json-rpc_36\"\r\n        };\r\n\r\n        // **Perform CAPTCHA Solving**\r\n        const task: TaskInput = await getPowTask();\r\n\r\n        const startTime = Date.now();\r\n        const answers: PowAnswer[] = await solvePowTask(task);\r\n        const latency = (Date.now() - startTime).toFixed(3); // Latency in milliseconds\r\n\r\n        console.log('answers', answers);\r\n\r\n        const captchaToken: string = await verifyPowAnswer(task, answers);\r\n        console.log('captchaToken', captchaToken);\r\n\r\n        // Include the CAPTCHA token and latency in headers\r\n        const bookTimeslotHeaders = {\r\n            ...headers,\r\n            'x-wb-captcha-token': captchaToken,\r\n            'x-wb-captcha-latency': latency,\r\n        };\r\n\r\n        // Make the plan/add request with CAPTCHA headers\r\n        const bookTimeslotResponse: AxiosResponse<{ result: BookTimeslotResult }> = await axios.post(bookTimeslotUrl, bookTimeslotData, { headers: bookTimeslotHeaders });\r\n        const bookTimeslotResult = bookTimeslotResponse.data.result;\r\n\r\n        console.log('Book Timeslot Result:', bookTimeslotResult);\r\n\r\n        res.status(200).json({\r\n            message: 'Timeslot booked successfully.',\r\n            data: bookTimeslotResult\r\n        });\r\n    } catch (error: any) {\r\n        console.error('Error booking timeslot:', error.response ? error.response.data : error.message);\r\n        res.status(500).json({ error: 'Internal Server Error.' });\r\n    }\r\n};\r\n// Functions for CAPTCHA solving\r\n\r\n/**\r\n * Retrieves a POW task from the server.\r\n * @param clientId Optional client ID.\r\n * @returns The POW task.\r\n */\r\nexport const getPowTask = async (clientId: string | null = null): Promise<TaskInput> => {\r\n    const actualClientId = clientId || 'e150c635-c6bb-4192-8046-97c2cf81e8b8'; // Use the actual client_id if required\r\n    const getTaskUrl = `https://pow.wildberries.ru/api/v1/short/get-task?client_id=${actualClientId}`;\r\n\r\n    const response: AxiosResponse<TaskInput> = await axios.get(getTaskUrl, {\r\n        headers: {\r\n            'Content-Type': 'application/json;charset=UTF-8',\r\n            'Accept': '*/*',\r\n            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',\r\n            'Origin': 'https://seller.wildberries.ru',\r\n            'Referer': 'https://seller.wildberries.ru/',\r\n            'sec-ch-ua': '\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\"',\r\n            'sec-ch-ua-mobile': '?0',\r\n            'sec-ch-ua-platform': '\"macOS\"',\r\n            'sec-fetch-dest': 'empty',\r\n            'sec-fetch-mode': 'cors',\r\n            'sec-fetch-site': 'same-site',\r\n        },\r\n    });\r\n\r\n    return response.data;\r\n};\r\n\r\n/**\r\n * Solves the given POW task.\r\n * @param task The POW task to solve.\r\n * @returns An array of answers.\r\n */\r\nexport const solvePowTask = async (task:TaskInput): Promise<PowAnswer[]> => {\r\n    let resultArray: PowAnswer[] = [];\r\n    try {\r\n        const result = await solveTaskInNode(wasmPath, task);\r\n        resultArray = JSON.parse(result)?.answers;\r\n        console.log('solveTask result:', resultArray);\r\n    } catch (err) {\r\n        console.error('Error running solveTask:', err);\r\n    }\r\n    return resultArray;\r\n};\r\n\r\n/**\r\n * Verifies the POW answer with the server.\r\n * @param task The original POW task.\r\n * @param answers The answers to verify.\r\n * @returns The CAPTCHA token.\r\n */\r\nexport const verifyPowAnswer = async (task:TaskInput, answers: PowAnswer[]): Promise<string> => {\r\n    const verifyUrl = 'https://pow.wildberries.ru/api/v1/short/verify-answer';\r\n\r\n    const data = {\r\n        task,\r\n        answers,\r\n    };\r\n\r\n    console.log('data', data);\r\n\r\n    const response: AxiosResponse<{ 'wb-captcha-short-token': string }> = await axios.post(verifyUrl, JSON.stringify(data), {\r\n        headers: {\r\n            'Content-Type': 'application/json;charset=UTF-8',\r\n            'Accept': '*/*',\r\n            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',\r\n            'Origin': 'https://seller.wildberries.ru',\r\n            'Referer': 'https://seller.wildberries.ru/',\r\n            'sec-ch-ua': '\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\"',\r\n            'sec-ch-ua-mobile': '?0',\r\n            'sec-ch-ua-platform': '\"macOS\"',\r\n            'sec-fetch-dest': 'empty',\r\n            'sec-fetch-mode': 'cors',\r\n            'sec-fetch-site': 'same-site',\r\n        },\r\n    });\r\n\r\n    return response.data['wb-captcha-short-token'];\r\n};\r\n","// nodejs-server/controllers/draftsController.ts\r\n\r\nimport {Request, RequestHandler, Response} from 'express';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport {getDraftsForUser} from \"../services/wildberriesService\";\r\n\r\n// Define Interfaces for Storage State\r\ninterface Cookie {\r\n    name: string;\r\n    value: string;\r\n}\r\n\r\ninterface LocalStorageItem {\r\n    name: string;\r\n    value: string;\r\n}\r\n\r\ninterface OriginData {\r\n    origin: string;\r\n    localStorage: LocalStorageItem[];\r\n}\r\n\r\ninterface StorageState {\r\n    cookies: Cookie[];\r\n    origins: OriginData[];\r\n}\r\n\r\n// Define Interfaces for Drafts Response\r\ninterface Draft {\r\n    createdAt: string;\r\n    updatedAt: string;\r\n    barcodeQuantity: number;\r\n    goodQuantity: number;\r\n    author: string;\r\n    ID: string;\r\n}\r\n\r\ninterface DraftsResult {\r\n    drafts: Draft[];\r\n}\r\n\r\ninterface DraftsApiResponse {\r\n    result: DraftsResult;\r\n}\r\n\r\n// Define Interface for Row Data\r\ninterface RowData {\r\n    createdAt: string;\r\n    updatedAt: string;\r\n    barcodeQuantity: string;\r\n    goodQuantity: string;\r\n    author: string;\r\n    draftId: string;\r\n    url: string;\r\n}\r\n\r\n/**\r\n * List Drafts Endpoint\r\n * Expects a query parameter: userId\r\n */\r\nexport const listDrafts:RequestHandler = async (req: Request, res: Response): Promise<void> => {\r\n    const { userId } = req.query;\r\n\r\n    if (!userId || typeof userId !== 'string') {\r\n        res.status(400).json({ error: 'Missing or invalid userId parameter.' });\r\n        return\r\n    }\r\n\r\n    try {\r\n        const drafts = await getDraftsForUser(userId);\r\n        res.status(200).json({\r\n            message: `Found ${drafts.length} drafts with barcodeQuantity > 0.`,\r\n            data: drafts,\r\n        });\r\n        return\r\n    } catch (error: any) {\r\n        console.error('Error fetching drafts data:', error.message);\r\n        res.status(500).json({ error: 'Internal Server Error.' });\r\n        return\r\n    }\r\n};\r\n","// nodejs-server/controllers/ordersController.ts\r\n\r\nimport { Request, Response } from 'express';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport {createOrderRequest} from \"../services/wildberriesService\";\r\n\r\n/**\r\n * Interfaces for the storage state structure.\r\n */\r\ninterface Cookie {\r\n    name: string;\r\n    value: string;\r\n}\r\n\r\ninterface LocalStorageItem {\r\n    name: string;\r\n    value: string;\r\n}\r\n\r\ninterface OriginData {\r\n    origin: string;\r\n    localStorage: LocalStorageItem[];\r\n}\r\n\r\ninterface StorageState {\r\n    cookies: Cookie[];\r\n    origins: OriginData[];\r\n}\r\n\r\ninterface CreateSupplyResult {\r\n    result?: {\r\n        ids: { Id: string }[];\r\n    };\r\n}\r\n\r\ninterface RecommendationsResult {\r\n    warehouses: Warehouse[];\r\n}\r\n\r\ninterface Warehouse {\r\n    isActive: boolean;\r\n    // Add other relevant properties as needed\r\n}\r\n\r\n/**\r\n * Handler to create an order.\r\n * Expects a JSON body: { userId, draftId, warehouseId, boxTypeMask }\r\n */\r\nexport const createOrder = async (req: Request, res: Response): Promise<void> => {\r\n    const { userId, draftId, warehouseId, boxTypeMask } = req.body;\r\n\r\n    // Validate request body\r\n    if (!userId || !draftId || !warehouseId || !boxTypeMask) {\r\n        res.status(400).json({ error: 'Missing userId, draftId, warehouseId, or boxTypeMask in request body.' });\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const response = await createOrderRequest(userId, draftId, warehouseId, boxTypeMask);\r\n\r\n        // Respond with success and the preorderID\r\n        res.status(200).json({\r\n            message: 'Order created successfully.',\r\n            preorderID: response.preorderID,\r\n        });\r\n    } catch (error: any) {\r\n        console.error('Error during order creation:', error.message);\r\n        res.status(500).json({ error: 'Internal Server Error.' });\r\n    }\r\n};\r\n\r\n/**\r\n * Handler to list warehouses.\r\n * Expects query parameters: { userId, draftId }\r\n */\r\nexport const listWarehouses = async (req: Request, res: Response): Promise<void> => {\r\n    const { userId, draftId } = req.query;\r\n\r\n    // Validate query parameters\r\n    if (typeof userId !== 'string' || typeof draftId !== 'string') {\r\n        res.status(400).json({ error: 'Missing or invalid userId or draftId in query parameters.' });\r\n        return;\r\n    }\r\n\r\n    try {\r\n        // Construct the path to the user's state.json\r\n        const statePath = path.join('/var/www/wb-back/storage/state', `${userId}.json`);\r\n\r\n        // Check if the state file exists\r\n        if (!fs.existsSync(statePath)) {\r\n            res.status(404).json({ error: 'User state not found.' });\r\n            return;\r\n        }\r\n\r\n        // Read and parse the storage state\r\n        const storageStateRaw = fs.readFileSync(statePath, 'utf-8');\r\n        const storageState: StorageState = JSON.parse(storageStateRaw);\r\n\r\n        // Extract cookies and construct the Cookie header\r\n        const cookies = storageState.cookies;\r\n        let cookieHeader = cookies.map(cookie => `${cookie.name}=${cookie.value}`).join('; ');\r\n\r\n        // Find origin data for Wildberries seller\r\n        const originData = storageState.origins.find(origin => origin.origin === 'https://seller.wildberries.ru');\r\n        if (!originData) {\r\n            res.status(400).json({ error: 'Origin data not found in state.' });\r\n            return;\r\n        }\r\n\r\n        // Retrieve WBTokenV3 from localStorage\r\n        const wbTokenEntry = originData.localStorage.find(item => item.name === 'wb-eu-passport-v2.access-token');\r\n        const wbTokenValue = wbTokenEntry ? wbTokenEntry.value : null;\r\n\r\n        if (!wbTokenValue) {\r\n            res.status(400).json({ error: 'WBTokenV3 token not found in localStorage.' });\r\n            return;\r\n        }\r\n\r\n        // Append WBTokenV3 to the Cookie header\r\n        cookieHeader += `; WBTokenV3=${wbTokenValue}`;\r\n\r\n        // Define HTTP headers for the request\r\n        const headers = {\r\n            'Content-Type': 'application/json',\r\n            'Cookie': cookieHeader,\r\n            'Accept': '*/*',\r\n            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',\r\n            'Origin': 'https://seller.wildberries.ru',\r\n            'Referer': 'https://seller.wildberries.ru/',\r\n            'Accept-Language': 'ru,en-GB;q=0.9,en-US;q=0.8,en;q=0.7',\r\n            'sec-ch-ua': '\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\"',\r\n        };\r\n\r\n        // **a. Get Warehouse Recommendations**\r\n        const recommendationsUrl = 'https://seller-supply.wildberries.ru/ns/sm-recommendations/supply-manager/api/v1/recommendations/getRecommendationsForWarehouses';\r\n        const recommendationsData = {\r\n            params: {\r\n                draftId: draftId\r\n            },\r\n            jsonrpc: \"2.0\",\r\n            id: \"json-rpc_20\"\r\n        };\r\n\r\n        // Make the POST request to get warehouse recommendations\r\n        const recommendationsResponse: AxiosResponse<{ result: RecommendationsResult }> = await axios.post(recommendationsUrl, recommendationsData, { headers });\r\n        const recommendationsResult = recommendationsResponse.data.result;\r\n\r\n        // Filter active warehouses\r\n        const activeWarehouses = recommendationsResult.warehouses.filter(warehouse => warehouse.isActive);\r\n        if (activeWarehouses.length === 0) {\r\n            res.status(400).json({ error: 'No active warehouses available.' });\r\n            return;\r\n        }\r\n\r\n        // Respond with the list of active warehouses\r\n        res.status(200).json({\r\n            message: 'Warehouses fetched successfully.',\r\n            warehouses: activeWarehouses,\r\n        });\r\n    } catch (error: any) {\r\n        console.error('Error during warehouse fetch:', error.message);\r\n        res.status(500).json({ error: 'Internal Server Error.' });\r\n    }\r\n};\r\n","import { Request, Response } from 'express';\r\nimport axios from 'axios';\r\n\r\n// Function to get goods\r\nexport const getGoods = async (req: Request, res: Response) => {\r\n    try {\r\n        const response = await axios.get('https://api.yclients.com/api/v1/goods/490462', {\r\n            headers: {\r\n                'Accept': 'application/vnd.api.v2+json',\r\n                'Authorization': 'Bearer rpxh9hw6sjakpdsha6r3, User eb4b7a6a59b300074be260e045ade57c'\r\n            }\r\n        });\r\n\r\n        res.status(200).json(response.data);\r\n    } catch (error: any) {\r\n        console.error('Error fetching goods:', error.message);\r\n        res.status(500).json({ error: 'Failed to get goods' });\r\n    }\r\n};\r\n\r\n// Function to get companies\r\nexport const getCompanies = async (req: Request, res: Response) => {\r\n    try {\r\n        const response = await axios.get('https://api.yclients.com/api/v1/companies', {\r\n            headers: {\r\n                'Accept': 'application/vnd.api.v2+json',\r\n                'Authorization': 'Bearer rpxh9hw6sjakpdsha6r3'\r\n            }\r\n        });\r\n\r\n        res.status(200).json(response.data);\r\n    } catch (error: any) {\r\n        console.error('Error fetching companies:', error.message);\r\n        res.status(500).json({ error: 'Failed to get companies' });\r\n    }\r\n};","// acceptance.ts\r\nimport { Router } from 'express';\r\nimport * as acceptanceController from '../controllers/acceptanceController';\r\n\r\nconst router: Router = Router();\r\n\r\n/**\r\n * @route   GET /api/acceptance/fetchTimeslots\r\n * @desc    Fetch available timeslots\r\n * @query   userId: string\r\n *          preorderId: string\r\n */\r\nrouter.get('/fetchTimeslots', acceptanceController.fetchTimeslots);\r\n\r\n/**\r\n * @route   POST /api/acceptance/bookTimeslot\r\n * @desc    Book a specific timeslot\r\n * @body    userId: string\r\n *          preorderId: string\r\n *          timeslotId: string\r\n */\r\nrouter.post('/bookTimeslot', acceptanceController.bookTimeslot);\r\n\r\nexport default router;","import { Router } from 'express';\r\nimport * as draftsController from '../controllers/draftsController';\r\n\r\nconst router: Router = Router();\r\n\r\n// GET /api/drafts/list\r\nrouter.get('/list', draftsController.listDrafts);\r\n\r\nexport default router;\r\n","// nodejs-server/routes/ordersRoutes.ts\r\n\r\nimport { Router } from 'express';\r\nimport * as ordersController from '../controllers/ordersController';\r\n\r\nconst router: Router = Router();\r\n\r\n// POST /api/orders/create\r\nrouter.post('/create', ordersController.createOrder);\r\n\r\n// GET /api/orders/warehouses\r\nrouter.get('/warehouses', ordersController.listWarehouses);\r\n\r\nexport default router;\r\n","// routes/yclientsRoutes.ts\r\n\r\nimport { Router } from 'express';\r\nimport * as yclientsController from '../controllers/yclientsController';\r\n\r\nconst router: Router = Router();\r\n\r\n// GET /api/yclients/goods\r\nrouter.get('/goods', yclientsController.getGoods);\r\n\r\n// GET /api/yclients/companies\r\nrouter.get('/companies', yclientsController.getCompanies);\r\n\r\nexport default router;\r\n","// src/services/UserService.ts\r\n\r\nimport axios from 'axios';\r\nimport CacheService from '../utils/redis/Cache/Cache';\r\nimport  {User, CreateCabinetResponse}  from '../telegraf/types/User';\r\nimport {PaginatedNotifications} from \"../telegraf/types/Notification\";\r\nimport { RegistrationSession } from '../telegraf/types/RegistrationSession';\r\n\r\nexport interface Product {\r\n    good_id: number;\r\n    title: string;\r\n    actual_amount: [\r\n        {\r\n            amount: number;\r\n            storage_id: number;\r\n        }\r\n    ];\r\n}\r\n\r\nexport interface ProductsPaginatedResponse {\r\n    actual_amounts: any;\r\n    currentPage: number;\r\n    totalPages: number;\r\n    products: Product[];\r\n    allProducts: Product[];\r\n}\r\n\r\nexport interface ProductPaginatedResponse {\r\n    actual_amounts: any;\r\n    product: Product;\r\n}\r\n\r\ninterface TaskPaginatedResponse {\r\n    actual_amounts: any;\r\n    currentPage: number;\r\n    totalPages: number;\r\n    tasks: any;\r\n    allTasks: any;\r\n}\r\n\r\nclass LaravelService {\r\n    private laravelApiUrl: string;\r\n\r\n    constructor() {\r\n        const apiUrl = process.env.LARAVEL_API_URL;\r\n        if (!apiUrl) {\r\n            throw new Error('LARAVEL_API_URL is not defined in environment variables.');\r\n        }\r\n        this.laravelApiUrl = apiUrl;\r\n    }\r\n\r\n    /**\r\n     * Retrieves a user by their Telegram ID.\r\n     * Utilizes CacheService.rememberCacheValue for caching.\r\n     *\r\n     * @param telegramId - The Telegram ID of the user.\r\n     * @param ex\r\n     * @returns A Promise that resolves to the User object or null if not found.\r\n     */\r\n    public async getUserByTelegramId(telegramId: number, ex: number = 3600): Promise<User | null> {\r\n        const cacheKey = `user_telegram_id_${telegramId}`;\r\n        try {\r\n            const user: User | null = await CacheService.rememberCacheValue(\r\n                cacheKey,\r\n                () => this.fetchUserFromApi(telegramId),\r\n                ex // Cache expiration set to 1 hour (3600 seconds)\r\n            );\r\n            console.log(`User fetched for Telegram ID ${telegramId}:`, user);\r\n            return user;\r\n        } catch (error) {\r\n            console.error('Error fetching user:', error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves paginated notifications for a user by their Telegram ID.\r\n     *\r\n     * @param telegramId - The Telegram ID of the user.\r\n     * @param page - The page number to retrieve.\r\n     * @param perPage - Number of notifications per page.\r\n     * @param type - Either 'search' or 'booking'.\r\n     * @param id\r\n     * @returns A Promise that resolves to PaginatedNotifications or null if not found.\r\n     */\r\n    public async getNotificationsByTelegramId(\r\n        telegramId: number,\r\n        page: number = 1,\r\n        perPage: number = 1,\r\n        type: string = 'search',\r\n        id: number = null\r\n    ): Promise<PaginatedNotifications | null> {\r\n        const cacheKey = `notifications_${type}_telegram_id_${telegramId}_page_${page}`;\r\n        try {\r\n            const notifications: PaginatedNotifications | null = await CacheService.rememberCacheValue(\r\n                cacheKey,\r\n                () => this.fetchNotificationsFromApi(telegramId, page, perPage, type, id),\r\n                60 // Cache expiration set to 2 hours (7200 seconds)\r\n            );\r\n            return notifications;\r\n        } catch (error) {\r\n            console.error('Error fetching notifications:', error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public async createNotificationByTelegramId(\r\n        telegramId: number,\r\n        settings: any,\r\n        type: string = 'notification'\r\n    ): Promise<PaginatedNotifications | null> {\r\n        try {\r\n            const response = await axios.post<PaginatedNotifications>(\r\n                `${this.laravelApiUrl}/notifications/telegram/${telegramId}`,\r\n                {\r\n                    settings:{\r\n                        ...settings,\r\n                        type\r\n                    }\r\n                }\r\n            );\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error creating notification:', error);\r\n            throw new Error('Error creating notification');\r\n        }\r\n    }\r\n\r\n    public async updateNotificationById(\r\n        notificationId: string | number,\r\n        settings: any,\r\n    ): Promise<PaginatedNotifications | null> {\r\n        try {\r\n            const response = await axios.put<PaginatedNotifications>(\r\n                `${this.laravelApiUrl}/notifications/telegram/update/${notificationId}`,\r\n                {\r\n                    settings\r\n                }\r\n            );\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error creating notification:', error);\r\n            throw new Error('Error creating notification');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a cabinet for a user identified by their Telegram ID.\r\n     * Utilizes caching to store and update the user data.\r\n     *\r\n     * @param telegramId - The Telegram ID of the user.\r\n     * @param name - The name of the cabinet to be created.\r\n     * @param phoneNumber - The phone number associated with the cabinet.\r\n     * @param userId\r\n     * @param statePath\r\n     * @returns A Promise that resolves to the updated User object or null if an error occurs.\r\n     */\r\n    public async createCabinetByTelegramId(\r\n        telegramId: number,\r\n        name: string,\r\n        phoneNumber: string,\r\n        userId: string,\r\n        statePath: string,\r\n    ): Promise<User | null> {\r\n\r\n        const cacheKey = `user_new_cabinet_${telegramId}`;\r\n\r\n        try {\r\n            // Prepare the payload for the POST request\r\n            const payload = {\r\n                name,\r\n                phone_number: phoneNumber,\r\n                user_id: userId,\r\n                state_path: statePath,\r\n            };\r\n\r\n            // Make the POST request to create a cabinet\r\n            const response = await this.createCabinet<CreateCabinetResponse>(\r\n                `/cabinets/telegram/${telegramId}`,\r\n                payload\r\n            );\r\n\r\n            // Extract the updated user from the response\r\n            const updatedUser: User = response?.user || null;\r\n\r\n            // Update the cache with the new user data\r\n            await CacheService.set(cacheKey, updatedUser, 3600); // Cache expires in 1 hour\r\n\r\n            console.log(`Cabinet \"${name}\" created for Telegram ID ${telegramId}. Updated user data cached.`);\r\n            return updatedUser;\r\n        } catch (error) {\r\n            // Handle errors (e.g., user not found, validation errors)\r\n            console.error(`Error creating cabinet for Telegram ID ${telegramId}:`, error);\r\n\r\n            // Optionally, you can handle specific error types here\r\n            // For example, if using Axios, you can check error.response.status\r\n\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public async deleteCabinetByTelegramId(\r\n        telegramId: number,\r\n        cabinetId: string) {\r\n        try {\r\n            const response = await axios.delete(\r\n                `${this.laravelApiUrl}/cabinets/telegram/${telegramId}/${cabinetId}`\r\n            );\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error deleting cabinet:', error);\r\n            throw new Error('Error deleting cabinet');\r\n        }\r\n    }\r\n\r\n    public async updateCabinetByTelegramId(\r\n        telegramId: number,\r\n        cabinetId: string,\r\n        payload: any) {\r\n        try {\r\n            const response = await axios.put(\r\n                `${this.laravelApiUrl}/cabinets/telegram/${telegramId}/${cabinetId}`, {\r\n                    name: payload.name,\r\n                    settings: payload.settings\r\n                }\r\n            );\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error updating cabinet:', error);\r\n            throw new Error('Error updating cabinet');\r\n        }\r\n    }\r\n\r\n    public async deleteNotification(\r\n        notificationId: string | number\r\n    ): Promise<void> {\r\n        try {\r\n            await axios.delete(\r\n                `${this.laravelApiUrl}/notifications/telegram/${notificationId}`\r\n            );\r\n        } catch (error) {\r\n            console.error('Error deleting notification:', error);\r\n            throw new Error('Error deleting notification');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetches the user data from the Laravel API.\r\n     *\r\n     * @param telegramId - The Telegram ID of the user.\r\n     * @returns A Promise that resolves to the User object.\r\n     */\r\n    private async fetchUserFromApi(telegramId: number): Promise<User> {\r\n        const response = await axios.get<User>(`${this.laravelApiUrl}/users/telegram/${telegramId}`);\r\n        return response.data;\r\n    }\r\n\r\n    /**\r\n     * Fetches paginated notifications from the Laravel API.\r\n     *\r\n     * @param telegramId - The Telegram ID of the user.\r\n     * @param page - The page number to retrieve.\r\n     * @param perPage - Number of notifications per page.\r\n     * @param type - Either 'search' or 'booking'.\r\n     * @param id\r\n     * @returns A Promise that resolves to PaginatedNotifications.\r\n     */\r\n    private async fetchNotificationsFromApi(\r\n        telegramId: number,\r\n        page: number,\r\n        perPage: number,\r\n        type: string,\r\n        id: string | number,\r\n    ): Promise<PaginatedNotifications> {\r\n        const response = await axios.get<PaginatedNotifications>(\r\n            `${this.laravelApiUrl}/notifications/telegram/${telegramId}`,\r\n            {\r\n                params: {\r\n                    page,\r\n                    per_page: perPage,\r\n                    type,\r\n                    id\r\n                },\r\n            }\r\n        );\r\n        return response.data;\r\n    }\r\n\r\n    /**\r\n     * Makes a POST request to create a cabinet.\r\n     *\r\n     * @param url - The API endpoint URL.\r\n     * @param data - The data to be sent in the request body.\r\n     * @returns A Promise that resolves to the response data.\r\n     * @template T - The type of the response data.\r\n     * @private\r\n     * */\r\n\r\n    private async createCabinet<T>(url: string, data: any): Promise<T> {\r\n        const response = await axios.post<T>(`${this.laravelApiUrl}${url}`, data);\r\n        return response.data;\r\n    }\r\n\r\n\r\n\r\n    async getProductsByTelegramId(telegramId: number, page: number = 1, perPage: number = 10): Promise<ProductsPaginatedResponse> {\r\n        const cacheKey = `products_telegram_id_${telegramId}`;\r\n        try {\r\n            // Fetch products from cache or API\r\n            const products: any = await CacheService.rememberCacheValue(\r\n                cacheKey,\r\n                () => this.fetchProductsFromApi(telegramId),\r\n                3600 * 24 // Cache expiration set to 24 hours (86400 seconds)\r\n            );\r\n\r\n            // Paginate products\r\n            const totalProducts = products.length;\r\n            const totalPages = Math.ceil(totalProducts / perPage);\r\n            page = Math.max(1, Math.min(totalPages, page));\r\n            const start = (page - 1) * perPage;\r\n            const currentProducts = products.slice(start, start + perPage);\r\n\r\n            // Prepare response with pagination details\r\n            return {\r\n                actual_amounts: undefined,\r\n                currentPage: page,\r\n                totalPages,\r\n                products: currentProducts,\r\n                allProducts: products\r\n            };\r\n        } catch (error) {\r\n            console.error('Error fetching products:', error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    async getTaskByTelegramId(telegramId: number, page: number = 1, perPage: number = 10): Promise<TaskPaginatedResponse> {\r\n        const cacheKey = `task_telegram_id_${telegramId}`;\r\n        try {\r\n            // Fetch products from cache or API\r\n            const tasks: any = await CacheService.rememberCacheValue(\r\n                cacheKey,\r\n                () => this.fetchTasksFromApi(telegramId),\r\n                10 // Cache expiration set to 24 hours (86400 seconds)\r\n            );\r\n\r\n            // Paginate products\r\n            const totalTasks = tasks.length;\r\n            const totalPages = Math.ceil(totalTasks / perPage);\r\n            page = Math.max(1, Math.min(totalPages, page));\r\n            const start = (page - 1) * perPage;\r\n            const currentTasks = tasks.slice(start, start + perPage);\r\n\r\n            // Prepare response with pagination details\r\n            return {\r\n                actual_amounts: undefined,\r\n                currentPage: page,\r\n                totalPages,\r\n                tasks: currentTasks,\r\n                allTasks: tasks\r\n            };\r\n        } catch (error) {\r\n            console.error('Error fetching tasks:', error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    async closeTask(taskId: number, telegramId: number): Promise<void> {\r\n        try {\r\n            const cacheKey = `task_telegram_id_${telegramId}_task_id_${taskId}`;\r\n            const cacheKey2 = `task_telegram_id_${telegramId}`;\r\n            cacheKey && await CacheService.forget(cacheKey);\r\n            cacheKey2 && await CacheService.forget(cacheKey2);\r\n\r\n\r\n            await axios.put(`${this.laravelApiUrl}/tasks/close/${taskId}`);\r\n        } catch (error) {\r\n            console.error('Error closing task:', error);\r\n            throw new Error('Error closing task');\r\n        }\r\n    }\r\n\r\n    async getTaskById(telegramId: number, task_id: number): Promise<TaskPaginatedResponse> {\r\n        const cacheKey = `task_telegram_id_${telegramId}_task_id_${task_id}`;\r\n        try {\r\n            // Fetch products from cache or API\r\n            const task: any = await CacheService.rememberCacheValue(\r\n                cacheKey,\r\n                () => this.fetchTasksFromApi(telegramId, task_id),\r\n                10 // Cache expiration set to 24 hours (86400 seconds)\r\n            );\r\n\r\n            // Prepare response with pagination details\r\n            return task;\r\n        } catch (error) {\r\n            console.error('Error fetching tasks:', error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    async getOneProductByTelegramId(telegramId: number, product_id: number): Promise<ProductPaginatedResponse> {\r\n        const cacheKey = `product_telegram_id_${telegramId}_product_id_${product_id}`;\r\n        try {\r\n            // Fetch products from cache or API\r\n            const product: any = await CacheService.rememberCacheValue(\r\n                cacheKey,\r\n                () => this.fetchProductsFromApi(telegramId, product_id),\r\n                86400 // Cache expiration set to 24 hours (86400 seconds)\r\n            );\r\n\r\n\r\n\r\n            // Prepare response with pagination details\r\n            return product;\r\n        } catch (error) {\r\n            console.error('Error fetching products:', error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    private async fetchProductsFromApi(telegramId: number, product_id: number = null): Promise<Product[]> {\r\n        try{\r\n            if (product_id === null) {\r\n                const response = await axios.get(`${this.laravelApiUrl}/yclients/goods/${telegramId}`);\r\n                return response.data;\r\n            } else {\r\n                const response = await axios.get(`${this.laravelApiUrl}/yclients/goods/${telegramId}&product_id=${product_id}`);\r\n                return response.data;\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error('Error fetching products:', error);\r\n            throw new Error('Error fetching products');\r\n        }\r\n    }\r\n\r\n    private async fetchTasksFromApi(telegramId: number, task_id: number = null): Promise<any> {\r\n        try {\r\n            if (task_id === null) {\r\n                const response = await axios.get(`${this.laravelApiUrl}/tasks?telegram_id=${telegramId}`);\r\n                return response.data;\r\n            } else {\r\n                const response = await axios.get(`${this.laravelApiUrl}/tasks?telegram_id=${telegramId}&task_id=${task_id}`);\r\n                return response.data;\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching tasks:', error);\r\n            throw new Error('Error fetching tasks');\r\n        }\r\n    }\r\n\r\n    async getUsersByTelegramId(telegramId: number, page: number = 1, perPage: number = 10): Promise<any> {\r\n        const cacheKey = `users_telegram_id_${telegramId}`;\r\n        try {\r\n            // Fetch products from cache or API\r\n            const users: any = await CacheService.rememberCacheValue(\r\n                cacheKey,\r\n                () => this.fetchUsersFromApi(telegramId),\r\n                10 // Cache expiration set to 24 hours (86400 seconds)\r\n            );\r\n\r\n            // Paginate products\r\n            const totalUsers = users.length;\r\n            const totalPages = Math.ceil(totalUsers / perPage);\r\n            page = Math.max(1, Math.min(totalPages, page));\r\n            const start = (page - 1) * perPage;\r\n            const currentUsers = users.slice(start, start + perPage);\r\n\r\n            // Prepare response with pagination details\r\n            return {\r\n                actual_amounts: undefined,\r\n                currentPage: page,\r\n                totalPages,\r\n                tasks: currentUsers,\r\n                allTasks: users\r\n            };\r\n        } catch (error) {\r\n            console.error('Error fetching tasks:', error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    async getUserById(telegramId: number, user_id: number): Promise<any> {\r\n        const cacheKey = `user_telegram_id_${telegramId}_user_id_${user_id}`;\r\n        try {\r\n            // Fetch products from cache or API\r\n            const user: any = await CacheService.rememberCacheValue(\r\n                cacheKey,\r\n                () => this.fetchUsersFromApi(telegramId, user_id),\r\n                10 // Cache expiration set to 24 hours (86400 seconds)\r\n            );\r\n\r\n            // Prepare response with pagination details\r\n            return user;\r\n        } catch (error) {\r\n            console.error('Error fetching tasks:', error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public async submitRegistration(data: RegistrationSession): Promise<any> {\r\n        try {\r\n            const formattedData = {\r\n                full_name: data.fullName,\r\n                birth_date: this.formatDate(data.birthDate),\r\n                passport_series_number: data.passport,\r\n                passport_issued_by: data.issuedBy?.toUpperCase(),\r\n                passport_issue_date: this.formatDate(data.issueDate),\r\n                passport_division_code: data.divisionCode,\r\n                registration_address: data.registrationAddress,\r\n                inn: data.inn,\r\n                account_number: data.accountNumber,\r\n                bank_name: data.bankName,\r\n                bik: data.bik,\r\n                correspondent_account: data.corrAccount,\r\n                bank_inn: data.bankInn,\r\n                bank_kpp: data.bankKpp,\r\n                phone: data.phone,\r\n                email: data.email,\r\n                has_med_book: data.hasMedBook,\r\n                med_book_expiry: data.medBookExpiry ? this.formatDate(data.medBookExpiry) : null,\r\n                has_education_cert: data.hasEducationCert,\r\n                education_cert_photo: data.educationCertPhoto,\r\n                is_self_employed: data.isSelfEmployed,\r\n                status: 'pending'\r\n            };\r\n    \r\n            const response = await axios.post(\r\n                `${this.laravelApiUrl}/employee-registrations`,\r\n                formattedData,\r\n                {\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                }\r\n            );\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error submitting registration:', error);\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n    // Добавьте также вспомогательный метод, если его еще нет\r\n    private formatDate(dateStr?: string): string | null {\r\n        if (!dateStr) return null;\r\n        const [day, month, year] = dateStr.split('.');\r\n        return `${year}-${month}-${day}`;\r\n    }\r\n\r\n    public async generateContract(data: { id: number }): Promise<Buffer> {\r\n        try {\r\n            const response = await axios.post(\r\n                `${this.laravelApiUrl}/employee-registrations/generate-contract`,\r\n                data,\r\n                {\r\n                    headers: {\r\n                        'Accept': 'application/zip',\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    responseType: 'arraybuffer'\r\n                }\r\n            );\r\n    \r\n            if (!response.data || response.data.length === 0) {\r\n                throw new Error('Empty response received');\r\n            }\r\n    \r\n            // Проверяем заголовки ответа\r\n            const contentType = response.headers['content-type'];\r\n            if (contentType?.includes('application/json')) {\r\n                // Если получили JSON с ошибкой\r\n                const errorText = new TextDecoder().decode(response.data);\r\n                const error = JSON.parse(errorText);\r\n                throw new Error(error.message || 'Contract generation failed');\r\n            }\r\n    \r\n            return Buffer.from(response.data);\r\n    \r\n        } catch (error) {\r\n            console.error('Contract generation error:', {\r\n                message: error.message,\r\n                response: error.response?.data\r\n            });\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    public async logout(telegramId: number): Promise<void> {\r\n        try {\r\n            // Очищаем токен в Redis через бэкенд\r\n            await axios.post(`${this.laravelApiUrl}/auth/logout`, {\r\n                telegram_id: telegramId\r\n            });\r\n    \r\n            // Очищаем локальный кэш\r\n            const cacheKey = `user_telegram_id_${telegramId}`;\r\n            await CacheService.forget(cacheKey);\r\n    \r\n        } catch (error) {\r\n            console.error('Logout error:', error);\r\n            // Даже если запрос завершился с ошибкой, очищаем локальный кэш\r\n            const cacheKey = `user_telegram_id_${telegramId}`;\r\n            await CacheService.forget(cacheKey);\r\n            // Не пробрасываем ошибку дальше, просто логируем\r\n        }\r\n    }\r\n\r\n    public async updateMasterDescription(\r\n        phone: string,\r\n        password: string,\r\n        description: string\r\n    ): Promise<boolean> {\r\n        try {\r\n            console.log('Starting master description update:', {\r\n                phone,\r\n                descriptionLength: description.length\r\n            });\r\n    \r\n            const response = await axios.post(`${this.laravelApiUrl}/masters/update-description`, {\r\n                phone,\r\n                password,\r\n                description\r\n            });\r\n    \r\n            console.log('Full update description response:', {\r\n                status: response.status,\r\n                success: response.data?.success,\r\n                message: response.data?.message,\r\n                debug: response.data?.debug // Для отладочной информации с бэкенда\r\n            });\r\n    \r\n            if (!response.data?.success) {\r\n                console.error('Update description failed:', {\r\n                    message: response.data?.message,\r\n                    debug: response.data?.debug,\r\n                    responseData: response.data\r\n                });\r\n                return false;\r\n            }\r\n    \r\n            return true;\r\n        } catch (error: any) {\r\n            // Расширенное логирование ошибки\r\n            console.error('Error updating master description:', {\r\n                errorMessage: error?.message,\r\n                errorResponse: {\r\n                    status: error?.response?.status,\r\n                    statusText: error?.response?.statusText,\r\n                    data: error?.response?.data,\r\n                    debug: error?.response?.data?.debug\r\n                },\r\n                requestData: {\r\n                    phone,\r\n                    descriptionLength: description.length,\r\n                    url: `${this.laravelApiUrl}/masters/update-description`\r\n                }\r\n            });\r\n            \r\n            // Специфичные ошибки\r\n            if (error?.response?.status === 401) {\r\n                throw new Error('Неверный логин или пароль');\r\n            }\r\n            \r\n            if (error?.response?.status === 404) {\r\n                throw new Error('Мастер не найден в системе');\r\n            }\r\n            \r\n            throw new Error('Не удалось обновить описание: ' + \r\n                (error?.response?.data?.message || error.message));\r\n        }\r\n    }\r\n\r\n\r\n\r\n   private async fetchUsersFromApi(telegramId: number, user_id: number = null): Promise<any> {\r\n        try {\r\n            if (user_id === null) {\r\n                const response = await axios.get(`${this.laravelApiUrl}/staff?telegram_id=${telegramId}`);\r\n                return response.data;\r\n            } else {\r\n                const response = await axios.get(`${this.laravelApiUrl}/staff?telegram_id=${telegramId}&user_id=${user_id}`);\r\n                return response.data;\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching tasks:', error);\r\n            throw new Error('Error fetching tasks');\r\n        }\r\n   }\r\n\r\n   async auth(phone: string, password: string, telegram_id: number): Promise<void> {\r\n        try {\r\n            const response = await axios.post(`${this.laravelApiUrl}/auth`, {\r\n                phone,\r\n                password,\r\n                telegram_id\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error authenticating:', error);\r\n            throw new Error('Error authenticating');\r\n        }\r\n   }\r\n\r\n// В LaravelService добавляем новый метод:\r\npublic async uploadSignedDocuments(registrationId: number, files: Array<{url: string, name: string}>): Promise<any> {\r\n    try {\r\n        const response = await axios.post(\r\n            `${this.laravelApiUrl}/employee-registrations/${registrationId}/upload-signed-documents`,\r\n            { \r\n                files,\r\n                status: 'documents_uploaded' // Обновляем статус регистрации\r\n            },\r\n            {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }\r\n        );\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error uploading signed documents:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n}\r\n\r\n\r\nexport default new LaravelService();\r\n","import OpenAI from 'openai';\r\n\r\nclass OpenAIService {\r\n    private openai: OpenAI;\r\n    private readonly prompt: string;\r\n\r\n    constructor() {\r\n        if (!process.env.OPENAI_API_KEY) {\r\n            throw new Error('OPENAI_API_KEY is not defined');\r\n        }\r\n\r\n        this.openai = new OpenAI({\r\n            apiKey: process.env.OPENAI_API_KEY\r\n        });\r\n\r\n        this.prompt = `Войди в роль нейрокопирайтера, который прекрасно составляет описание мастеров по шугарингу. Описание мастера будет использоваться на сайте студии.\r\n        ВАЖНО: Описание ОБЯЗАТЕЛЬНО должно быть не более 300 символов и представлять собой законченный текст.\r\n        Найди имя мастера в тексте и используй его в описании. Если имя не найдено, используй нейтральное обращение \"мастер\".\r\n\r\nУчитывай информацию из инструкции: имя мастера и наброски описания от самого мастера. Опиши личные качества мастера, укажи на профессиональные качества, упомяни отзывы клиентов или результат работы. Заверши текст позитивной рекомендацией или акцентом на желании вернуться к мастеру. Текст должен быть теплым, дружелюбным и лаконичным. Максимальное кол-во символов описания: 300. В своем ответе укажи только описание и ничего больше. Пиши без воды, в человеческом стиле. \r\nДанные по мастеру:\r\nИмя: Анна \r\nНаброски описания от самого мастера: большой опыт работы\r\nПримеры стиля:\r\n'Анна умеет располагать к себе даже самого капризного клиента. Она всегда найдёт подход и интересную тему для общения. А ещё она легко и очень профессионально выполняет свою работу, что подтверждают многочисленные положительные отзывы. Вы точно захотите к ней вернуться!'\r\n'Снежана очень быстро и легко выполняет депиляцию как женщинам, так и мужчинам. Если Вы - не любитель долгих разговоров и длительных процедур, то это , безусловно, ваш мастер! Быстро, качественно и комфортно без лишних слов.'\r\n'Несмотря на малый опыт, Ксения уже завоевала сердца наших клиентов и заслуженно получила много положительных отзывов. Этот мастер очень внимателен к деталям. Индивидуальный подход к каждому клиенту и качественный результат для Ксении важнее всего.'\r\n'Анастасия - очень аккуратный и внимательный мастер. Её лёгкая рука сделает услугу максимально безболезненной и быстрой. А большой багаж знаний и опыта поможет без труда подобрать домашний уходу для любого типа кожи и волос. Анастасию ценят за её профессионализм и ответственный подход к работе.'\r\nВ ответе укажи ТОЛЬКО готовое описание, уложившись в 300 символов.`;\r\n    }\r\n\r\n    async generateDescription(userInput: string): Promise<string> {\r\n        try {\r\n            const completion = await this.openai.chat.completions.create({\r\n                model: 'gpt-4o',\r\n                messages: [\r\n                    {\r\n                        role: 'system',\r\n                        content: this.prompt\r\n                    },\r\n                    {\r\n                        role: 'user',\r\n                        content: userInput\r\n                    }\r\n                ],\r\n                temperature: 0.7,\r\n                max_tokens: 500,\r\n                presence_penalty: 0.3,\r\n                frequency_penalty: 0.5\r\n            });\r\n\r\n            const generatedText = completion.choices[0]?.message?.content?.trim() || '';\r\n\r\n            // Проверяем длину текста\r\n            if (generatedText.length > 300) {\r\n                return generatedText.substring(0, 300) + '...';\r\n            }\r\n\r\n            return generatedText;\r\n        } catch (error: any) {\r\n            console.error('OpenAI API Error:', {\r\n                error: error.message,\r\n                userInput\r\n                \r\n            });\r\n\r\n            if (error.response?.status === 429) {\r\n                throw new Error('Слишком много запросов. Пожалуйста, подождите немного и попробуйте снова.');\r\n            }\r\n\r\n            throw new Error('Не удалось сгенерировать описание. Пожалуйста, попробуйте позже.');\r\n        }\r\n    }\r\n}\r\n\r\nexport const openAIService = new OpenAIService();","import path from 'path';\r\nimport fs from 'fs';\r\nimport axios, { AxiosResponse } from 'axios';\r\n\r\n// Define the interfaces (if you need type safety)\r\ninterface StorageState {\r\n    cookies: { name: string; value: string }[];\r\n    origins: {\r\n        origin: string;\r\n        localStorage: { name: string; value: string }[];\r\n    }[];\r\n}\r\n\r\ninterface DraftsApiResponse {\r\n    result: {\r\n        drafts: any[];\r\n    };\r\n}\r\n\r\ninterface RowData {\r\n    createdAt: string;\r\n    updatedAt: string;\r\n    barcodeQuantity: string;\r\n    goodQuantity: string;\r\n    author: string;\r\n    draftId: string;\r\n    url: string;\r\n}\r\n\r\ninterface CreateSupplyResult {\r\n    result?: {\r\n        ids: { Id: string }[];\r\n    };\r\n}\r\n\r\nexport const getDraftsForUser = async (userId: string): Promise<RowData[]> => {\r\n    // Path to the user's state.json\r\n    const statePath = path.join('/var/www/wb-back/storage/state', `${userId}.json`);\r\n\r\n    if (!fs.existsSync(statePath)) {\r\n        throw new Error('User state not found.');\r\n    }\r\n\r\n    const storageState: StorageState = JSON.parse(fs.readFileSync(statePath, 'utf-8'));\r\n\r\n    // Extract cookies and WBTokenV3\r\n    const { cookies, origins } = storageState;\r\n    let cookieHeader = cookies.map(cookie => `${cookie.name}=${cookie.value}`).join('; ');\r\n\r\n    const originData = origins.find(origin => origin.origin === 'https://seller.wildberries.ru');\r\n    if (!originData) {\r\n        throw new Error('Origin data not found in state.');\r\n    }\r\n\r\n    const wbTokenEntry = originData.localStorage.find(item => item.name === 'wb-eu-passport-v2.access-token');\r\n    const wbTokenValue = wbTokenEntry ? wbTokenEntry.value : null;\r\n\r\n    if (!wbTokenValue) {\r\n        throw new Error('WBTokenV3 token not found in localStorage.');\r\n    }\r\n\r\n    // Add WBTokenV3 to cookies\r\n    cookieHeader += `; WBTokenV3=${wbTokenValue}`;\r\n\r\n    // Define the API endpoint\r\n    const apiUrl = 'https://seller-supply.wildberries.ru/ns/sm-draft/supply-manager/api/v1/draft/listDrafts';\r\n\r\n    // Define the request payload\r\n    const data = {\r\n        params: {\r\n            filter: {\r\n                orderBy: {\r\n                    createdAt: -1,\r\n                },\r\n            },\r\n            limit: 10,\r\n            offset: 0,\r\n        },\r\n        jsonrpc: '2.0',\r\n        id: 'json-rpc_20',\r\n    };\r\n\r\n    // Define headers\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'Cookie': cookieHeader,\r\n        'Accept': '*/*',\r\n        'User-Agent':\r\n            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',\r\n        'Origin': 'https://seller.wildberries.ru',\r\n        'Referer': 'https://seller.wildberries.ru/',\r\n        'Accept-Language': 'ru,en-GB;q=0.9,en-US;q=0.8,en;q=0.7',\r\n        'sec-ch-ua': '\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\"',\r\n    };\r\n\r\n    // Make the API request using axios\r\n    const response: AxiosResponse<DraftsApiResponse> = await axios.post(apiUrl, data, { headers });\r\n\r\n    // Extract and process drafts data\r\n    const drafts = response.data.result.drafts;\r\n\r\n    const filteredDrafts = drafts.filter(draft => draft.barcodeQuantity > 0);\r\n    return filteredDrafts.map(draft => ({\r\n        createdAt: draft.createdAt,\r\n        updatedAt: draft.updatedAt,\r\n        barcodeQuantity: draft.barcodeQuantity.toString(),\r\n        goodQuantity: draft.goodQuantity.toString(),\r\n        author: draft.author,\r\n        draftId: draft.ID,\r\n        url: `https://seller.wildberries.ru/supplies-management/drafts/draft-detail?draftNumber=${draft.ID}`,\r\n    }));\r\n};\r\n\r\n\r\nexport const createOrderRequest = async (cabinetId:string, draftId:string, warehouseId:string, boxTypeMask:string): Promise<{\r\n    preorderID: string;\r\n    message: string\r\n}> => {\r\n    // Validate request body\r\n    if (!cabinetId || !draftId || !warehouseId || !boxTypeMask) {\r\n       throw new Error('Missing required parameters.');\r\n    }\r\n\r\n    try {\r\n        // Construct the path to the user's state.json\r\n        const statePath = path.join('/var/www/wb-back/storage/state', `${cabinetId}.json`);\r\n\r\n        // Check if the state file exists\r\n        if (!fs.existsSync(statePath)) {\r\n            throw new Error('User state not found.' );\r\n        }\r\n\r\n        // Read and parse the storage state\r\n        const storageStateRaw = fs.readFileSync(statePath, 'utf-8');\r\n        const storageState: StorageState = JSON.parse(storageStateRaw);\r\n\r\n        // Extract cookies and construct the Cookie header\r\n        const cookies = storageState.cookies;\r\n        let cookieHeader = cookies.map(cookie => `${cookie.name}=${cookie.value}`).join('; ');\r\n\r\n        // Find origin data for Wildberries seller\r\n        const originData = storageState.origins.find(origin => origin.origin === 'https://seller.wildberries.ru');\r\n        if (!originData) {\r\n            throw new Error('Origin data not found in state.' );\r\n        }\r\n\r\n        // Retrieve WBTokenV3 from localStorage\r\n        const wbTokenEntry = originData.localStorage.find(item => item.name === 'wb-eu-passport-v2.access-token');\r\n        const wbTokenValue = wbTokenEntry ? wbTokenEntry.value : null;\r\n\r\n        if (!wbTokenValue) {\r\n            throw new Error('WBTokenV3 token not found in localStorage.');\r\n        }\r\n\r\n        // Append WBTokenV3 to the Cookie header\r\n        cookieHeader += `; WBTokenV3=${wbTokenValue}`;\r\n\r\n        // Define HTTP headers for the request\r\n        const headers = {\r\n            'Content-Type': 'application/json',\r\n            'Cookie': cookieHeader,\r\n            'Accept': '*/*',\r\n            'User-Agent': 'Mozilla/5.0 (compatible)',\r\n            'Origin': 'https://seller.wildberries.ru',\r\n            'Referer': 'https://seller.wildberries.ru/',\r\n            'Accept-Language': 'ru,en-GB;q=0.9,en-US;q=0.8,en;q=0.7',\r\n        };\r\n\r\n        // **b. Create Supply**\r\n        const createSupplyUrl = 'https://seller-supply.wildberries.ru/ns/sm-supply/supply-manager/api/v1/supply/create';\r\n\r\n        //Monopallet 32\r\n        //Koroba 4\r\n        const boxTypeCorrect = boxTypeMask == \"5\" ? 32 : 4;\r\n        // Prepare the payload for creating supply\r\n        const createSupplyData = {\r\n            params: {\r\n                boxTypeMask: boxTypeCorrect,\r\n                draftID: draftId,\r\n                transitWarehouseId: null,\r\n                warehouseId: Number(warehouseId),\r\n            },\r\n            jsonrpc: \"2.0\",\r\n            id: \"json-rpc_26\"\r\n        };\r\n\r\n        // Make the POST request to create supply\r\n        const createSupplyResponse: AxiosResponse<CreateSupplyResult> = await axios.post(createSupplyUrl, createSupplyData, { headers });\r\n        const createSupplyResult = createSupplyResponse.data;\r\n\r\n        // Extract preorderID from the response\r\n        const preorderID = createSupplyResult?.result?.ids[0]?.Id;\r\n        console.log('createSupplyResult:', createSupplyResult);\r\n\r\n        // Respond with success and the preorderID\r\n        return {\r\n            message: 'Order created successfully.',\r\n            preorderID: preorderID,\r\n        };\r\n    } catch (error: any) {\r\n        console.error('Error during order creation:', error.message);\r\n        throw new Error('Internal Server Error.');\r\n    }\r\n};\r\n","import { Telegraf, session, Scenes, Markup } from 'telegraf';\r\nimport WarehouseBot from '../services/warehouseBot';\r\nimport logger from '../../utils/logger/loggerTelegram'; // Ensure correct path\r\nimport { Redis as RedisStore } from '@telegraf/session/redis';\r\nimport {MyContext, MySession} from \"../types/MyContext\";\r\n\r\n// Import mainScene from the new file\r\nimport { mainScene } from '../services/bot-master/scenes/mainScene';\r\nimport {cabinetGate} from \"../utils/cabinetGate\";\r\nimport {loginWizard} from \"../services/bot-master/scenes/loginWizard\";\r\nimport {registrationWizard} from \"../services/bot-master/scenes/registrationWizard\";\r\nimport { changeDescriptionScene } from '../services/bot-master/scenes/changeDescriptionScene';\r\n// If you have other scenes like subscriptionScene, consider importing them similarly\r\n\r\n\r\nconst botToken: string = process.env.TELEGRAM_BOT_TOKEN_MASTER!;\r\nconst botMaster: Telegraf<MyContext> = new Telegraf(botToken);\r\n\r\n\r\nconst store = RedisStore<MySession>({\r\n    url: 'redis://redis:6379/2',\r\n});\r\n\r\n// Initialize the stage with imported scenes\r\nconst stage = new Scenes.Stage<MyContext>([\r\n    mainScene,\r\n    loginWizard,\r\n    registrationWizard,\r\n    changeDescriptionScene,\r\n]);\r\n\r\n// Middleware to log incoming updates\r\nbotMaster.use(session({ store }));\r\nbotMaster.use(stage.middleware());\r\nbotMaster.use(async (ctx: MyContext, next: () => Promise<void>) => {\r\n    logger.info('Received update', { update: ctx.update });\r\n    await next();\r\n});\r\n\r\n// Handle /start command\r\nbotMaster.start(async (ctx: MyContext) => {\r\n    const startPayload = ctx.payload;\r\n\r\n    if (startPayload) {\r\n        if(startPayload === 'registration') {\r\n            await ctx.scene.enter('registration_wizard');\r\n            return;\r\n        }\r\n        await cabinetGate(ctx, 'main');\r\n        return;\r\n    } else {\r\n        await cabinetGate(ctx, 'main');\r\n        return;\r\n    }\r\n\r\n});\r\n\r\n// Handle 'mainmenu' action\r\nbotMaster.action('mainmenu', async (ctx: MyContext) => {\r\n    //if user authenticated then show main menu else show login menu\r\n    await cabinetGate(ctx, 'main');\r\n\r\n    await ctx.answerCbQuery('🏦Главная');\r\n});\r\n\r\n// Handle /ping command\r\nbotMaster.command('ping', (ctx: MyContext) => {\r\n    ctx.reply('pong!');\r\n});\r\n\r\n\r\nbotMaster.on('callback_query', async (ctx: MyContext) => {\r\n    await ctx.answerCbQuery('👌');\r\n});\r\n\r\n\r\n\r\n// Export the bot instance\r\nexport default botMaster;\r\n","import { Telegraf, session, Scenes, Markup } from 'telegraf';\r\nimport WarehouseBot from '../services/warehouseBot';\r\nimport logger from '../../utils/logger/loggerTelegram'; // Ensure correct path\r\nimport { Redis as RedisStore } from '@telegraf/session/redis';\r\nimport {MyContext, MySession} from \"../types/MyContext\";\r\n\r\n// Import mainScene from the new file\r\nimport { mainScene } from '../services/scenes/mainScene';\r\nimport { tasksScene } from '../services/scenes/tasks/tasksScene';\r\nimport {cabinetGate} from \"../utils/cabinetGate\";\r\nimport {salaryScene} from \"../services/scenes/salary/salaryScene\";\r\nimport {notifictationsScene} from \"../services/scenes/notifications/notificationsScene\";\r\nimport {employmentScene} from \"../services/scenes/employment/employmentScene\";\r\nimport {warehouseScene} from \"../services/scenes/warehouse/warehouseScene\";\r\nimport {staffScene} from \"../services/scenes/staff/staffScene\";\r\nimport { createNotifictationScene as notificationsCreateNotificationScene } from \"../services/scenes/notifications/createNotificationScene\";\r\nimport { notificationsListScene } from \"../services/scenes/notifications/notificationsListScene\";\r\nimport { editNotificationScene as notificationsEditNotificationScene } from \"../services/scenes/notifications/editNotificationScene\";\r\n\r\nimport { createNotifictationScene as warehouseCreateNotificationScene } from \"../services/scenes/warehouse/createNotificationScene\";\r\nimport { editNotificationScene as warehouseEditNotificationScene } from \"../services/scenes/warehouse/editNotificationScene\";\r\n\r\n\r\n// If you have other scenes like subscriptionScene, consider importing them similarly\r\n\r\n\r\nconst botToken: string = process.env.TELEGRAM_BOT_TOKEN_SUPPLIES_NEW!;\r\nconst bot: Telegraf<MyContext> = new Telegraf(botToken);\r\nconst warehouseBot = new WarehouseBot(bot);\r\n\r\n\r\nconst store = RedisStore<MySession>({\r\n    url: 'redis://redis:6379/2',\r\n});\r\n\r\n// Initialize the stage with imported scenes\r\nconst stage = new Scenes.Stage<MyContext>([\r\n    mainScene,\r\n    tasksScene,\r\n    salaryScene,\r\n    notifictationsScene,\r\n    notificationsCreateNotificationScene,\r\n    notificationsListScene,\r\n    employmentScene,\r\n    warehouseScene,\r\n    staffScene,\r\n    notificationsEditNotificationScene,\r\n    warehouseScene,\r\n    warehouseCreateNotificationScene,\r\n    warehouseEditNotificationScene\r\n]);\r\n\r\n// Middleware to log incoming updates\r\nbot.use(session({ store }));\r\nbot.use(stage.middleware());\r\nbot.use(async (ctx: MyContext, next: () => Promise<void>) => {\r\n    logger.info('Received update', { update: ctx.update });\r\n    await next();\r\n});\r\n\r\n// Handle /start command\r\nbot.start(async (ctx: MyContext) => {\r\n    const startPayload = ctx.payload;\r\n    await ctx.scene.enter('main');\r\n});\r\n\r\n// Handle 'mainmenu' action\r\nbot.action('mainmenu', async (ctx: MyContext) => {\r\n    await ctx.scene.enter('main');\r\n    await ctx.answerCbQuery('🏦Главная');\r\n});\r\n\r\n// Handle /ping command\r\nbot.command('ping', (ctx: MyContext) => {\r\n    ctx.reply('pong!');\r\n});\r\n\r\nbot.command('autobooking', async (ctx: MyContext) => {\r\n    await cabinetGate(ctx, 'autoBookingWizard');\r\n});\r\n\r\nmainScene.action('payments', async (ctx: MyContext) => {\r\n    await ctx.scene.enter('subscriptionWizard');\r\n});\r\n\r\nbot.action('create_notification', async (ctx) => {\r\n    await ctx.scene.enter('create_notification');\r\n});\r\n\r\nbot.action('active_notifications', async (ctx) => {\r\n    await ctx.scene.enter('active_notifications');\r\n});\r\n\r\nbot.action('warehouse_notification', async (ctx) => {\r\n    await ctx.scene.enter('warehouse_create_notification');\r\n});\r\n\r\nbot.action('warehouse_list', async (ctx) => {\r\n    await ctx.scene.enter('warehouse_edit_notification');\r\n});\r\n\r\nbot.on('callback_query', async (ctx: MyContext) => {\r\n    await ctx.answerCbQuery('👌');\r\n});\r\n\r\n\r\n\r\n\r\n\r\nexport const sendMessageToClient = async (chatId: string, message: string, isButtonAvailable = true) => {\r\n\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n    ]);\r\n\r\n    try {\r\n        const response = await bot.telegram.sendMessage(chatId, message, isButtonAvailable ? keyboard : null);\r\n\r\n        console.log('Message sent to Telegram successfully!', response);\r\n        return true;\r\n    } catch (error: any) {\r\n        console.error('Exception occurred while sending message:', error.message);\r\n        return false;\r\n    }\r\n\r\n\r\n\r\n};\r\n// Export the bot instance\r\nexport default bot;\r\n","import { Scenes, Markup } from 'telegraf';\r\nimport { MyContext } from '../../../types/MyContext';\r\nimport laravelService from '../../../../services/laravelService';\r\nimport { openAIService } from '../../../../services/openaiService';\r\n\r\n\r\nexport const changeDescriptionScene = new Scenes.WizardScene<MyContext>(\r\n    'change_description_scene',\r\n    // Шаг 1: Запрос описания\r\n    async (ctx) => {\r\n        ctx.session.descriptionForm = {};\r\n        ctx.session.isEditing = false;\r\n\r\n        console.log('Session state at description start:', {\r\n            sessionPhone: ctx.session?.phone,\r\n            sessionPassword: ctx.session?.password ? '[PRESENT]' : '[MISSING]',\r\n            sessionUser: ctx.session?.user ? '[PRESENT]' : '[MISSING]'\r\n        });\r\n        \r\n        await ctx.reply(\r\n            'Давайте подготовим ваше описание! Напишите пожалуйста своё имя и пару слов про себя, а искусственный интеллект сделает магию!',\r\n            Markup.inlineKeyboard([[Markup.button.callback('❌ Отменить', 'cancel')]])\r\n        );\r\n        \r\n        return ctx.wizard.next();\r\n    },\r\n\r\n    // Шаг 2: Генерация и предварительный просмотр\r\n    async (ctx) => {\r\n        if (!ctx.message || !('text' in ctx.message)) {\r\n            await ctx.reply('Пожалуйста, отправьте текстовое сообщение.');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const userInput = ctx.message.text;\r\n            const processingMessage = await ctx.reply('⏳ Генерируем описание...');\r\n\r\n            if (!ctx.session.descriptionForm) {\r\n                ctx.session.descriptionForm = {};\r\n            }\r\n            ctx.session.descriptionForm.tempDescription = userInput;\r\n\r\n            const newDescription = await openAIService.generateDescription(\r\n                \r\n                userInput\r\n            );\r\n\r\n            ctx.session.descriptionForm.generatedDescription = newDescription;\r\n            await ctx.telegram.deleteMessage(ctx.chat!.id, processingMessage.message_id).catch(() => {});\r\n\r\n            await ctx.reply(\r\n                '✨ Вот ваше новое описание:\\n\\n' + \r\n                newDescription + '\\n\\n' +\r\n                'Что бы вы хотели сделать с этим описанием?',\r\n                Markup.inlineKeyboard([\r\n                    [Markup.button.callback('✅ Подтвердить и опубликовать', 'confirm_description')],\r\n                    [Markup.button.callback('✏️ Отредактировать', 'edit_description')],\r\n                    [Markup.button.callback('🔄 Сгенерировать заново', 'regenerate')],\r\n                    [Markup.button.callback('❌ Отменить', 'cancel')]\r\n                ])\r\n            );\r\n            \r\n            return ctx.wizard.next();\r\n        } catch (error: any) {\r\n            console.error('Error in description generation:', {\r\n                error: error.message,\r\n                sessionState: {\r\n                    phone: ctx.session?.phone,\r\n                    hasPassword: !!ctx.session?.password\r\n                }\r\n            });\r\n\r\n            await ctx.reply(\r\n                'Произошла ошибка при генерации описания. Пожалуйста, попробуйте позже.',\r\n                Markup.inlineKeyboard([\r\n                    [Markup.button.callback('🔄 Попробовать снова', 'retry_description')],\r\n                    [Markup.button.callback('👈 Вернуться в меню', 'back_to_menu')]\r\n                ])\r\n            );\r\n        }\r\n    },\r\n\r\n    // Шаг 3: Обработка редактирования\r\n    async (ctx) => {\r\n        console.log('Step 3: Processing message, isEditing:', ctx.session.isEditing);\r\n        \r\n        // Если это не режим редактирования, игнорируем сообщение\r\n        if (!ctx.session.isEditing) {\r\n            console.log('Step 3: Not in editing mode, skipping');\r\n            return;\r\n        }\r\n\r\n        if (!ctx.message || !('text' in ctx.message)) {\r\n            console.log('Step 3: No text in message');\r\n            await ctx.reply('Пожалуйста, отправьте текстовое сообщение.');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            console.log('Step 3: Processing edited description');\r\n            const editedDescription = ctx.message.text;\r\n            \r\n            if (editedDescription.length > 300) {\r\n                console.log('Step 3: Description too long');\r\n                await ctx.reply(\r\n                    '❌ Описание не должно превышать 300 символов. Сейчас длина: ' + editedDescription.length + ' символов.\\n' +\r\n                    'Пожалуйста, сократите текст и отправьте снова.',\r\n                    Markup.inlineKeyboard([[Markup.button.callback('❌ Отменить', 'cancel')]])\r\n                );\r\n                return;\r\n            }\r\n            \r\n            if (!ctx.session.descriptionForm) {\r\n                ctx.session.descriptionForm = {};\r\n            }\r\n            ctx.session.descriptionForm.generatedDescription = editedDescription;\r\n            ctx.session.isEditing = false;\r\n            await ctx.reply(\r\n                '📝 Проверьте отредактированное описание:\\n\\n' +\r\n                editedDescription + '\\n\\n' +\r\n                'Что бы вы хотели сделать с этим описанием?',\r\n                Markup.inlineKeyboard([\r\n                    [Markup.button.callback('✅ Подтвердить и опубликовать', 'confirm_description')],\r\n                    [Markup.button.callback('✏️ Отредактировать ещё раз', 'edit_description')],\r\n                    [Markup.button.callback('🔄 Сгенерировать заново', 'regenerate')],\r\n                    [Markup.button.callback('❌ Отменить', 'cancel')]\r\n                ])\r\n            );\r\n\r\n            \r\n            console.log('Step 3: Description updated successfully');\r\n        } catch (error) {\r\n            console.error('Step 3: Error processing description:', error);\r\n            await ctx.reply(\r\n                '❌ Произошла ошибка при обработке описания.',\r\n                Markup.inlineKeyboard([[\r\n                    Markup.button.callback('🔄 Попробовать снова', 'edit_description')\r\n                ]])\r\n            );\r\n        }\r\n    }\r\n);\r\n\r\n// Обработчики действий\r\nchangeDescriptionScene.action('confirm_description', async (ctx) => {\r\n    await ctx.answerCbQuery();\r\n    const description = ctx.session.descriptionForm?.generatedDescription;\r\n\r\n    if (!description) {\r\n        await ctx.reply('Ошибка: описание не найдено. Попробуйте начать заново.');\r\n        return ctx.scene.reenter();\r\n    }\r\n\r\n    const processingMessage = await ctx.reply('⏳ Обновляем ваш профиль...');\r\n\r\n    try {\r\n        const updated = await laravelService.updateMasterDescription(\r\n            ctx.session.phone!,\r\n            ctx.session.password!,\r\n            description\r\n        );\r\n\r\n        if (!updated) {\r\n            throw new Error('Не удалось обновить описание');\r\n        }\r\n\r\n        await ctx.telegram.deleteMessage(ctx.chat!.id, processingMessage.message_id).catch(() => {});\r\n        await ctx.reply(\r\n            '✅ Описание успешно обновлено!\\n\\n' +\r\n            '💫 Новое описание уже доступно в вашем профиле.',\r\n            Markup.inlineKeyboard([[Markup.button.callback('🏠 В главное меню', 'back_to_menu')]])\r\n        );\r\n\r\n        return ctx.scene.enter('main');\r\n    } catch (error) {\r\n        await ctx.telegram.deleteMessage(ctx.chat!.id, processingMessage.message_id).catch(() => {});\r\n        await ctx.reply(\r\n            '❌ Произошла ошибка при обновлении профиля.',\r\n            Markup.inlineKeyboard([\r\n                [Markup.button.callback('🔄 Попробовать снова', 'retry_description')],\r\n                [Markup.button.callback('👈 В меню', 'back_to_menu')]\r\n            ])\r\n        );\r\n    }\r\n});\r\n\r\nchangeDescriptionScene.action('edit_description', async (ctx) => {\r\n    console.log('Edit action triggered');\r\n    await ctx.answerCbQuery();\r\n    \r\n    // Устанавливаем флаг редактирования\r\n    ctx.session.isEditing = true;\r\n    console.log('Set editing mode, isEditing:', ctx.session.isEditing);\r\n    \r\n    await ctx.reply(\r\n        '✏️ Отправьте отредактированный вариант описания:\\n\\n' +\r\n        ctx.session.descriptionForm?.generatedDescription,\r\n        Markup.inlineKeyboard([[Markup.button.callback('❌ Отменить', 'cancel')]])\r\n    );\r\n});\r\n\r\n// Обработчик для \"Сгенерировать заново\"\r\nchangeDescriptionScene.action('regenerate', async (ctx) => {\r\n    await ctx.answerCbQuery();\r\n    \r\n    if (!ctx.session.descriptionForm?.tempDescription) {\r\n        await ctx.reply(\r\n            '❌ Не удалось найти исходный текст. Начнем заново.',\r\n            Markup.inlineKeyboard([[\r\n                Markup.button.callback('🔄 Начать заново', 'retry_description')\r\n            ]])\r\n        );\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const processingMessage = await ctx.reply('🤖 Генерируем новое описание...');\r\n        \r\n        const newDescription = await openAIService.generateDescription(\r\n            ctx.session.descriptionForm.tempDescription\r\n        );\r\n\r\n        ctx.session.descriptionForm.generatedDescription = newDescription;\r\n        await ctx.telegram.deleteMessage(ctx.chat!.id, processingMessage.message_id).catch(() => {});\r\n\r\n        await ctx.reply(\r\n            '✨ Вот новый вариант описания:\\n\\n' + \r\n            newDescription + '\\n\\n' +\r\n            'Что бы вы хотели сделать с этим описанием?',\r\n            Markup.inlineKeyboard([\r\n                [Markup.button.callback('✅ Подтвердить и опубликовать', 'confirm_description')],\r\n                [Markup.button.callback('✏️ Отредактировать', 'edit_description')],\r\n                [Markup.button.callback('🔄 Сгенерировать заново', 'regenerate')],\r\n                [Markup.button.callback('❌ Отменить', 'cancel')]\r\n            ])\r\n        );\r\n    } catch (error) {\r\n        console.error('Error regenerating description:', error);\r\n        await ctx.reply(\r\n            '❌ Произошла ошибка при генерации нового описания.',\r\n            Markup.inlineKeyboard([\r\n                [Markup.button.callback('🔄 Попробовать снова', 'regenerate')],\r\n                [Markup.button.callback('👈 Вернуться в меню', 'back_to_menu')]\r\n            ])\r\n        );\r\n    }\r\n});\r\n\r\nchangeDescriptionScene.action('retry_description', async (ctx) => {\r\n    await ctx.answerCbQuery();\r\n    return ctx.scene.reenter();\r\n});\r\n\r\nchangeDescriptionScene.action('cancel', async (ctx) => {\r\n    await ctx.answerCbQuery();\r\n    await ctx.reply('Операция отменена');\r\n    return ctx.scene.enter('main');\r\n});\r\n\r\nchangeDescriptionScene.action('back_to_menu', async (ctx) => {\r\n    await ctx.answerCbQuery();\r\n    return ctx.scene.enter('main');\r\n});","import { Scenes, Markup, Composer } from 'telegraf';\r\nimport { MyContext } from '../../../types/MyContext';\r\nimport laravelService from \"../../../../services/laravelService\";\r\n\r\n// Утилиты для работы с телефоном\r\nconst formatPhone = (phone: string): string => {\r\n    let cleaned = phone.replace(/\\D/g, '');\r\n    if (cleaned.startsWith('8')) {\r\n        cleaned = '7' + cleaned.slice(1);\r\n    }\r\n    if (!cleaned.startsWith('7')) {\r\n        cleaned = '7' + cleaned;\r\n    }\r\n    return cleaned;\r\n};\r\n\r\nconst isValidPhone = (phone: string): boolean => {\r\n    const cleaned = phone.replace(/\\D/g, '');\r\n    return /^[78]\\d{10}$/.test(cleaned);\r\n};\r\n\r\n// Шаг 1: Начальное меню\r\nconst showMainMenu = async (ctx: MyContext) => {\r\n    const messageText = `Добро пожаловать в CherryTown! Выберите действие:`;\r\n\r\n    const mainMenuKeyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('Трудоустройство', 'registration')],\r\n        [Markup.button.callback('Авторизация', 'authorization')],\r\n    ]);\r\n\r\n    if (ctx.callbackQuery?.message) {\r\n        try {\r\n            await ctx.editMessageText(messageText, mainMenuKeyboard);\r\n        } catch (error) {\r\n            await ctx.reply(messageText, mainMenuKeyboard);\r\n        }\r\n    } else {\r\n        await ctx.reply(messageText, mainMenuKeyboard);\r\n    }\r\n\r\n    return ctx.wizard.next();\r\n};\r\n\r\n// Шаг 2: Обработка регистрации\r\nconst handleRegistration = new Composer<MyContext>();\r\nhandleRegistration.action('registration', async (ctx) => {\r\n    await ctx.answerCbQuery();\r\n    await ctx.scene.enter('registration_wizard');\r\n    return;\r\n});\r\n\r\n// Шаг 3: Обработка авторизации и ввода телефона\r\nconst handleAuthorization = new Composer<MyContext>();\r\nhandleAuthorization.action('authorization', async (ctx) => {\r\n    await ctx.answerCbQuery();\r\n    const message = `Введите ваш номер телефона в формате:\\n+7XXXXXXXXXX`;\r\n\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('👈 Назад', 'back_to_menu')],\r\n    ]);\r\n\r\n    await ctx.editMessageText(message, keyboard);\r\n    return ctx.wizard.next();\r\n});\r\n\r\n// Обработка ввода телефона\r\nconst handlePhoneInput = new Composer<MyContext>();\r\nhandlePhoneInput.action('back_to_menu', async (ctx) => {\r\n    await ctx.answerCbQuery();\r\n    return ctx.scene.reenter();\r\n});\r\n\r\nhandlePhoneInput.on('text', async (ctx) => {\r\n    const phone = formatPhone(ctx.message.text);\r\n\r\n    if (!isValidPhone(phone)) {\r\n        await ctx.reply(\r\n            'Неверный формат номера. Пожалуйста, введите номер в формате:\\n+7XXXXXXXXXX',\r\n            Markup.inlineKeyboard([\r\n                [Markup.button.callback('👈 Назад', 'back_to_menu')]\r\n            ])\r\n        );\r\n        return;\r\n    }\r\n\r\n    ctx.scene.session.phone = phone;\r\n\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('👈 Назад', 'back_to_phone')]\r\n    ]);\r\n\r\n    await ctx.reply('Введите пароль от личного кабинета YClients:', keyboard);\r\n    return ctx.wizard.next();\r\n});\r\n\r\n// Обработка ввода пароля\r\nconst handlePasswordInput = new Composer<MyContext>();\r\n\r\nhandlePasswordInput.action('back_to_phone', async (ctx) => {\r\n    await ctx.answerCbQuery();\r\n    const message = `Введите ваш номер телефона в формате:\\n+7XXXXXXXXXX`;\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('👈 Назад', 'back_to_menu')],\r\n    ]);\r\n    await ctx.editMessageText(message, keyboard);\r\n    return ctx.wizard.back();\r\n});\r\n\r\nhandlePasswordInput.action('back_to_menu', async (ctx) => {\r\n    await ctx.answerCbQuery();\r\n    // Очищаем данные сессии\r\n    if (ctx.session) {\r\n        ctx.session = {};\r\n    }\r\n    return ctx.scene.enter('login_wizard'); // Возвращаемся в начало сцены\r\n});\r\n\r\n// Утилита для задержки\r\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nhandlePasswordInput.on('text', async (ctx) => {\r\n    const password = ctx.message.text;\r\n    const phone = ctx.scene.session.phone;\r\n\r\n    try {\r\n        await ctx.reply('⏳ Проверяем данные...');\r\n        const response = await laravelService.auth(phone, password, ctx.from.id);\r\n        \r\n        if (response?.success) {\r\n            // Сохраняем данные авторизации в сессию\r\n            ctx.session.phone = phone;\r\n            ctx.session.password = password;\r\n            \r\n            // Также можно сохранить токен, если он нужен\r\n            if (response.token) {\r\n                ctx.session.apiToken = response.token;\r\n            }\r\n\r\n            // Сохраняем данные пользователя\r\n            if (response.user) {\r\n                ctx.session.user = response.user;\r\n            }\r\n\r\n            try {\r\n                const messagesToDelete = ctx.message.message_id;\r\n                for (let i = 0; i < 3; i++) {\r\n                    try {\r\n                        await ctx.deleteMessage(messagesToDelete - i);\r\n                    } catch (e) {\r\n                        // Игнорируем ошибки удаления\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                console.log('Could not delete messages:', e);\r\n            }\r\n\r\n            // Очищаем временные данные из сцены\r\n            delete ctx.scene.session.phone;\r\n            delete ctx.scene.session.password;\r\n\r\n            const successMsg = await ctx.reply('🔄 Авторизация...');\r\n            await delay(700);\r\n            await ctx.telegram.editMessageText(\r\n                ctx.chat.id,\r\n                successMsg.message_id,\r\n                undefined,\r\n                '✨ Проверяем данные...'\r\n            );\r\n            await delay(700);\r\n            await ctx.telegram.editMessageText(\r\n                ctx.chat.id,\r\n                successMsg.message_id,\r\n                undefined,\r\n                '🎉 Успешно! Добро пожаловать в личный кабинет.'\r\n            );\r\n            \r\n            // Проверяем сохранение данных\r\n            console.log('Session after auth:', {\r\n                phone: ctx.session.phone,\r\n                hasPassword: !!ctx.session.password,\r\n                hasUser: !!ctx.session.user\r\n            });\r\n\r\n            await delay(1000);\r\n            return ctx.scene.enter('main');\r\n        }\r\n\r\n        const errorMsg = response?.message || 'Ошибка авторизации';\r\n        const errorMessage = await ctx.reply('❌ ' + errorMsg);\r\n        await delay(500);\r\n\r\n        const errorKeyboard = Markup.inlineKeyboard([\r\n            [Markup.button.callback('🔄 Попробовать снова', 'retry_auth')],\r\n            [Markup.button.callback('👈 Вернуться в меню', 'back_to_menu')]\r\n        ]);\r\n\r\n        await ctx.telegram.editMessageText(\r\n            ctx.chat.id,\r\n            errorMessage.message_id,\r\n            undefined,\r\n            '❌ ' + errorMsg,\r\n            { reply_markup: errorKeyboard.reply_markup }\r\n        );\r\n\r\n    } catch (error) {\r\n        console.error('Ошибка авторизации:', error);\r\n        \r\n        let errorMessage = 'Ошибка авторизации. ';\r\n        if (error.response?.data?.message) {\r\n            errorMessage += error.response.data.message;\r\n        } else {\r\n            errorMessage += 'Проверьте введенные данные и попробуйте снова.';\r\n        }\r\n\r\n        const errorMsg = await ctx.reply('⚠️ Обработка...');\r\n        await delay(500);\r\n\r\n        const errorKeyboard = Markup.inlineKeyboard([\r\n            [Markup.button.callback('🔄 Попробовать снова', 'retry_auth')],\r\n            [Markup.button.callback('👈 Вернуться в меню', 'back_to_menu')]\r\n        ]);\r\n\r\n        await ctx.telegram.editMessageText(\r\n            ctx.chat.id,\r\n            errorMsg.message_id,\r\n            undefined,\r\n            '❌ ' + errorMessage,\r\n            { reply_markup: errorKeyboard.reply_markup }\r\n        );\r\n    }\r\n});\r\n\r\n// Обработчики кнопок\r\nhandlePasswordInput.action('retry_auth', async (ctx) => {\r\n    await ctx.answerCbQuery();\r\n    const message = 'Введите ваш номер телефона в формате:\\n+7XXXXXXXXXX';\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('👈 Назад', 'back_to_menu')]\r\n    ]);\r\n    await ctx.editMessageText(message, keyboard);\r\n    return ctx.wizard.selectStep(2); // Возврат к вводу телефона\r\n});\r\n\r\nhandlePasswordInput.action('back_to_menu', async (ctx) => {\r\n    await ctx.answerCbQuery();\r\n    if (ctx.scene.session) {\r\n        ctx.scene.session = {};\r\n    }\r\n    return ctx.scene.enter('login_wizard');\r\n});\r\n\r\n// Финальный шаг после успешной авторизации\r\nconst handlePostLogin = new Composer<MyContext>();\r\nhandlePostLogin.action('goto_master_menu', async (ctx) => {\r\n    await ctx.answerCbQuery();\r\n    return ctx.scene.enter('master_menu_scene');\r\n});\r\n\r\nhandlePostLogin.action('retry_auth', async (ctx) => {\r\n    await ctx.answerCbQuery();\r\n    return ctx.scene.reenter();\r\n});\r\n\r\nhandlePostLogin.action('back_to_menu', async (ctx) => {\r\n    await ctx.answerCbQuery();\r\n    return ctx.scene.reenter();\r\n});\r\n\r\n// Объединяем обработчики действий\r\nconst handleAction = new Composer<MyContext>();\r\nhandleAction.use(handleRegistration);\r\nhandleAction.use(handleAuthorization);\r\n\r\n// Создаем сцену wizard\r\nexport const loginWizard = new Scenes.WizardScene<MyContext>(\r\n    'login_wizard',\r\n    showMainMenu,\r\n    handleAction,\r\n    handlePhoneInput,\r\n    handlePasswordInput,\r\n    handlePostLogin\r\n);\r\n\r\n// Добавляем middleware для обработки ошибок\r\nloginWizard.use(async (ctx, next) => {\r\n    try {\r\n        await next();\r\n    } catch (error) {\r\n        console.error('Ошибка в login wizard:', error);\r\n        await ctx.reply(\r\n            'Произошла ошибка. Пожалуйста, попробуйте позже или обратитесь к администратору.',\r\n            Markup.inlineKeyboard([\r\n                [Markup.button.callback('👈 Вернуться в меню', 'back_to_menu')]\r\n            ])\r\n        );\r\n    }\r\n});","import { Scenes, Markup } from 'telegraf';\r\nimport { MyContext } from '../../../types/MyContext';\r\nimport { cabinetGate } from \"../../../utils/cabinetGate\";\r\nimport laravelService from \"../../../../services/laravelService\";\r\nimport { changeDescriptionScene } from './changeDescriptionScene';\r\n\r\nexport const mainScene = new Scenes.BaseScene<MyContext>('main');\r\n\r\nmainScene.enter(async (ctx: MyContext) => {\r\n    const messageText = `[главный экран для мастеров]`;\r\n\r\n    const mainMenuKeyboard = Markup.inlineKeyboard([\r\n        [\r\n            Markup.button.callback('обучение', 'education'),\r\n        ],\r\n        [\r\n            Markup.button.callback('мои документы', 'documents'),\r\n            Markup.button.callback('работа с клиентами', 'clients_management'),\r\n        ],\r\n        [\r\n            Markup.button.callback('изменить описание', 'change_description'),\r\n        ],\r\n        [\r\n            Markup.button.callback('изменить фотографию', 'change_photo'),\r\n            Markup.button.callback('изменить график работы', 'change_schedule'),\r\n        ],\r\n        [\r\n            Markup.button.callback('🚪 Выйти из аккаунта', 'logout')  // Добавляем кнопку выхода\r\n        ]\r\n    ]);\r\n\r\n    if (ctx.callbackQuery?.message) {\r\n        try {\r\n            await ctx.editMessageText(messageText, mainMenuKeyboard);\r\n        }\r\n        catch (error) {\r\n            await ctx.reply(messageText, mainMenuKeyboard);\r\n        }\r\n    } else {\r\n        await ctx.reply(messageText, mainMenuKeyboard);\r\n    }\r\n});\r\n\r\n// Обработчик выхода\r\nmainScene.action('logout', async (ctx: MyContext) => {\r\n    try {\r\n        await ctx.answerCbQuery('Выходим из аккаунта...');\r\n        \r\n        // Сначала спрашиваем подтверждение\r\n        const confirmKeyboard = Markup.inlineKeyboard([\r\n            [\r\n                Markup.button.callback('✅ Да, выйти', 'confirm_logout'),\r\n                Markup.button.callback('❌ Отмена', 'cancel_logout')\r\n            ]\r\n        ]);\r\n\r\n        await ctx.editMessageText(\r\n            'Вы уверены, что хотите выйти из аккаунта?',\r\n            confirmKeyboard\r\n        );\r\n    } catch (error) {\r\n        console.error('Ошибка при выходе:', error);\r\n        await ctx.reply('Произошла ошибка. Попробуйте позже.');\r\n    }\r\n});\r\n\r\n// Подтверждение выхода\r\nmainScene.action('confirm_logout', async (ctx: MyContext) => {\r\n    try {\r\n        await ctx.answerCbQuery();\r\n        \r\n        // Очищаем данные на бэкенде\r\n        const telegramId = ctx.from?.id;\r\n        if (telegramId) {\r\n            try {\r\n                await laravelService.logout(telegramId);\r\n            } catch (error) {\r\n                // Логируем ошибку, но продолжаем процесс выхода\r\n                console.error('Ошибка при очистке данных на бэкенде:', error);\r\n            }\r\n        }\r\n\r\n        // Показываем сообщение об успешном выходе в любом случае\r\n        await ctx.editMessageText(\r\n            'Вы успешно вышли из аккаунта.',\r\n            Markup.inlineKeyboard([\r\n                [Markup.button.callback('Войти снова', 'start_login')]\r\n            ])\r\n        );\r\n\r\n        // Переходим на сцену логина\r\n        \r\n        return ctx.scene.enter('login_wizard');\r\n\r\n    } catch (error) {\r\n        console.error('Ошибка при выходе:', error);\r\n        await ctx.reply('Произошла ошибка. Попробуйте еще раз через несколько секунд.');\r\n        \r\n        // В случае ошибки всё равно пытаемся вернуться к логину\r\n        return ctx.scene.enter('login_wizard');\r\n    }\r\n});\r\n\r\n// Отмена выхода\r\nmainScene.action('cancel_logout', async (ctx: MyContext) => {\r\n    try {\r\n        await ctx.answerCbQuery('Отменено');\r\n        return ctx.scene.reenter(); // Возвращаемся в главное меню\r\n    } catch (error) {\r\n        console.error('Ошибка при отмене выхода:', error);\r\n        await ctx.reply('Произошла ошибка. Попробуйте позже.');\r\n    }\r\n});\r\n\r\nmainScene.action('mainmenu', async (ctx) => {\r\n    await ctx.answerCbQuery();\r\n    const messageText = `[главный экран для мастеров]`;\r\n\r\n    const mainMenuKeyboard = Markup.inlineKeyboard([\r\n        [\r\n            Markup.button.callback('обучение', 'education'),\r\n        ],\r\n        [\r\n            Markup.button.callback('мои документы', 'documents'),\r\n            Markup.button.callback('работа с клиентами', 'clients_management'),\r\n        ],\r\n        [\r\n            Markup.button.callback('изменить описание', 'change_description'),\r\n        ],\r\n        [\r\n            Markup.button.callback('изменить фотографию', 'change_photo'),\r\n            Markup.button.callback('изменить график работы', 'change_schedule'),\r\n        ],\r\n        [\r\n            Markup.button.callback('🚪 Выйти из аккаунта', 'logout')  // Добавляем кнопку выхода\r\n        ]\r\n    ]);\r\n\r\n    await ctx.editMessageText(messageText, mainMenuKeyboard);\r\n});\r\n\r\n// Остальные обработчики остаются без изменений\r\nmainScene.action('education', async (ctx) => {\r\n    const message = `[модуль обучения]\\n\\nссылка на обучение`;\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.url('перейти к обучению', 'https://t.me/dmitrynovikov21')],\r\n        [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n    ]);\r\n    await ctx.editMessageText(message, keyboard);\r\n});\r\n\r\nmainScene.action('documents', async (ctx) => {\r\n    const message = `[Мои документы]\\n\\nВ кнопках выводим три документа из карточки мастера`;\r\n    const documentsKeyboard = Markup.inlineKeyboard([\r\n        [\r\n            Markup.button.callback('документ 1', 'document_1'),\r\n            Markup.button.callback('документ 2', 'document_2'),\r\n        ],\r\n        [\r\n            Markup.button.callback('документ 3', 'document_3'),\r\n        ],\r\n        [\r\n            Markup.button.callback('👌 Главное меню', 'mainmenu'),\r\n        ]\r\n    ]);\r\n    await ctx.editMessageText(message, documentsKeyboard);\r\n});\r\n\r\nmainScene.action('clients_management', async (ctx) => {\r\n    const message = `[работа с клиентами]`;\r\n    const clientsManagementKeyboard = Markup.inlineKeyboard([\r\n        [\r\n            Markup.button.callback('изменить время услуги', 'change_service_time'),\r\n            Markup.button.callback('удалить услугу из заказа', 'delete_service_from_order'),\r\n        ],\r\n        [\r\n            Markup.button.callback('добавить услугу в заказ', 'add_service_to_order'),\r\n        ],\r\n        [\r\n            Markup.button.callback('изменить номер телефона', 'change_phone_number'),\r\n            Markup.button.callback('изменить состав заказа', 'change_order_content'),\r\n        ],\r\n        [\r\n            Markup.button.callback('отменить запись клиента', 'cancel_client_booking'),\r\n        ],\r\n        [\r\n            Markup.button.callback('👌 Главное меню', 'mainmenu'),\r\n        ]\r\n    ]);\r\n    await ctx.editMessageText(message, clientsManagementKeyboard);\r\n});\r\n\r\nmainScene.action('change_description', async (ctx: MyContext) => {\r\n    await ctx.answerCbQuery();\r\n    // Просто переходим в сцену без отправки сообщения\r\n    return ctx.scene.enter('change_description_scene');\r\n});\r\n\r\nmainScene.action('change_photo', async (ctx) => {\r\n    ctx.reply('Изменить фотографию');\r\n});\r\n\r\nmainScene.action('change_schedule', async (ctx) => {\r\n    ctx.reply('Изменить график работы');\r\n});","import { Scenes, Markup, Composer } from 'telegraf';\r\nimport { MyContext } from '../../../types/MyContext';\r\nimport laravelService from \"../../../../services/laravelService\";\r\n\r\n// Session interface to store user data\r\ninterface RegistrationSession {\r\n    fullName?: string;\r\n    birthDate?: string;\r\n    passport?: string;\r\n    issuedBy?: string;\r\n    issueDate?: string;\r\n    divisionCode?: string;\r\n    registrationAddress?: string;\r\n    inn?: string;\r\n    accountNumber?: string;\r\n    bankName?: string;\r\n    bik?: string;\r\n    corrAccount?: string;\r\n    bankInn?: string;\r\n    bankKpp?: string;\r\n    phone?: string;\r\n    email?: string;\r\n    hasMedBook?: boolean;\r\n    medBookExpiry?: string;\r\n    hasEducationCert?: boolean;\r\n    educationCertPhoto?: string;\r\n    isSelfEmployed?: boolean;\r\n}\r\n\r\n// Validation formats\r\nconst ValidationFormats = {\r\n    FULL_NAME: /^[А-ЯЁ][а-яё]+(?:-[А-ЯЁ][а-яё]+)?\\s[А-ЯЁ][а-яё]+(?:\\s[А-ЯЁ][а-яё]+)?$/,\r\n    BIRTH_DATE: /^(0[1-9]|[12][0-9]|3[01])\\.(0[1-9]|1[0-2])\\.\\d{4}$/,\r\n    PASSPORT: /^\\d{4}\\s\\d{6}$/,\r\n    DIVISION_CODE: /^\\d{3}-\\d{3}$/,\r\n    INN: /^\\d{12}$/,\r\n    ACCOUNT_NUMBER: /^\\d{20}$/,\r\n    BIK: /^\\d{9}$/,\r\n    CORR_ACCOUNT: /^\\d{20}$/,\r\n    BANK_INN: /^\\d{10}$/,\r\n    BANK_KPP: /^\\d{9}$/,\r\n    PHONE: /^\\+7\\d{10}$/,\r\n    EMAIL: /^[a-zA-Z0-9](?:[a-zA-Z0-9._-]{0,61}[a-zA-Z0-9])?@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z]{2,})+$/,\r\n    ISSUE_DATE: /^(0[1-9]|[12][0-9]|3[01])\\.(0[1-9]|1[0-2])\\.\\d{4}$/,\r\n    MED_BOOK_EXPIRY: /^(0[1-9]|[12][0-9]|3[01])\\.(0[1-9]|1[0-2])\\.\\d{4}$/\r\n};\r\n\r\n// Validation messages\r\nconst ValidationMessages = {\r\n    FULL_NAME: {\r\n        prompt: 'Напишите, пожалуйста, свое ФИО\\n\\nПример: Иванов Иван Иванович',\r\n        error: 'Неверный формат ФИО. ФИО должно содержать только русские буквы, пробелы и дефис.\\n\\nВведите, пожалуйста, корректное ФИО\\nПример: Иванов Иван Иванович'\r\n    },\r\n    BIRTH_DATE: {\r\n        prompt: 'Напишите, пожалуйста, дату рождения\\n\\nФормат: ДД.ММ.ГГГГ\\nПример: 01.01.1990',\r\n        error: 'Неверный формат даты рождения.\\n\\nВведите дату в правильном формате\\nФормат: ДД.ММ.ГГГГ\\nПример: 01.01.1990'\r\n    },\r\n    PASSPORT: {\r\n        prompt: 'Введите серию и номер паспорта\\n\\nФормат: СССС НННННН\\nПример: 4444 555666',\r\n        error: 'Неверный формат паспортных данных.\\n\\nВведите серию и номер паспорта в правильном формате\\nФормат: СССС НННННН\\nПример: 4444 555666'\r\n    },\r\n    ISSUED_BY: {\r\n        prompt: 'Кем выдан паспорт?\\n\\nПример: ГУ МВД РОССИИ ПО МОСКОВСКОЙ ОБЛАСТИ',\r\n        error: 'Слишком короткое или длинное название органа.\\n\\nВведите корректное название органа, выдавшего паспорт\\nПример: ГУ МВД РОССИИ ПО МОСКОВСКОЙ ОБЛАСТИ'\r\n    },\r\n    ISSUE_DATE: {\r\n        prompt: 'Дата выдачи паспорта\\n\\nФормат: ДД.ММ.ГГГГ\\nПример: 01.01.2020',\r\n        error: 'Неверный формат даты выдачи.\\n\\nВведите дату в правильном формате\\nФормат: ДД.ММ.ГГГГ\\nПример: 01.01.2020'\r\n    },\r\n    DIVISION_CODE: {\r\n        prompt: 'Код подразделения\\n\\nФормат: XXX-XXX\\nПример: 770-001',\r\n        error: 'Неверный формат кода подразделения.\\n\\nВведите код в правильном формате\\nФормат: XXX-XXX\\nПример: 770-001'\r\n    },\r\n    ADDRESS: {\r\n        prompt: 'Адрес регистрации\\n\\nПример: г. Москва, ул. Ленина, д. 1, кв. 1',\r\n        error: 'Слишком короткий или длинный адрес.\\n\\nВведите корректный адрес регистрации\\nПример: г. Москва, ул. Ленина, д. 1, кв. 1'\r\n    },\r\n    INN: {\r\n        prompt: 'ИНН\\n\\nПример: 123456789012 (12 цифр)',\r\n        error: 'Неверный формат ИНН.\\n\\nВведите ИНН в правильном формате\\nПример: 123456789012 (12 цифр)'\r\n    },\r\n    ACCOUNT_NUMBER: {\r\n        prompt: 'Номер счета\\n\\nПример: 40817810099910004312 (20 цифр)',\r\n        error: 'Неверный формат номера счета.\\n\\nВведите правильный номер счета\\nПример: 40817810099910004312 (20 цифр)'\r\n    },\r\n    BANK_NAME: {\r\n        prompt: 'Банк получателя\\n\\nПример: ПАО СБЕРБАНК',\r\n        error: 'Некорректное название банка.\\n\\nВведите правильное название банка\\nПример: ПАО СБЕРБАНК'\r\n    },\r\n    BIK: {\r\n        prompt: 'БИК\\n\\nПример: 044525225 (9 цифр)',\r\n        error: 'Неверный формат БИК.\\n\\nВведите БИК в правильном формате\\nПример: 044525225 (9 цифр)'\r\n    },\r\n    CORR_ACCOUNT: {\r\n        prompt: 'Корреспондентский счет\\n\\nПример: 30101810400000000225 (20 цифр)',\r\n        error: 'Неверный формат корр. счета.\\n\\nВведите правильный Корреспондентский счет\\nПример: 30101810400000000225 (20 цифр)'\r\n    },\r\n    BANK_INN: {\r\n        prompt: 'ИНН банка\\n\\nПример: 7707083893 (10 цифр)',\r\n        error: 'Неверный формат ИНН банка.\\n\\nВведите правильный ИНН банка\\nПример: 7707083893 (10 цифр)'\r\n    },\r\n    BANK_KPP: {\r\n        prompt: 'КПП банка\\n\\nПример: 773601001 (9 цифр)',\r\n        error: 'Неверный формат КПП банка.\\n\\nВведите правильный КПП банка\\nПример: 773601001 (9 цифр)'\r\n    },\r\n    PHONE: {\r\n        prompt: 'Ваш номер телефона\\n\\nФормат: +7XXXXXXXXXX\\nПример: +79001234567',\r\n        error: 'Неверный формат номера телефона.\\n\\nВведите номер в правильном формате\\nФормат: +7XXXXXXXXXX\\nПример: +79001234567'\r\n    },\r\n    EMAIL: {\r\n        prompt: 'Ваша электронная почта\\n\\nПример: example@mail.ru',\r\n        error: 'Неверный формат email.\\n\\nВведите корректный email адрес\\nПример: example@mail.ru'\r\n    },\r\n    MED_BOOK_EXPIRY: {\r\n        prompt: 'Дата окончания действия медицинской книжки\\n\\nФормат: ДД.ММ.ГГГГ\\nПример: 01.01.2025',\r\n        error: 'Неверный формат даты.\\n\\nВведите дату окончания медицинской книжки\\nФормат: ДД.ММ.ГГГГ\\nПример: 01.01.2025'\r\n    }\r\n};\r\n\r\n// Validation helper functions\r\nconst validateField = (value: string, type: keyof typeof ValidationFormats): boolean => {\r\n    const pattern = ValidationFormats[type];\r\n    return pattern.test(value);\r\n};\r\n\r\nconst validateIssuedBy = (value: string): boolean => {\r\n    return value.length >= 5 && value.length <= 150;\r\n};\r\n\r\nconst validateAddress = (value: string): boolean => {\r\n    return value.length >= 10 && value.length <= 200;\r\n};\r\n\r\nconst validateBankName = (value: string): boolean => {\r\n    return value.length >= 3 && value.length <= 100;\r\n};\r\n\r\n// Helper function to create back button\r\nconst getBackButton = () => {\r\n    return Markup.inlineKeyboard([\r\n        [Markup.button.callback('« Назад', 'back')]\r\n    ]);\r\n};\r\n\r\n// Initial welcome message\r\nconst showWelcome = async (ctx: MyContext) => {\r\n    const registrationForm: RegistrationSession = {\r\n        fullName: '',\r\n        birthDate: '',\r\n        passport: '',\r\n        issuedBy: '',\r\n        issueDate: '',\r\n        divisionCode: '',\r\n        registrationAddress: '',\r\n        inn: '',\r\n        accountNumber: '',\r\n        bankName: '',\r\n        bik: '',\r\n        corrAccount: '',\r\n        bankInn: '',\r\n        bankKpp: '',\r\n        phone: '',\r\n        email: '',\r\n        hasMedBook: false,\r\n        medBookExpiry: '',\r\n        hasEducationCert: false,\r\n        educationCertPhoto: '',\r\n        isSelfEmployed: false\r\n    };\r\n    ctx.scene.session.registrationForm = registrationForm;\r\n\r\n    const messageText = 'Давайте вместе устроимся на работу?!!!';\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('Давайте', 'start_registration')]\r\n    ]);\r\n\r\n    if (ctx.callbackQuery?.message) {\r\n        await ctx.editMessageText(messageText, keyboard);\r\n    } else {\r\n        await ctx.reply(messageText, keyboard);\r\n    }\r\n    return ctx.wizard.next();\r\n};\r\n\r\n// Check self-employment status\r\nconst checkSelfEmployment = async (ctx: MyContext) => {\r\n    if (ctx.callbackQuery?.data === 'start_registration') {\r\n        const messageText = 'Вы являетесь самозанятым?';\r\n        const keyboard = Markup.inlineKeyboard([\r\n            [\r\n                Markup.button.callback('Да', 'self_employed_yes'),\r\n                Markup.button.callback('Нет', 'self_employed_no')\r\n            ]\r\n        ]);\r\n        await ctx.editMessageText(messageText, keyboard);\r\n    }\r\n    return ctx.wizard.next();\r\n};\r\n\r\n// Handle self-employment response\r\nconst handleSelfEmployment = new Composer<MyContext>();\r\nhandleSelfEmployment.action('self_employed_no', async (ctx) => {\r\n    ctx.scene.session.registrationForm.isSelfEmployed = false;\r\n    const messageText = 'Оформитесь как СМЗ и продолжите трудоустройство';\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.url('Оформиться', 'https://npd.nalog.ru/')],\r\n        [Markup.button.callback('Продолжить', 'continue_registration')]\r\n    ]);\r\n    await ctx.editMessageText(messageText, keyboard);\r\n});\r\n\r\nhandleSelfEmployment.action('self_employed_yes', async (ctx) => {\r\n    ctx.scene.session.registrationForm.isSelfEmployed = true;\r\n    return requestFullName(ctx);\r\n});\r\n\r\nhandleSelfEmployment.action('continue_registration', async (ctx) => {\r\n    return requestFullName(ctx);\r\n});\r\n\r\n// Request full name\r\nconst requestFullName = async (ctx: MyContext) => {\r\n    await ctx.reply(ValidationMessages.FULL_NAME.prompt);\r\n    return ctx.wizard.next();\r\n};\r\n\r\n// Handle full name input\r\nconst handleFullName = new Composer<MyContext>();\r\nhandleFullName.on('text', async (ctx) => {\r\n    const fullName = ctx.message.text;\r\n    \r\n    if (!validateField(fullName, 'FULL_NAME')) {\r\n        await ctx.reply(ValidationMessages.FULL_NAME.error);\r\n        \r\n        return;\r\n    }\r\n    \r\n    ctx.scene.session.registrationForm.fullName = fullName;\r\n    await ctx.reply(ValidationMessages.BIRTH_DATE.prompt);\r\n    return ctx.wizard.next();\r\n});\r\n\r\n// Handle birth date\r\n// Обновляем обработчик даты рождения\r\nconst handleBirthDate = new Composer<MyContext>();\r\nhandleBirthDate.on('text', async (ctx) => {\r\n    const birthDate = ctx.message.text.trim();\r\n    \r\n    if (!validateField(birthDate, 'BIRTH_DATE')) {\r\n        await ctx.reply(ValidationMessages.BIRTH_DATE.error);\r\n        return;\r\n    }\r\n    \r\n    // Добавляем проверку на разумный возраст\r\n    const [day, month, year] = birthDate.split('.').map(Number);\r\n    const birthTimestamp = new Date(year, month - 1, day).getTime();\r\n    const now = new Date().getTime();\r\n    const age = (now - birthTimestamp) / (365.25 * 24 * 60 * 60 * 1000);\r\n    \r\n    if (age < 18 || age > 100) {\r\n        await ctx.reply('Пожалуйста, проверьте правильность введенной даты. Возраст должен быть от 18 до 100 лет.');\r\n        return;\r\n    }\r\n    \r\n    ctx.scene.session.registrationForm.birthDate = birthDate;\r\n    await ctx.reply(ValidationMessages.PASSPORT.prompt);\r\n    return ctx.wizard.next();\r\n});\r\n\r\n// Handle passport\r\nconst handlePassport = new Composer<MyContext>();\r\nhandlePassport.on('text', async (ctx) => {\r\n    const passport = ctx.message.text;\r\n    \r\n    if (!validateField(passport, 'PASSPORT')) {\r\n        await ctx.reply(ValidationMessages.PASSPORT.error);\r\n        \r\n        return;\r\n    }\r\n    \r\n    ctx.scene.session.registrationForm.passport = passport;\r\n    await ctx.reply(ValidationMessages.ISSUED_BY.prompt);\r\n    return ctx.wizard.next();\r\n});\r\n\r\n// Handle issued by\r\nconst handleIssuedBy = new Composer<MyContext>();\r\nhandleIssuedBy.on('text', async (ctx) => {\r\n    const issuedBy = ctx.message.text;\r\n    \r\n    if (!validateIssuedBy(issuedBy)) {\r\n        await ctx.reply(ValidationMessages.ISSUED_BY.error);\r\n        \r\n        return;\r\n    }\r\n    \r\n    ctx.scene.session.registrationForm.issuedBy = issuedBy;\r\n    await ctx.reply(ValidationMessages.ISSUE_DATE.prompt);\r\n    return ctx.wizard.next();\r\n});\r\n\r\n// Handle issue date\r\nconst handleIssueDate = new Composer<MyContext>();\r\nhandleIssueDate.on('text', async (ctx) => {\r\n    const issueDate = ctx.message.text;\r\n    \r\n    if (!validateField(issueDate, 'ISSUE_DATE')) {\r\n        await ctx.reply(ValidationMessages.ISSUE_DATE.error);\r\n        \r\n        return;\r\n    }\r\n    \r\n    ctx.scene.session.registrationForm.issueDate = issueDate;\r\n    await ctx.reply(ValidationMessages.DIVISION_CODE.prompt);\r\n    return ctx.wizard.next();\r\n});\r\n\r\n// Handle division code\r\nconst handleDivisionCode = new Composer<MyContext>();\r\nhandleDivisionCode.on('text', async (ctx) => {\r\n    const divisionCode = ctx.message.text;\r\n    \r\n    if (!validateField(divisionCode, 'DIVISION_CODE')) {\r\n        await ctx.reply(ValidationMessages.DIVISION_CODE.error);\r\n       \r\n        return;\r\n    }\r\n    \r\n    ctx.scene.session.registrationForm.divisionCode = divisionCode;\r\n    await ctx.reply(ValidationMessages.ADDRESS.prompt);\r\n    return ctx.wizard.next();\r\n});\r\n\r\n// Handle address\r\nconst handleAddress = new Composer<MyContext>();\r\nhandleAddress.on('text', async (ctx) => {\r\n    const address = ctx.message.text;\r\n    \r\n    if (!validateAddress(address)) {\r\n        await ctx.reply(ValidationMessages.ADDRESS.error);\r\n        \r\n        return;\r\n    }\r\n    \r\n    ctx.scene.session.registrationForm.registrationAddress = address;\r\n    await ctx.reply(ValidationMessages.INN.prompt);\r\n    return ctx.wizard.next();\r\n});\r\n\r\n// Handle INN\r\nconst handleInn = new Composer<MyContext>();\r\nhandleInn.on('text', async (ctx) => {\r\n    const inn = ctx.message.text;\r\n    \r\n    if (!validateField(inn, 'INN')) {\r\n        await ctx.reply(ValidationMessages.INN.error);\r\n        \r\n        return;\r\n    }\r\n    \r\n    ctx.scene.session.registrationForm.inn = inn;\r\n    await ctx.reply(ValidationMessages.ACCOUNT_NUMBER.prompt);\r\n    return ctx.wizard.next();\r\n});\r\n\r\n// Handle account number\r\nconst handleAccountNumber = new Composer<MyContext>();\r\nhandleAccountNumber.on('text', async (ctx) => {\r\n    const accountNumber = ctx.message.text;\r\n    \r\n    if (!validateField(accountNumber, 'ACCOUNT_NUMBER')) {\r\n        await ctx.reply(ValidationMessages.ACCOUNT_NUMBER.error);\r\n        \r\n        return;\r\n    }\r\n    \r\n    ctx.scene.session.registrationForm.accountNumber = accountNumber;\r\n    await ctx.reply(ValidationMessages.BANK_NAME.prompt);\r\n    return ctx.wizard.next();\r\n});\r\n\r\n// Handle bank name\r\nconst handleBankName = new Composer<MyContext>();\r\nhandleBankName.on('text', async (ctx) => {\r\n    const bankName = ctx.message.text;\r\n    \r\n    if (!validateBankName(bankName)) {\r\n        await ctx.reply(ValidationMessages.BANK_NAME.error);\r\n       \r\n        return;\r\n    }\r\n    \r\n    ctx.scene.session.registrationForm.bankName = bankName;\r\n    await ctx.reply(ValidationMessages.BIK.prompt);\r\n    return ctx.wizard.next();\r\n});\r\n\r\n// Handle BIK\r\nconst handleBik = new Composer<MyContext>();\r\nhandleBik.on('text', async (ctx) => {\r\n    const bik = ctx.message.text;\r\n    \r\n    if (!validateField(bik, 'BIK')) {\r\n        await ctx.reply(ValidationMessages.BIK.error);\r\n        \r\n        return;\r\n    }\r\n    \r\n    ctx.scene.session.registrationForm.bik = bik;\r\n    await ctx.reply(ValidationMessages.CORR_ACCOUNT.prompt);\r\n    return ctx.wizard.next();\r\n});\r\n\r\n// Handle correspondent account\r\nconst handleCorrAccount = new Composer<MyContext>();\r\nhandleCorrAccount.on('text', async (ctx) => {\r\n    const corrAccount = ctx.message.text;\r\n    \r\n    if (!validateField(corrAccount, 'CORR_ACCOUNT')) {\r\n        await ctx.reply(ValidationMessages.CORR_ACCOUNT.error);\r\n        \r\n        return;\r\n    }\r\n    \r\n    ctx.scene.session.registrationForm.corrAccount = corrAccount;\r\n    await ctx.reply(ValidationMessages.BANK_INN.prompt);\r\n    return ctx.wizard.next();\r\n});\r\n\r\n// Handle bank INN\r\nconst handleBankInn = new Composer<MyContext>();\r\nhandleBankInn.on('text', async (ctx) => {\r\n    const bankInn = ctx.message.text;\r\n    \r\n    if (!validateField(bankInn, 'BANK_INN')) {\r\n        await ctx.reply(ValidationMessages.BANK_INN.error);\r\n        \r\n        return;\r\n    }\r\n    \r\n    ctx.scene.session.registrationForm.bankInn = bankInn;\r\n    await ctx.reply(ValidationMessages.BANK_KPP.prompt);\r\n    return ctx.wizard.next();\r\n});\r\n\r\n// Handle bank KPP\r\nconst handleBankKpp = new Composer<MyContext>();\r\nhandleBankKpp.on('text', async (ctx) => {\r\n    const bankKpp = ctx.message.text;\r\n    \r\n    if (!validateField(bankKpp, 'BANK_KPP')) {\r\n        await ctx.reply(ValidationMessages.BANK_KPP.error);\r\n        \r\n        return;\r\n    }\r\n    \r\n    ctx.scene.session.registrationForm.bankKpp = bankKpp;\r\n    await ctx.reply(ValidationMessages.PHONE.prompt);\r\n    return ctx.wizard.next();\r\n});\r\n\r\n// Handle phone\r\nconst handlePhone = new Composer<MyContext>();\r\nhandlePhone.on('text', async (ctx) => {\r\n    const phone = ctx.message.text;\r\n    \r\n    if (!validateField(phone, 'PHONE')) {\r\n        await ctx.reply(ValidationMessages.PHONE.error);\r\n        \r\n        return;\r\n    }\r\n    \r\n    ctx.scene.session.registrationForm.phone = phone;\r\n    await ctx.reply(ValidationMessages.EMAIL.prompt);\r\n    return ctx.wizard.next();\r\n});\r\n\r\n// Handle email\r\nconst handleEmail = new Composer<MyContext>();\r\nhandleEmail.on('text', async (ctx) => {\r\n    const email = ctx.message.text;\r\n    \r\n    if (!validateField(email, 'EMAIL')) {\r\n        await ctx.reply(ValidationMessages.EMAIL.error);\r\n        \r\n        return;\r\n    }\r\n    \r\n    ctx.scene.session.registrationForm.email = email;\r\n    await ctx.reply('У вас есть мед книжка?', Markup.inlineKeyboard([\r\n        [\r\n            Markup.button.callback('Да', 'med_book_yes'),\r\n            Markup.button.callback('Нет', 'med_book_no')\r\n        ]\r\n    ]));\r\n    return ctx.wizard.next();\r\n});\r\n\r\n// Handle med book response\r\nconst handleMedBook = new Composer<MyContext>();\r\nhandleMedBook.action('med_book_yes', async (ctx) => {\r\n    ctx.scene.session.registrationForm.hasMedBook = true;\r\n    await ctx.reply(ValidationMessages.MED_BOOK_EXPIRY.prompt);\r\n    return ctx.wizard.next();\r\n});\r\nhandleMedBook.action('med_book_no', async (ctx) => {\r\n    ctx.scene.session.registrationForm.hasMedBook = false;\r\n    return handleEducationCertQuestion(ctx);\r\n});\r\n\r\n// Handle med book expiry\r\nconst handleMedBookExpiry = new Composer<MyContext>();\r\nhandleMedBookExpiry.on('text', async (ctx) => {\r\n    const medBookExpiry = ctx.message.text;\r\n    \r\n    if (!validateField(medBookExpiry, 'MED_BOOK_EXPIRY')) {\r\n        await ctx.reply(ValidationMessages.MED_BOOK_EXPIRY.error);\r\n        \r\n        return;\r\n    }\r\n    \r\n    ctx.scene.session.registrationForm.medBookExpiry = medBookExpiry;\r\n    return handleEducationCertQuestion(ctx);\r\n});\r\n\r\n// Handle education certificate question\r\nconst handleEducationCertQuestion = async (ctx: MyContext) => {\r\n    await ctx.reply('У вас есть сертификат об образовании?', Markup.inlineKeyboard([\r\n        [\r\n            Markup.button.callback('Да', 'education_cert_yes'),\r\n            Markup.button.callback('Нет', 'education_cert_no')\r\n        ]\r\n    ]));\r\n    return ctx.wizard.next();\r\n};\r\n\r\n// Handle education certificate response\r\nconst handleEducationCert = new Composer<MyContext>();\r\nhandleEducationCert.action('education_cert_yes', async (ctx) => {\r\n    ctx.scene.session.registrationForm.hasEducationCert = true;\r\n    await ctx.reply('Отправьте пожалуйста фото сертификата');\r\n    return ctx.wizard.next();\r\n});\r\nhandleEducationCert.action('education_cert_no', async (ctx) => {\r\n    ctx.scene.session.registrationForm.hasEducationCert = false;\r\n    return handleFinalStep(ctx);\r\n});\r\n\r\n// Handle education certificate photo\r\nconst handleEducationCertPhoto = new Composer<MyContext>();\r\nhandleEducationCertPhoto.on('photo', async (ctx) => {\r\n    const photo = ctx.message.photo[ctx.message.photo.length - 1];\r\n    ctx.scene.session.registrationForm.educationCertPhoto = photo.file_id;\r\n    return handleFinalStep(ctx);\r\n});\r\n\r\n// Создаем улучшенное хранилище для групп документов\r\nconst documentGroups = new Map<string, {\r\n    files: Array<{file_id: string, file_name: string}>,\r\n    timer?: NodeJS.Timeout,\r\n    processed: boolean\r\n}>();\r\n\r\n// Функция логирования\r\nfunction logDebug(message: string, data?: any) {\r\n    console.log(`[${new Date().toISOString()}] ${message}`, data ? JSON.stringify(data, null, 2) : '');\r\n}\r\n\r\nconst handleSignedDocuments = new Composer<MyContext>();\r\n\r\nhandleSignedDocuments.on('document', async (ctx) => {\r\n    const message = ctx.message;\r\n    const mediaGroupId = message.media_group_id;\r\n    const document = message.document;\r\n\r\n    logDebug('Получен новый документ:', {\r\n        mediaGroupId,\r\n        fileName: document.file_name,\r\n        fileId: document.file_id,\r\n        fileSize: document.file_size,\r\n        registrationId: ctx.scene.session.registrationId\r\n    });\r\n\r\n    // Проверяем формат файла\r\n    const fileName = document.file_name?.toLowerCase();\r\n    if (!fileName?.endsWith('.pdf') && !fileName?.endsWith('.docx')) {\r\n        logDebug('Некорректный формат файла:', { fileName });\r\n        await ctx.reply('Пожалуйста, отправляйте документы только в форматах PDF или DOCX');\r\n        return;\r\n    }\r\n\r\n    if (!mediaGroupId) {\r\n        logDebug('Документ отправлен не в группе');\r\n        await ctx.reply('Пожалуйста, отправьте все документы одним сообщением, выбрав их все сразу.');\r\n        return;\r\n    }\r\n\r\n    // Получаем или создаем группу документов\r\n    let group = documentGroups.get(mediaGroupId);\r\n    if (!group) {\r\n        logDebug('Создаем новую группу документов:', { mediaGroupId });\r\n        group = {\r\n            files: [],\r\n            processed: false\r\n        };\r\n        documentGroups.set(mediaGroupId, group);\r\n    }\r\n\r\n    // Добавляем документ в группу\r\n    group.files.push({\r\n        file_id: document.file_id,\r\n        file_name: document.file_name\r\n    });\r\n    logDebug('Добавлен документ в группу:', {\r\n        mediaGroupId,\r\n        totalFiles: group.files.length,\r\n        currentFile: document.file_name\r\n    });\r\n\r\n    // Очищаем предыдущий таймер если он есть\r\n    if (group.timer) {\r\n        clearTimeout(group.timer);\r\n    }\r\n\r\n    // Устанавливаем новый таймер для обработки группы\r\n    group.timer = setTimeout(async () => {\r\n        logDebug('Запуск обработки группы документов:', {\r\n            mediaGroupId,\r\n            filesCount: group.files.length\r\n        });\r\n\r\n        if (group.processed) {\r\n            logDebug('Группа уже была обработана:', { mediaGroupId });\r\n            return;\r\n        }\r\n\r\n        try {\r\n            group.processed = true;\r\n\r\n            // Проверяем наличие registrationId\r\n            const registrationId = ctx.scene.session.registrationId;\r\n            if (!registrationId) {\r\n                throw new Error('Отсутствует registrationId в сессии');\r\n            }\r\n\r\n            logDebug('Начинаем загрузку файлов:', {\r\n                mediaGroupId,\r\n                registrationId,\r\n                filesCount: group.files.length\r\n            });\r\n\r\n            // Загружаем и подготавливаем все документы\r\n            const uploadPromises = group.files.map(async (doc) => {\r\n                logDebug('Получаем информацию о файле от Telegram:', {\r\n                    fileId: doc.file_id,\r\n                    fileName: doc.file_name\r\n                });\r\n\r\n                const file = await ctx.telegram.getFile(doc.file_id);\r\n                const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN_MASTER}/${file.file_path}`;\r\n\r\n                logDebug('Получен URL файла:', {\r\n                    fileName: doc.file_name,\r\n                    fileUrl: fileUrl\r\n                });\r\n\r\n                return {\r\n                    url: fileUrl,\r\n                    name: doc.file_name\r\n                };\r\n            });\r\n\r\n            const uploadedFiles = await Promise.all(uploadPromises);\r\n            logDebug('Все файлы подготовлены к загрузке:', {\r\n                filesCount: uploadedFiles.length,\r\n                files: uploadedFiles.map(f => f.name)\r\n            });\r\n\r\n            // Отправляем документы в API\r\n            logDebug('Отправляем документы в API:', {\r\n                registrationId,\r\n                filesCount: uploadedFiles.length\r\n            });\r\n\r\n            const response = await laravelService.uploadSignedDocuments(\r\n                registrationId,\r\n                uploadedFiles\r\n            );\r\n\r\n            logDebug('Получен ответ от API:', { response });\r\n\r\n            await ctx.reply('Спасибо! Документы успешно получены. В ближайшее время мы проверим их и сообщим вам о результатах.');\r\n            \r\n            // Очищаем группу\r\n            documentGroups.delete(mediaGroupId);\r\n            logDebug('Группа документов успешно обработана и удалена:', { mediaGroupId });\r\n            \r\n            return ctx.scene.leave();\r\n        } catch (error) {\r\n            logDebug('Ошибка при обработке группы документов:', {\r\n                mediaGroupId,\r\n                error: error.message,\r\n                stack: error.stack\r\n            });\r\n\r\n            await ctx.reply('Произошла ошибка при обработке документов. Пожалуйста, попробуйте еще раз или обратитесь в поддержку.');\r\n            \r\n            // Очищаем группу в случае ошибки\r\n            documentGroups.delete(mediaGroupId);\r\n        }\r\n    }, 2000); // Увеличиваем время ожидания до 2 секунд\r\n});\r\n\r\n// Handle final step\r\n// В handleFinalStep добавим:\r\nconst handleFinalStep = async (ctx: MyContext) => {\r\n    await ctx.reply('Отлично, мы подготовим документы и отправим вам их сюда.');\r\n    \r\n    try {\r\n        console.log('Attempting to submit registration with data:', ctx.scene.session.registrationForm);\r\n        \r\n        const registrationResponse = await laravelService.submitRegistration(ctx.scene.session.registrationForm);\r\n        console.log('Registration submitted successfully:', registrationResponse);\r\n        \r\n        const registrationId = registrationResponse.data.id;\r\n        ctx.scene.session.documentUpload = {\r\n            documents: [],\r\n            registrationId: registrationId\r\n        };\r\n        \r\n        if (!registrationId) {\r\n            throw new Error('Registration ID not found in response');\r\n        }\r\n\r\n        const zipBuffer = await laravelService.generateContract({\r\n            id: registrationId\r\n        });\r\n\r\n        await ctx.replyWithDocument({\r\n            source: zipBuffer,\r\n            filename: `Документы_${registrationResponse.data.contract_number}.zip`\r\n        });\r\n\r\n        const instructions = `\r\nПожалуйста, внимательно прочитайте инструкцию!!!\r\n\r\n1. Распакуйте полученный архив\r\n2. Подпишите все документы\r\n3. Отправьте ВСЕ подписанные документы ОДНИМ СООБЩЕНИЕМ в этот чат\r\n\r\n❗️ Важные требования:\r\n- Отправьте все документы одним сообщением (можно выбрать несколько файлов)\r\n- Принимаются файлы в форматах PDF или DOCX\r\n- Убедитесь, что все документы хорошо читаемы\r\n- Проверьте наличие всех подписей перед отправкой\r\n\r\nЧтобы отправить несколько файлов одним сообщением:\r\n📱 В мобильном приложении:\r\n1. Нажмите на скрепку\r\n2. Выберите \"Файл\"\r\n3. Нажмите на три точки в правом верхнем углу\r\n4. Выберите все нужные документы\r\n5. Нажмите \"Отправить\"\r\n\r\n💻 В десктопной версии:\r\n1. Нажмите на скрепку\r\n2. Зажмите Ctrl и выберите все нужные файлы\r\n3. Нажмите \"Открыть\"`;\r\n\r\n        await ctx.reply(instructions, { parse_mode: 'HTML' });\r\n        return ctx.wizard.next();\r\n\r\n    } catch (error) {\r\n        console.error('Error in handleFinalStep:', error);\r\n        \r\n        let errorMessage = 'Произошла ошибка при обработке данных. ';\r\n        \r\n        if (error.response?.status === 422) {\r\n            const validationErrors = error.response.data.errors;\r\n            if (validationErrors.email) {\r\n                errorMessage += 'Этот email уже зарегистрирован в системе. Пожалуйста, используйте другой email.';\r\n            } else {\r\n                errorMessage += 'Пожалуйста, проверьте правильность введенных данных.';\r\n            }\r\n        } else {\r\n            errorMessage += 'Пожалуйста, попробуйте позже.';\r\n        }\r\n        \r\n        await ctx.reply(errorMessage);\r\n    }\r\n};\r\n\r\n\r\n// Create and export the wizard scene\r\nexport const registrationWizard = new Scenes.WizardScene<MyContext>(\r\n    'registration_wizard',\r\n    showWelcome,\r\n    checkSelfEmployment,\r\n    handleSelfEmployment,\r\n    handleFullName,\r\n    handleBirthDate,\r\n    handlePassport,\r\n    handleIssuedBy,\r\n    handleIssueDate,\r\n    handleDivisionCode,\r\n    handleAddress,\r\n    handleInn,\r\n    handleAccountNumber,\r\n    handleBankName,\r\n    handleBik,\r\n    handleCorrAccount,\r\n    handleBankInn,\r\n    handleBankKpp,\r\n    handlePhone,\r\n    handleEmail,\r\n    handleMedBook,\r\n    handleMedBookExpiry,\r\n    handleEducationCert,\r\n    handleEducationCertPhoto,\r\n    handleSignedDocuments\r\n);","import {Markup} from \"telegraf\";\r\nimport {MyContext} from \"../../../types/MyContext\";\r\n\r\nconst defaultButtons = [\r\n    //Посмотреть заявки\r\n    [Markup.button.callback('Заявки', 'viewApplications')],\r\n    //Трудоустроить\r\n    [Markup.button.callback('Трудоустроить', 'employment')],\r\n\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\nconst defaultButtonsMenuOnly = [\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\nexport const enterHandler = async (ctx: MyContext) => {\r\n    const messageText = `[трудоустройство]`;\r\n\r\n    const buttonsArray = Markup.inlineKeyboard([...defaultButtons]);\r\n\r\n    if (ctx.callbackQuery && ctx.callbackQuery.message) {\r\n        try {\r\n            // If the interaction is from a callback query, edit the existing message\r\n            await ctx.editMessageText(messageText, buttonsArray);\r\n        }\r\n        catch (error) {\r\n            await ctx.reply(messageText, buttonsArray);\r\n        }\r\n    } else {\r\n        await ctx.reply(messageText, buttonsArray);\r\n    }\r\n}\r\n\r\nexport const showApplications = async (ctx: MyContext) => {\r\n    const messageText = `Тут выводим активные заявки на трудоустройство`;\r\n\r\n    const buttonsArray = Markup.inlineKeyboard([...defaultButtonsMenuOnly]);\r\n\r\n    if (ctx.callbackQuery && ctx.callbackQuery.message) {\r\n        try {\r\n            // If the interaction is from a callback query, edit the existing message\r\n            await ctx.editMessageText(messageText, buttonsArray);\r\n        }\r\n        catch (error) {\r\n            await ctx.reply(messageText, buttonsArray);\r\n        }\r\n    } else {\r\n        await ctx.reply(messageText, buttonsArray);\r\n    }\r\n}\r\n\r\nexport const showEmployment = async (ctx: MyContext) => {\r\n    const messageText = `Перейдите в @Beauty_bot_master_bot по кнопке ниже, чтобы подать заявку на трудоустройство`;\r\n\r\n    //@Beauty_bot_master_bot\r\n\r\n    const go_to_bot = Markup.button.url('Перейти в бота', 'https://t.me/Beauty_bot_master_bot?start=registration');\r\n\r\n    const buttonsArray = Markup.inlineKeyboard([[go_to_bot], ...defaultButtonsMenuOnly]);\r\n\r\n    if (ctx.callbackQuery && ctx.callbackQuery.message) {\r\n        try {\r\n            // If the interaction is from a callback query, edit the existing message\r\n            await ctx.editMessageText(messageText, buttonsArray);\r\n        }\r\n        catch (error) {\r\n            await ctx.reply(messageText, buttonsArray);\r\n        }\r\n    } else {\r\n        await ctx.reply(messageText, buttonsArray);\r\n    }\r\n}","import { Scenes, Markup } from 'telegraf';\r\nimport { MyContext } from '../../../types/MyContext';\r\n\r\nimport {enterHandler, showApplications, showEmployment} from \"./employmentActions\";\r\n\r\nexport const employmentScene = new Scenes.BaseScene<MyContext>('employment');\r\n\r\nconst noKeyboard = [\r\n    [Markup.button.callback('👈 Назад', 'reenter')],\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\n// Define the enter handler\r\nemploymentScene.enter(async (ctx: MyContext) => {\r\n    await enterHandler(ctx);\r\n});\r\n\r\nemploymentScene.action('reenter', async (ctx: MyContext) => {\r\n    await ctx.scene.reenter();\r\n});\r\n\r\n//viewApplications\r\n//employment\r\nemploymentScene.action('viewApplications', async (ctx: MyContext) => {\r\n    await showApplications(ctx);\r\n});\r\n\r\nemploymentScene.action('employment', async (ctx: MyContext) => {\r\n    await showEmployment(ctx);\r\n});","import { Scenes, Markup } from 'telegraf';\r\nimport { MyContext } from '../../types/MyContext';\r\nimport CacheService from '../../../utils/redis/Cache/Cache';\r\nimport { fmt, link } from 'telegraf/format';\r\nimport logger from '../../../utils/logger/loggerTelegram';\r\nimport {searchRequestsScene} from \"./searchRequestsScene\";\r\nimport LaravelService from \"../../../services/laravelService\";\r\nimport {cabinetGate} from \"../../utils/cabinetGate\";\r\n\r\nexport const mainScene = new Scenes.BaseScene<MyContext>('main');\r\n\r\n// Define the enter handler\r\nmainScene.enter(async (ctx: MyContext) => {\r\n    const messageText = `главный экран для управляющего`;\r\n\r\n    const mainMenuKeyboard = Markup.inlineKeyboard([\r\n        [\r\n            Markup.button.callback('задачи', 'tasks')\r\n        ],\r\n        [\r\n            Markup.button.callback('расчет зп', 'salary'),\r\n            Markup.button.callback('уведомления', 'notifications'),\r\n        ],\r\n        [\r\n            Markup.button.callback('трудоустройство', 'employment'),\r\n\r\n        ],\r\n        [\r\n            Markup.button.callback('управление складом', 'warehouse'),\r\n            Markup.button.callback('управление персоналом', 'staff'),\r\n        ]\r\n    ]);\r\n\r\n    if (ctx.callbackQuery && ctx.callbackQuery.message) {\r\n        try {\r\n            // If the interaction is from a callback query, edit the existing message\r\n            await ctx.editMessageText(messageText, mainMenuKeyboard);\r\n        }\r\n        catch (error) {\r\n            await ctx.reply(messageText, mainMenuKeyboard);\r\n        }\r\n    } else {\r\n        // Otherwise, send a new message\r\n        await ctx.reply(messageText, mainMenuKeyboard);\r\n    }\r\n\r\n});\r\n\r\n// Handle 'autobooking' action\r\nmainScene.action('tasks', async (ctx: MyContext) => {\r\n  await ctx.scene.enter('tasks');\r\n});\r\n\r\nmainScene.action('salary', async (ctx: MyContext) => {\r\n    await ctx.scene.enter('salary');\r\n});\r\n\r\nmainScene.action('notifications', async (ctx: MyContext) => {\r\n    await cabinetGate(ctx, 'notifications');\r\n});\r\n\r\nmainScene.action('employment', async (ctx: MyContext) => {\r\n    await ctx.scene.enter('employment');\r\n});\r\nmainScene.action('warehouse', async (ctx: MyContext) => {\r\n    await ctx.scene.enter('warehouse');\r\n});\r\nmainScene.action('staff', async (ctx: MyContext) => {\r\n    await ctx.scene.enter('staff');\r\n});\r\n\r\nmainScene.action('cabinets', async (ctx: MyContext) => {\r\n    await cabinetGate(ctx, 'showCabinetsScene');\r\n})\r\n","import {Markup} from \"telegraf\";\r\nimport {MyContext} from \"../../../types/MyContext\";\r\nimport {code, fmt} from \"telegraf/format\";\r\nimport logger from \"../../../../utils/logger/loggerTelegram\";\r\nimport LaravelService from \"../../../../services/laravelService\";\r\n\r\nconst defaultButtons = [\r\n    [Markup.button.callback('👈 Назад', 'reenter')],\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\nconst defaultButtonsMenuOnly = [\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\nexport const enterHandler = async (ctx: MyContext) => {\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('Главное меню', 'mainmenu')],\r\n    ]);\r\n    const message = fmt`Создать уведомление\r\n\r\nВведите данные по уведомлению: \r\n${code('Название уведомления')}`;\r\n\r\n    try {\r\n        await ctx.editMessageText(message, {\r\n            ...keyboard, // Spread the keyboard markup\r\n            link_preview_options: {\r\n                is_disabled: true\r\n            },\r\n        });\r\n        await ctx.answerCbQuery('Введите название уведомления');\r\n    } catch (error) {\r\n        logger.error('Error sending autobooking message:', error);\r\n        await ctx.reply(message, keyboard);\r\n    }\r\n\r\n    return ctx.wizard.next();\r\n}\r\n\r\nexport const promptForSum = async (ctx: MyContext) => {\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('Пропустить', 'notification_skip_sum')],\r\n        [Markup.button.callback('Главное меню', 'mainmenu')],\r\n    ]);\r\n\r\n    const message = fmt`Какая сумма для оплаты?\r\n(если суммы нет, то пропустите это поле)`;\r\n\r\n    try {\r\n        await ctx.editMessageText(message, {\r\n            ...keyboard, // Spread the keyboard markup\r\n            link_preview_options: {\r\n                is_disabled: true\r\n            },\r\n        });\r\n        await ctx.answerCbQuery('Введите сумму для оплаты');\r\n    } catch (error) {\r\n        logger.error('Error sending autobooking message:', error);\r\n        await ctx.reply(message, keyboard);\r\n    }\r\n\r\n    return ctx.wizard.next();\r\n}\r\n\r\nexport const promptForDateTime = async (ctx: MyContext) => {\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('Главное меню', 'mainmenu')],\r\n    ]);\r\n\r\n    const message = fmt`Введите дату и время уведомления в формате:\r\ndd.mm.yyyy hh:mm`;\r\n\r\n    try {\r\n        await ctx.editMessageText(message, {\r\n            ...keyboard, // Spread the keyboard markup\r\n            link_preview_options: {\r\n                is_disabled: true\r\n            },\r\n        });\r\n        await ctx.answerCbQuery('Введите дату и время уведомления');\r\n    } catch (error) {\r\n        logger.error('Error sending autobooking message:', error);\r\n        await ctx.reply(message, keyboard);\r\n    }\r\n\r\n    return ctx.wizard.next();\r\n}\r\n\r\nexport const promptForNotificationType = async (ctx: MyContext) => {\r\n    //keyboard one time or constant notification\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('Одноразовое уведомление', 'notification_one_time')],\r\n        [Markup.button.callback('Постоянное уведомление', 'notification_constant')],\r\n        [Markup.button.callback('Главное меню', 'mainmenu')],\r\n    ]);\r\n\r\n    const message = fmt`Уведомление разовое или постоянное?`;\r\n\r\n    try {\r\n        await ctx.editMessageText(message, {\r\n            ...keyboard, // Spread the keyboard markup\r\n            link_preview_options: {\r\n                is_disabled: true\r\n            },\r\n        });\r\n        await ctx.answerCbQuery('Выберите тип уведомления');\r\n    } catch (error) {\r\n        logger.error('Error sending autobooking message:', error);\r\n        await ctx.reply(message, keyboard);\r\n    }\r\n\r\n    return ctx.wizard.next();\r\n}\r\n\r\nexport const sendSuccessMessage = async (ctx: MyContext) => {\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('Создать еще', 'create_notification')],\r\n        [Markup.button.callback('Все уведомления', 'active_notifications')],\r\n        [Markup.button.callback('Главное меню', 'mainmenu')],\r\n    ]);\r\n\r\n    const message = fmt`Уведомление создано\r\n${code('Название уведомления')}: ${ctx.scene.session.notificationForm.name}\r\n${code('Сумма для оплаты')}: ${ctx.scene.session.notificationForm.sum}\r\n${code('Дата и время уведомления')}: ${ctx.scene.session.notificationForm.dateTime}\r\n${code('Тип уведомления')}: ${ctx.scene.session.notificationForm.type}`;\r\n\r\n    try {\r\n        await LaravelService.createNotificationByTelegramId(ctx.from.id, ctx.scene.session.notificationForm);\r\n    } catch (error) {\r\n        logger.error('Error creating notification:', error);\r\n        await ctx.reply('Произошла ошибка при создании уведомления. Пожалуйста, попробуйте позже.', Markup.inlineKeyboard(defaultButtonsMenuOnly));\r\n    }\r\n\r\n    try {\r\n        await ctx.editMessageText(message, {\r\n            ...keyboard, // Spread the keyboard markup\r\n            link_preview_options: {\r\n                is_disabled: true\r\n            },\r\n        });\r\n        await ctx.answerCbQuery('Уведомление создано');\r\n    } catch (error) {\r\n        logger.error('Error sending autobooking message:', error);\r\n        await ctx.reply(message, keyboard);\r\n    }\r\n\r\n}","import {Composer, Markup, Scenes} from 'telegraf';\r\nimport {MyContext} from '../../../types/MyContext';\r\n\r\nimport {\r\n    enterHandler,\r\n    promptForDateTime,\r\n    promptForNotificationType,\r\n    promptForSum,\r\n    sendSuccessMessage\r\n} from \"./createNotificationActions\";\r\nimport {fmt} from \"telegraf/format\";\r\nimport {sendOrderConfirmation} from \"../actions/autoBookingActions\";\r\n\r\nconst noKeyboard = [\r\n    [Markup.button.callback('👈 Назад', 'reenter')],\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\nconst handleNameInput = new Composer<MyContext>();\r\n\r\nhandleNameInput.on('text', async (ctx) => {\r\n    const name = ctx.message.text;\r\n    ctx.scene.session.notificationForm.name = name;\r\n\r\n    await promptForSum(ctx);\r\n});\r\n\r\nconst handleSumInput = new Composer<MyContext>();\r\n\r\nhandleSumInput.on('text', async (ctx) => {\r\n    const sum = ctx.message.text;\r\n    ctx.scene.session.notificationForm.sum = sum;\r\n    await promptForDateTime(ctx);\r\n});\r\n\r\nhandleSumInput.action('notification_skip_sum', async (ctx) => {\r\n    ctx.scene.session.notificationForm.sum = null;\r\n    await promptForDateTime(ctx);\r\n});\r\n\r\nconst handleDateTimeInput = new Composer<MyContext>();\r\n\r\nhandleDateTimeInput.on('text', async (ctx) => {\r\n    //date in format dd.mm.yyyy hh:mm\r\n    const input = ctx.message.text;\r\n\r\n    // Regular expression to match dd.mm.yyyy hh:mm\r\n    const dateRegex = /^(\\d{2})\\.(\\d{2})\\.(\\d{4}) (\\d{2}):(\\d{2})$/;\r\n\r\n    // Find dates that do not match the regex\r\n    const invalidFormatDate = !dateRegex.test(input);\r\n\r\n    if (invalidFormatDate) {\r\n        const errorMessage = fmt`❌ Некорректный формат даты: ${invalidFormatDate}.\r\nПожалуйста, введите дату в формате ГГГГ.ММ.ДД. Например:\r\n• 2025.08.10 12:00`;\r\n\r\n        // Send the error message with the default navigation buttons\r\n        await ctx.reply(errorMessage, {\r\n            ...Markup.inlineKeyboard(noKeyboard),\r\n            link_preview_options: {\r\n                is_disabled: true\r\n            },\r\n        });\r\n\r\n        return; // Stay on the current step\r\n    }\r\n\r\n    // If all dates are valid, save them to the session\r\n    ctx.scene.session.notificationForm.dateTime = ctx.message.text;\r\n    await promptForNotificationType(ctx);\r\n});\r\n\r\n\r\nconst handleNotificationTypeInput = new Composer<MyContext>();\r\nhandleNotificationTypeInput.action('notification_one_time', async (ctx) => {\r\n    ctx.scene.session.notificationForm.type = 'one_time';\r\n    await sendSuccessMessage(ctx);\r\n});\r\nhandleNotificationTypeInput.action('notification_constant', async (ctx) => {\r\n    ctx.scene.session.notificationForm.type = 'constant';\r\n    await sendSuccessMessage(ctx);\r\n});\r\n\r\nexport const createNotifictationScene = new Scenes.WizardScene<MyContext>(\r\n    'create_notification',\r\n    // Step 1: Prompt to enter name\r\n    async (ctx) => {\r\n        ctx.scene.session.notificationForm = {\r\n            name: null,\r\n            sum: null,\r\n            dateTime: null,\r\n            type: null,\r\n        }\r\n       await enterHandler(ctx);\r\n    },\r\n    // Step 2: Save name and prompt to enter sum\r\n    handleNameInput,\r\n    // Step 3: Save sum and prompt to enter date\r\n    handleSumInput,\r\n    // Step 4: Save date and prompt to enter type\r\n    handleDateTimeInput,\r\n    // Step 5: Save type and sucecss\r\n    handleNotificationTypeInput,\r\n);\r\n\r\ncreateNotifictationScene.command('start', async (ctx) => {\r\n    await ctx.scene.enter('main');\r\n});\r\ncreateNotifictationScene.action('mainmenu', async (ctx) => {\r\n    await ctx.scene.enter('main');\r\n});\r\n","import {Markup} from \"telegraf\";\r\nimport {MyContext} from \"../../../types/MyContext\";\r\nimport {bold, code, fmt} from \"telegraf/format\";\r\nimport logger from \"../../../../utils/logger/loggerTelegram\";\r\nimport LaravelService from \"../../../../services/laravelService\";\r\n\r\nconst defaultButtons = [\r\n    [Markup.button.callback('👈 Назад', 'reenter')],\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\nconst defaultButtonsMenuOnly = [\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\nexport const enterHandler = async (ctx: MyContext) => {\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('Пропустить', 'notification_skip_name')],\r\n        [Markup.button.callback('Главное меню', 'mainmenu')],\r\n    ]);\r\n\r\n\r\n    ctx.scene.session.notificationForm = ctx.session.notificationForm\r\n\r\n    const message = fmt`Редактировать уведомление\r\n\r\n${bold('Текущее название уведомления: ')} ${code(ctx.session.notificationForm.name)}\r\n\r\nВведите новое название уведомления или нажмите пропустить\r\n`;\r\n\r\n    try {\r\n        await ctx.editMessageText(message, {\r\n            ...keyboard, // Spread the keyboard markup\r\n            link_preview_options: {\r\n                is_disabled: true\r\n            },\r\n        });\r\n        await ctx.answerCbQuery('Введите название уведомления');\r\n    } catch (error) {\r\n        logger.error('Error sending autobooking message:', error);\r\n        await ctx.reply(message, keyboard);\r\n    }\r\n\r\n    return ctx.wizard.next();\r\n}\r\n\r\nexport const promptForSum = async (ctx: MyContext) => {\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('Пропустить', 'notification_skip_sum')],\r\n        [Markup.button.callback('Главное меню', 'mainmenu')],\r\n    ]);\r\n\r\n    const message = fmt`Какая сумма для оплаты?\r\n\r\n${bold('Текущая сумма оплаты: ')} ${code(ctx.session.notificationForm.sum)}\r\n\r\nВведите новую сумму для оплаты или нажмите пропустить\r\n`;\r\n\r\n    try {\r\n        await ctx.editMessageText(message, {\r\n            ...keyboard, // Spread the keyboard markup\r\n            link_preview_options: {\r\n                is_disabled: true\r\n            },\r\n        });\r\n        await ctx.answerCbQuery('Введите сумму для оплаты');\r\n    } catch (error) {\r\n        logger.error('Error sending autobooking message:', error);\r\n        await ctx.reply(message, keyboard);\r\n    }\r\n\r\n    return ctx.wizard.next();\r\n}\r\n\r\nexport const promptForDateTime = async (ctx: MyContext) => {\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('Пропустить', 'notification_skip_date')],\r\n        [Markup.button.callback('Главное меню', 'mainmenu')],\r\n    ]);\r\n\r\n    const message = fmt`Введите дату и время уведомления в формате:\r\ndd.mm.yyyy hh:mm\r\n\r\n ${bold('Текущая дата и время: ')} ${code(ctx.session.notificationForm.dateTime)}\r\n \r\n Введите новую дату и время или нажмите пропустить\r\n`;\r\n\r\n    try {\r\n        await ctx.editMessageText(message, {\r\n            ...keyboard, // Spread the keyboard markup\r\n            link_preview_options: {\r\n                is_disabled: true\r\n            },\r\n        });\r\n        await ctx.answerCbQuery('Введите дату и время уведомления');\r\n    } catch (error) {\r\n        logger.error('Error sending autobooking message:', error);\r\n        await ctx.reply(message, keyboard);\r\n    }\r\n\r\n    return ctx.wizard.next();\r\n}\r\n\r\nexport const promptForNotificationType = async (ctx: MyContext) => {\r\n    //keyboard one time or constant notification\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('Пропустить', 'notification_skip_type')],\r\n        [Markup.button.callback('Одноразовое уведомление', 'notification_one_time')],\r\n        [Markup.button.callback('Постоянное уведомление', 'notification_constant')],\r\n        [Markup.button.callback('Главное меню', 'mainmenu')],\r\n    ]);\r\n\r\n    const message = fmt`Уведомление разовое или постоянное?\r\n    \r\n    ${bold('Текущий тип уведомления: ')} ${code(ctx.session.notificationForm.type)}\r\n    \r\n    Выберите тип уведомления или нажмите пропустить\r\n    `;\r\n\r\n    try {\r\n        await ctx.editMessageText(message, {\r\n            ...keyboard, // Spread the keyboard markup\r\n            link_preview_options: {\r\n                is_disabled: true\r\n            },\r\n        });\r\n        await ctx.answerCbQuery('Выберите тип уведомления');\r\n    } catch (error) {\r\n        logger.error('Error sending autobooking message:', error);\r\n        await ctx.reply(message, keyboard);\r\n    }\r\n\r\n    return ctx.wizard.next();\r\n}\r\n\r\nexport const sendSuccessMessage = async (ctx: MyContext) => {\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('Все уведомления', 'active_notifications')],\r\n        [Markup.button.callback('Главное меню', 'mainmenu')],\r\n    ]);\r\n\r\n    const message = fmt`Уведомление обновлено: \r\n${code('Название уведомления')}: ${ctx.scene.session.notificationForm.name}\r\n${code('Сумма для оплаты')}: ${ctx.scene.session.notificationForm.sum}\r\n${code('Дата и время уведомления')}: ${ctx.scene.session.notificationForm.dateTime}\r\n${code('Тип уведомления')}: ${ctx.scene.session.notificationForm.type}`;\r\n\r\n    try {\r\n        await LaravelService.updateNotificationById(ctx.session.notificationForm.id, ctx.scene.session.notificationForm);\r\n    } catch (error) {\r\n        logger.error('Error creating notification:', error);\r\n        await ctx.reply('Произошла ошибка при создании уведомления. Пожалуйста, попробуйте позже.', Markup.inlineKeyboard(defaultButtonsMenuOnly));\r\n    }\r\n\r\n    try {\r\n        await ctx.editMessageText(message, {\r\n            ...keyboard, // Spread the keyboard markup\r\n            link_preview_options: {\r\n                is_disabled: true\r\n            },\r\n        });\r\n        await ctx.answerCbQuery('Уведомление создано');\r\n    } catch (error) {\r\n        logger.error('Error sending autobooking message:', error);\r\n        await ctx.reply(message, keyboard);\r\n    }\r\n\r\n}","import {Composer, Markup, Scenes} from 'telegraf';\r\nimport {MyContext} from '../../../types/MyContext';\r\n\r\nimport {\r\n    enterHandler,\r\n    promptForDateTime,\r\n    promptForNotificationType,\r\n    promptForSum,\r\n    sendSuccessMessage\r\n} from \"./editNotificationActions\";\r\n\r\nconst noKeyboard = [\r\n    [Markup.button.callback('👈 Назад', 'reenter')],\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\nconst handleNameInput = new Composer<MyContext>();\r\n\r\nhandleNameInput.on('text', async (ctx) => {\r\n    const name = ctx.message.text;\r\n    ctx.scene.session.notificationForm.name = name;\r\n\r\n    await promptForSum(ctx);\r\n});\r\n\r\nconst handleSumInput = new Composer<MyContext>();\r\n\r\nhandleSumInput.on('text', async (ctx) => {\r\n    const sum = ctx.message.text;\r\n    ctx.scene.session.notificationForm.sum = sum;\r\n    await promptForDateTime(ctx);\r\n});\r\n\r\n\r\n//notification_skip_name\r\nhandleNameInput.action('notification_skip_name', async (ctx) => {\r\n    await promptForSum(ctx);\r\n});\r\n\r\nhandleSumInput.action('notification_skip_sum', async (ctx) => {\r\n    await promptForDateTime(ctx);\r\n});\r\n\r\n\r\n\r\n\r\n\r\nconst handleDateTimeInput = new Composer<MyContext>();\r\nhandleDateTimeInput.on('text', async (ctx) => {\r\n    ctx.scene.session.notificationForm.dateTime = ctx.message.text;\r\n    await promptForNotificationType(ctx);\r\n});\r\n\r\n//notification_skip_date\r\nhandleDateTimeInput.action('notification_skip_date', async (ctx) => {\r\n    await promptForNotificationType(ctx);\r\n});\r\n\r\n\r\n\r\nconst handleNotificationTypeInput = new Composer<MyContext>();\r\nhandleNotificationTypeInput.action('notification_one_time', async (ctx) => {\r\n    ctx.scene.session.notificationForm.type = 'one_time';\r\n    await sendSuccessMessage(ctx);\r\n});\r\n\r\n//notification_skip_type\r\nhandleNotificationTypeInput.action('notification_skip_type', async (ctx) => {\r\n    await sendSuccessMessage(ctx);\r\n});\r\n\r\n\r\nhandleNotificationTypeInput.action('notification_constant', async (ctx) => {\r\n    ctx.scene.session.notificationForm.type = 'constant';\r\n    await sendSuccessMessage(ctx);\r\n});\r\n\r\nexport const editNotificationScene = new Scenes.WizardScene<MyContext>(\r\n    'edit_notification',\r\n    // Step 1: Prompt to enter name\r\n    async (ctx) => {\r\n        ctx.scene.session.notificationForm = {\r\n            name: null,\r\n            sum: null,\r\n            dateTime: null,\r\n            type: null,\r\n        }\r\n       await enterHandler(ctx);\r\n    },\r\n    // Step 2: Save name and prompt to enter sum\r\n    handleNameInput,\r\n    // Step 3: Save sum and prompt to enter date\r\n    handleSumInput,\r\n    // Step 4: Save date and prompt to enter type\r\n    handleDateTimeInput,\r\n    // Step 5: Save type and sucecss\r\n    handleNotificationTypeInput,\r\n);\r\n\r\neditNotificationScene.command('start', async (ctx) => {\r\n    await ctx.scene.enter('main');\r\n});\r\neditNotificationScene.action('mainmenu', async (ctx) => {\r\n    await ctx.scene.enter('main');\r\n});\r\n","import {Markup} from \"telegraf\";\r\nimport {MyContext} from \"../../../types/MyContext\";\r\nimport {fmt} from \"telegraf/format\";\r\nimport logger from \"../../../../utils/logger/loggerTelegram\";\r\n\r\nconst defaultButtons = [\r\n    [Markup.button.callback('👈 Назад', 'reenter')],\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\nconst defaultButtonsMenuOnly = [\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\nexport const enterHandler = async (ctx: MyContext) => {\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('Создать уведомление', 'create_notification')],\r\n        [Markup.button.callback('Активные уведомления', 'active_notifications')],\r\n        [Markup.button.callback('Главное меню', 'mainmenu')],\r\n    ]);\r\n\r\n    const message = fmt`что хотите сделать?`\r\n\r\n    try {\r\n        await ctx.editMessageText(message, {\r\n            ...keyboard, // Spread the keyboard markup\r\n            link_preview_options: {\r\n                is_disabled: true\r\n            },\r\n        });\r\n        await ctx.answerCbQuery('Уведомления');\r\n    } catch (error) {\r\n        logger.error('Error sending autobooking message:', error);\r\n        await ctx.reply(message, keyboard);\r\n    }\r\n}\r\n\r\nexport const notificationListHandler = async (ctx: MyContext) => {\r\n\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('👈 Назад', 'reenter')],\r\n        [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n    ]);\r\n\r\n    const message = fmt`Активные уведомления:`\r\n\r\n\r\n    try {\r\n        await ctx.editMessageText(message, {\r\n            ...keyboard, // Spread the keyboard markup\r\n            link_preview_options: {\r\n                is_disabled: true\r\n            },\r\n        });\r\n        await ctx.answerCbQuery('Активные уведомления');\r\n    } catch (error) {\r\n        logger.error('Error sending notification list message:', error);\r\n        await ctx.reply(message, keyboard);\r\n    }\r\n}","import { Scenes, Markup } from 'telegraf';\r\nimport { MyContext } from '../../../types/MyContext';\r\nimport logger from '../../../../utils/logger/loggerTelegram';\r\nimport laravelService from '../../../../services/laravelService';\r\nimport { bold, fmt } from \"telegraf/format\";\r\n\r\nexport const notificationsListScene = new Scenes.BaseScene<MyContext>('active_notifications');\r\n\r\n// Since type is always 'notifications', no need for type mapping\r\nconst listNotifications = async (ctx: MyContext) => {\r\n    // Initialize page number in session if not set\r\n    if (!ctx.session.searchRequestsPage) {\r\n        ctx.session.searchRequestsPage = 1;\r\n    }\r\n\r\n    logger.info('Entered searchRequestsScene', { session: ctx.scene.session });\r\n\r\n    const currentPage = ctx.session.searchRequestsPage;\r\n    const perPage = 1; // Adjust as needed\r\n\r\n    const typeText = 'уведомлений'; // Since type is always 'notifications'\r\n\r\n    const messageTextHeader = `🫡 Список активных заявок на ${typeText} (Страница ${currentPage})`;\r\n\r\n    try {\r\n        // Fetch paginated notifications\r\n        const paginatedNotifications = await laravelService.getNotificationsByTelegramId(\r\n            ctx.from.id,\r\n            currentPage,\r\n            perPage,\r\n            'notification' // Fixed type\r\n        );\r\n\r\n        console.log('paginatedNotifications:', paginatedNotifications);\r\n\r\n        if (!paginatedNotifications || paginatedNotifications.data.length === 0) {\r\n            const noNotificationsText = `📭 У вас нет активных ${typeText}.`;\r\n            const noKeyboard = Markup.inlineKeyboard([\r\n                [Markup.button.callback('👈 Назад', 'reenter')],\r\n                [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n            ]);\r\n\r\n            if (ctx.callbackQuery && ctx.callbackQuery.message) {\r\n                await ctx.editMessageText(noNotificationsText, noKeyboard);\r\n            } else {\r\n                await ctx.reply(noNotificationsText, noKeyboard);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        let notification;\r\n        try {\r\n            notification = paginatedNotifications.data[0];\r\n        }\r\n        catch (error) {\r\n            logger.error('Error getting notifications:', error);\r\n            await ctx.answerCbQuery('Произошла ошибка [0]', {\r\n                show_alert: true,\r\n            });\r\n            return;\r\n        }\r\n\r\n        const name = notification.settings.name;\r\n        const sum = notification.settings.sum;\r\n        const dateTime = notification.settings.dateTime;\r\n        const notificationType = notification.settings.type;\r\n\r\n        // Assuming 'status' field exists\r\n        const statusText = notification.status === 'started'\r\n            ? 'ищем'\r\n            : (notification.status === 'finished' ? 'нашли' : 'вышло время');\r\n\r\n        // Format the notification message\r\n        const messageText = fmt`\r\n🫡 ${bold`Список активных ${typeText}`}\r\n\r\n${bold`Название:`} ${name}\r\n${bold`Сумма:`} ${sum}\r\n${bold`Время:`} ${dateTime}\r\n${bold`Тип:`} ${notificationType}\r\n${bold`Статус:`} ${statusText}\r\n\r\nСтраница: ${currentPage} из ${paginatedNotifications.last_page}\r\n        `;\r\n\r\n        // Build pagination buttons\r\n        const buttons = [];\r\n\r\n        const buttonsPagination = [];\r\n\r\n        if (paginatedNotifications.prev_page_url) {\r\n            buttonsPagination.push(Markup.button.callback('⬅️', 'notifications_prev'));\r\n        }\r\n\r\n        if (paginatedNotifications.next_page_url) {\r\n            buttonsPagination.push(Markup.button.callback('➡️', 'notifications_next'));\r\n        }\r\n\r\n        const buttonDelete = Markup.button.callback('❌ Удалить', `delete_${notification.id}`);\r\n\r\n        const buttonEdit = Markup.button.callback('✏️ Редактировать', `edit_${notification.id}`);\r\n\r\n        buttons.push([buttonDelete]);\r\n        buttons.push([buttonEdit]);\r\n        if (buttonsPagination.length > 0) {\r\n            buttons.push(buttonsPagination);\r\n        }\r\n\r\n        // Always show 'Main Menu' and 'Back' buttons\r\n        buttons.push([\r\n            Markup.button.callback('👈 Назад', 'reenter'),\r\n            Markup.button.callback('👌 Главное меню', 'mainmenu'),\r\n        ]);\r\n\r\n        const keyboard = Markup.inlineKeyboard(buttons, { columns: 2 }); // Adjust columns as per button arrangement\r\n\r\n        ctx.session.notifications = paginatedNotifications.data;\r\n\r\n        if (ctx.callbackQuery && ctx.callbackQuery.message) {\r\n            try {\r\n                // Edit existing message if interaction is from a callback query\r\n                await ctx.editMessageText(messageText, {\r\n                    ...keyboard,\r\n                    parse_mode: 'Markdown', // Ensure message formatting matches parse mode\r\n                });\r\n            } catch (error) {\r\n                logger.error('Error sending notifications message:', error);\r\n                await ctx.reply(messageText, {\r\n                    ...keyboard,\r\n                    parse_mode: 'Markdown',\r\n                });\r\n            }\r\n        } else {\r\n            // Otherwise, send a new message\r\n            await ctx.reply(messageText, {\r\n                ...keyboard,\r\n                parse_mode: 'Markdown',\r\n            });\r\n        }\r\n    } catch (error) {\r\n        logger.error('Error getting notifications:', error);\r\n\r\n    }\r\n}\r\n\r\nnotificationsListScene.enter(async (ctx: MyContext) => {\r\n    // Since there's only one type, no need to ask user to select type\r\n    await listNotifications(ctx);\r\n});\r\n\r\nconst listNotificationsAction = async (ctx: MyContext) => {\r\n    await listNotifications(ctx);\r\n}\r\n\r\nnotificationsListScene.action('notifications_next', async (ctx: MyContext) => {\r\n    if (ctx.session.searchRequestsPage) {\r\n        logger.info('Incrementing page number');\r\n        ctx.session.searchRequestsPage += 1;\r\n\r\n        await listNotificationsAction(ctx);\r\n    } else {\r\n        logger.warn('Page number not set');\r\n        // If for some reason the page isn't set, reset to page 1\r\n        ctx.session.searchRequestsPage = 1;\r\n        await ctx.scene.reenter();\r\n    }\r\n});\r\n\r\n// Handle 'Previous' button callback\r\nnotificationsListScene.action('notifications_prev', async (ctx: MyContext) => {\r\n    if (ctx.session.searchRequestsPage && ctx.session.searchRequestsPage > 1) {\r\n        ctx.session.searchRequestsPage -= 1;\r\n\r\n        await listNotificationsAction(ctx);\r\n    } else {\r\n        await ctx.answerCbQuery('Вы уже на первой странице.', { show_alert: true });\r\n    }\r\n});\r\n\r\nnotificationsListScene.action(/delete_(.*)/, async (ctx) => {\r\n    const notificationId = ctx.match[1];\r\n    try {\r\n        await laravelService.deleteNotification(notificationId);\r\n        await ctx.answerCbQuery('Заявка удалена', { show_alert: true });\r\n        await ctx.scene.reenter();\r\n    } catch (error) {\r\n        logger.error('Error deleting notification:', error);\r\n        await ctx.answerCbQuery('Произошла ошибка при удалении заявки.', { show_alert: true });\r\n    }\r\n});\r\n\r\nnotificationsListScene.action(/edit_(.*)/, async (ctx) => {\r\n    const notificationId = ctx.match[1];\r\n    ctx.session.notificationId = notificationId;\r\n    console.log('notificationId:', notificationId);\r\n    console.log('ctx.session.notifications:', ctx.session.notifications);\r\n\r\n    console.log('ctx.session.notifications.find((n: any) => n.id == notificationId):', ctx.session.notifications.find((n: any) => n.id == notificationId).settings.name);\r\n    ctx.session.notificationForm = {\r\n        id: notificationId,\r\n        name: ctx.session.notifications.find((n: any) => n.id == notificationId).settings.name,\r\n        sum: ctx.session.notifications.find((n: any) => n.id == notificationId).settings.sum,\r\n        dateTime: ctx.session.notifications.find((n: any) => n.id == notificationId).settings.dateTime,\r\n        type: ctx.session.notifications.find((n: any) => n.id == notificationId).settings.type,\r\n    }\r\n    await ctx.scene.enter('edit_notification');\r\n});\r\n\r\nnotificationsListScene.action('reenter', async (ctx: MyContext) => {\r\n    await ctx.scene.reenter();\r\n});\r\n\r\n\r\nexport default notificationsListScene;\r\n","import { Scenes, Markup } from 'telegraf';\r\nimport { MyContext } from '../../../types/MyContext';\r\n\r\nimport {enterHandler, notificationListHandler} from \"./notificationActions\";\r\nimport {fmt} from \"telegraf/format\";\r\nimport logger from \"../../../../utils/logger/loggerTelegram\";\r\nimport cabinetWizzard from \"../createCabinetScene\";\r\n\r\n\r\nexport const notifictationsScene = new Scenes.BaseScene<MyContext>('notifications');\r\n\r\n// Define the enter handler\r\nnotifictationsScene.enter(async (ctx: MyContext) => {\r\n    await enterHandler(ctx);\r\n});\r\n\r\n\r\nconst noKeyboard = [\r\n    [Markup.button.callback('👈 Назад', 'reenter')],\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\n\r\nnotifictationsScene.command('start', async (ctx) => {\r\n    await ctx.scene.enter('main');\r\n});\r\nnotifictationsScene.action('mainmenu', async (ctx) => {\r\n    await ctx.scene.enter('main');\r\n});\r\n\r\nnotifictationsScene.action('create_notification', async (ctx) => {\r\n    await ctx.scene.enter('create_notification');\r\n});\r\n\r\nnotifictationsScene.action('active_notifications', async (ctx) => {\r\n    await ctx.scene.enter('active_notifications');\r\n});","import {Markup} from \"telegraf\";\r\nimport {MyContext} from \"../../../types/MyContext\";\r\n\r\nconst defaultButtons = [\r\n    [Markup.button.callback('👈 Назад', 'reenter')],\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\nconst defaultButtonsMenuOnly = [\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\nexport const enterHandler = async (ctx: MyContext) => {\r\n    const messageText = `Тут будет расчет зп`;\r\n\r\n    const buttonsArray = Markup.inlineKeyboard([...defaultButtonsMenuOnly]);\r\n\r\n    if (ctx.callbackQuery && ctx.callbackQuery.message) {\r\n        try {\r\n            // If the interaction is from a callback query, edit the existing message\r\n            await ctx.editMessageText(messageText, buttonsArray);\r\n        }\r\n        catch (error) {\r\n            await ctx.reply(messageText, buttonsArray);\r\n        }\r\n    } else {\r\n        await ctx.reply(messageText, buttonsArray);\r\n    }\r\n}","import { Scenes, Markup } from 'telegraf';\r\nimport { MyContext } from '../../../types/MyContext';\r\n\r\nimport {enterHandler} from \"./salaryActions\";\r\n\r\nexport const salaryScene = new Scenes.BaseScene<MyContext>('salary');\r\n\r\nconst noKeyboard = [\r\n    [Markup.button.callback('👈 Назад', 'reenter')],\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\n// Define the enter handler\r\nsalaryScene.enter(async (ctx: MyContext) => {\r\n    await enterHandler(ctx);\r\n});\r\n\r\nsalaryScene.action('reenter', async (ctx: MyContext) => {\r\n    await ctx.scene.reenter();\r\n});","import {Markup} from \"telegraf\";\r\nimport {MyContext} from \"../../../types/MyContext\";\r\nimport LaravelService from \"../../../../services/laravelService\";\r\nimport logger from \"../../../../utils/logger/loggerTelegram\";\r\n\r\nconst defaultButtons = [\r\n    [Markup.button.callback('👈 Назад', 'reenter')],\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\nconst defaultButtonsMenuOnly = [\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\nexport const enterHandler = async (ctx: MyContext) => {\r\n\r\n    const page = ctx.session.page || 1; // Store page in session for navigation\r\n    const perPage = 10; // Adjust perPage if needed\r\n\r\n    try {\r\n        const productData = await LaravelService.getUsersByTelegramId(ctx.from.id, page, perPage);\r\n\r\n        console.log('productData', productData);\r\n\r\n        if (!productData || productData.tasks.length === 0) {\r\n            await ctx.reply('Нет доступных сотрудников', Markup.inlineKeyboard([\r\n                [Markup.button.callback('Главное меню', 'mainmenu')]\r\n            ]));\r\n            return ctx.wizard.next();\r\n        }\r\n\r\n        const { tasks, currentPage, totalPages } = productData;\r\n\r\n\r\n        // Generate buttons for products\r\n        const buttons = tasks.map(task => {\r\n            return [\r\n                Markup.button.callback(task.name, `user_${task.id}`)\r\n            ]\r\n        });\r\n\r\n        // Add navigation buttons\r\n        const navigationButtons = [];\r\n        if (currentPage > 1) {\r\n            navigationButtons.push(Markup.button.callback('← Назад', `tasks_page_${currentPage - 1}`));\r\n        }\r\n        if (currentPage < totalPages) {\r\n            navigationButtons.push(Markup.button.callback('Вперед →', `tasks_page_${currentPage + 1}`));\r\n        }\r\n        if (navigationButtons.length) {\r\n            buttons.push(navigationButtons);\r\n        }\r\n\r\n        buttons.push(...defaultButtonsMenuOnly);\r\n\r\n        const message = `[управление персоналом]\r\nВ этом блоке вы можете увидеть всех мастеров\r\n\r\n[списком в кнопках выводи карточки персонала]`;\r\n        const keyboard = Markup.inlineKeyboard(buttons);\r\n\r\n        try {\r\n            await ctx.editMessageText(message, {\r\n                ...keyboard, // Spread the keyboard markup\r\n                link_preview_options: {\r\n                    is_disabled: true\r\n                },\r\n            });\r\n            await ctx.answerCbQuery('Персонал');\r\n        } catch (error) {\r\n            logger.error('Error sending autobooking message:', error);\r\n            await ctx.reply(message, keyboard);\r\n        }\r\n\r\n        await ctx.answerCbQuery();\r\n    } catch (error) {\r\n        logger.error('Error fetching products:', error);\r\n        await ctx.reply('Произошла ошибка при загрузке персонала', Markup.inlineKeyboard([\r\n            [Markup.button.callback('Главное меню', 'mainmenu')]\r\n        ]));\r\n    }\r\n}\r\n\r\nexport const userBlockHandler = async (ctx: MyContext) => {\r\n    const user_id = ctx.scene.session.user_id;\r\n    const userOne = await LaravelService.getUserById(ctx.from.id, user_id);\r\n    const user = userOne[0];\r\n    const message = `[карточка персонала]\r\n    \r\nИмя: ${user.name}\r\nТелефон: ${user.phone}\r\nEmail: ${user.email}\r\n`;\r\n\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('👈 Назад', 'reenter')],\r\n        [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n    ]);\r\n\r\n    try {\r\n        await ctx.editMessageText(message, {\r\n            ...keyboard, // Spread the keyboard markup\r\n            link_preview_options: {\r\n                is_disabled: true\r\n            },\r\n        });\r\n        await ctx.answerCbQuery('Персонал');\r\n    } catch (error) {\r\n        logger.error('Error sending autobooking message:', error);\r\n        await ctx.reply(message, keyboard);\r\n    }\r\n}","import { Scenes, Markup } from 'telegraf';\r\nimport { MyContext } from '../../../types/MyContext';\r\n\r\nimport {enterHandler, userBlockHandler} from \"./staffActions\";\r\nimport {taskBlockHandler} from \"../tasks/tasksActions\";\r\nimport {tasksScene} from \"../tasks/tasksScene\";\r\n\r\nexport const staffScene = new Scenes.BaseScene<MyContext>('staff');\r\n\r\nconst noKeyboard = [\r\n    [Markup.button.callback('👈 Назад', 'reenter')],\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\n// Define the enter handler\r\nstaffScene.enter(async (ctx: MyContext) => {\r\n    await enterHandler(ctx);\r\n});\r\n\r\nstaffScene.action('reenter', async (ctx: MyContext) => {\r\n    await ctx.scene.reenter();\r\n});\r\n\r\nstaffScene.action(/^user_(\\d+)$/, async (ctx) => {\r\n    const user_id = parseInt(ctx.match[1], 10);\r\n    ctx.scene.session.user_id = user_id;\r\n    return userBlockHandler(ctx);\r\n});","import {Markup} from \"telegraf\";\r\nimport {MyContext} from \"../../../types/MyContext\";\r\nimport LaravelService from \"../../../../services/laravelService\";\r\nimport logger from \"../../../../utils/logger/loggerTelegram\";\r\nimport {code, fmt} from \"telegraf/format\";\r\n\r\nconst defaultButtons = [\r\n    [Markup.button.callback('👈 Назад', 'reenter')],\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\nconst defaultButtonsMenuOnly = [\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\nexport const enterHandler = async (ctx: MyContext) => {\r\n\r\n    const page = ctx.session.page || 1; // Store page in session for navigation\r\n    const perPage = 10; // Adjust perPage if needed\r\n\r\n    try {\r\n        const productData = await LaravelService.getTaskByTelegramId(ctx.from.id, page, perPage);\r\n\r\n        console.log('productData', productData);\r\n\r\n        if (!productData || productData.tasks.length === 0) {\r\n            await ctx.reply('Нет доступных товаров.', Markup.inlineKeyboard([\r\n                [Markup.button.callback('Главное меню', 'mainmenu')]\r\n            ]));\r\n            return ctx.wizard.next();\r\n        }\r\n\r\n        const { tasks, currentPage, totalPages } = productData;\r\n\r\n\r\n        // Generate buttons for products\r\n        const buttons = tasks.map(task => {\r\n            const statusEmoji = task.status == 'open' ? '🟡' : '🟢';\r\n            return [\r\n            Markup.button.callback(statusEmoji + ' ' + task.name, `task_${task.id}`)\r\n        ]\r\n        });\r\n\r\n        // Add navigation buttons\r\n        const navigationButtons = [];\r\n        if (currentPage > 1) {\r\n            navigationButtons.push(Markup.button.callback('← Назад', `tasks_page_${currentPage - 1}`));\r\n        }\r\n        if (currentPage < totalPages) {\r\n            navigationButtons.push(Markup.button.callback('Вперед →', `tasks_page_${currentPage + 1}`));\r\n        }\r\n        if (navigationButtons.length) {\r\n            buttons.push(navigationButtons);\r\n        }\r\n\r\n        buttons.push(...defaultButtonsMenuOnly);\r\n\r\n        const message = `[задачи]\r\n\r\nВ этом блоке будут все задачи\r\n\r\n[списком в кнопках выводи задачи]`;\r\n        const keyboard = Markup.inlineKeyboard(buttons);\r\n\r\n        try {\r\n            await ctx.editMessageText(message, {\r\n                ...keyboard, // Spread the keyboard markup\r\n                link_preview_options: {\r\n                    is_disabled: true\r\n                },\r\n            });\r\n            await ctx.answerCbQuery('Введите сумму для оплаты');\r\n        } catch (error) {\r\n            logger.error('Error sending autobooking message:', error);\r\n            await ctx.reply(message, keyboard);\r\n        }\r\n\r\n        await ctx.answerCbQuery();\r\n    } catch (error) {\r\n        logger.error('Error fetching products:', error);\r\n        await ctx.reply('Произошла ошибка при загрузке товаров.', Markup.inlineKeyboard([\r\n            [Markup.button.callback('Главное меню', 'mainmenu')]\r\n        ]));\r\n    }\r\n}\r\n\r\nexport const taskBlockHandler = async (ctx: MyContext) => {\r\n    const task_id = ctx.scene.session.task_id;\r\n\r\n    try {\r\n        const tasks = await LaravelService.getTaskById(ctx.from.id, task_id);\r\n        const task = tasks[0];\r\n        const message = fmt`\r\n        [задача]\r\nНазвание: ${code(task.name)}\r\nОписание: ${code(task.description)}\r\nОписание: ${code(task.description)}\r\nНомер задачи: ${code(task.task_number)}\r\nОтветственный: ${code(task.responsible)}\r\nСрок: ${code(task.deadline)}\r\nДата назначения: ${code(task.assigned_date)}\r\nСтатус: ${code(task.status)}\r\n`;\r\n        const keyboard = Markup.inlineKeyboard([\r\n            [Markup.button.callback('Закрыть задачу', 'close_task')],\r\n            [Markup.button.callback('👈 Назад', 'reenter')],\r\n            [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n        ]);\r\n\r\n        try {\r\n            await ctx.editMessageText(message, {\r\n                ...keyboard, // Spread the keyboard markup\r\n                link_preview_options: {\r\n                    is_disabled: true\r\n                },\r\n            });\r\n            await ctx.answerCbQuery('Загрузка товаров');\r\n        } catch (error) {\r\n            logger.error('Error sending autobooking message:', error);\r\n            await ctx.reply(message, keyboard);\r\n        }\r\n\r\n    } catch (error) {\r\n        logger.error('Error fetching products:', error);\r\n        await ctx.reply('Произошла ошибка при загрузке задач', Markup.inlineKeyboard([\r\n            [Markup.button.callback('Главное меню', 'mainmenu')]\r\n        ]));\r\n    }\r\n}","import { Scenes, Markup } from 'telegraf';\r\nimport { MyContext } from '../../../types/MyContext';\r\n\r\nimport {enterHandler, taskBlockHandler} from \"./tasksActions\";\r\nimport {createNotifictationScene} from \"../warehouse/createNotificationScene\";\r\nimport laravelService from \"../../../../services/laravelService\";\r\n\r\nexport const tasksScene = new Scenes.BaseScene<MyContext>('tasks');\r\n\r\nconst noKeyboard = [\r\n    [Markup.button.callback('👈 Назад', 'reenter')],\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\n// Define the enter handler\r\ntasksScene.enter(async (ctx: MyContext) => {\r\n    await enterHandler(ctx);\r\n});\r\n\r\ntasksScene.action('reenter', async (ctx: MyContext) => {\r\n    await ctx.scene.reenter();\r\n});\r\n\r\ntasksScene.action(/^products_page_(\\d+)$/, async (ctx) => {\r\n    const page = parseInt(ctx.match[1], 10);\r\n    ctx.session.page = page;\r\n    return enterHandler(ctx); // Reload the handler with the new page\r\n});\r\n\r\n//task_(*\r\ntasksScene.action(/^task_(\\d+)$/, async (ctx) => {\r\n    const task_id = parseInt(ctx.match[1], 10);\r\n    ctx.scene.session.task_id = task_id;\r\n    return taskBlockHandler(ctx);\r\n});\r\n\r\ntasksScene.action('close_task', async (ctx) => {\r\n    const task_id = ctx.scene.session.task_id;\r\n\r\n    laravelService.closeTask(task_id, ctx.from.id);\r\n    // Close the task\r\n    await ctx.reply('Задача закрыта');\r\n});","import {Markup} from \"telegraf\";\r\nimport {MyContext} from \"../../../types/MyContext\";\r\nimport {code, fmt} from \"telegraf/format\";\r\nimport logger from \"../../../../utils/logger/loggerTelegram\";\r\nimport LaravelService from \"../../../../services/laravelService\";\r\n\r\nconst defaultButtons = [\r\n    [Markup.button.callback('👈 Назад', 'reenter')],\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\nconst defaultButtonsMenuOnly = [\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\nexport const enterHandler = async (ctx: MyContext) => {\r\n    const page = ctx.session.page || 1; // Store page in session for navigation\r\n    const perPage = 10; // Adjust perPage if needed\r\n\r\n    ctx.scene.session.notificationForm.product_id = null;\r\n    ctx.scene.session.notificationForm.product_name = null;\r\n    ctx.scene.session.notificationForm.sum = null;\r\n    ctx.scene.session.notificationForm.type = null;\r\n\r\n    try {\r\n        const productData = await LaravelService.getProductsByTelegramId(ctx.from.id, page, perPage);\r\n\r\n        if (!productData || productData.products.length === 0) {\r\n            await ctx.reply('Нет доступных товаров.', Markup.inlineKeyboard([\r\n                [Markup.button.callback('Главное меню', 'mainmenu')]\r\n            ]));\r\n            return ctx.wizard.next();\r\n        }\r\n\r\n        const { products, currentPage, totalPages } = productData;\r\n\r\n        // Generate buttons for products\r\n        const buttons = products.map(product => [\r\n            Markup.button.callback(product.title, `warehouse_product_${product.good_id}`)\r\n        ]);\r\n\r\n        // Add navigation buttons\r\n        const navigationButtons = [];\r\n        if (currentPage > 1) {\r\n            navigationButtons.push(Markup.button.callback('← Назад', `products_page_${currentPage - 1}`));\r\n        }\r\n        if (currentPage < totalPages) {\r\n            navigationButtons.push(Markup.button.callback('Вперед →', `products_page_${currentPage + 1}`));\r\n        }\r\n        if (navigationButtons.length) {\r\n            buttons.push(navigationButtons);\r\n        }\r\n\r\n        buttons.push(...defaultButtonsMenuOnly);\r\n\r\n        const message = 'Выберите товар, для которого нужно отслеживать остаток:';\r\n        const keyboard = Markup.inlineKeyboard(buttons);\r\n\r\n        try {\r\n            await ctx.editMessageText(message, {\r\n                ...keyboard, // Spread the keyboard markup\r\n                link_preview_options: {\r\n                    is_disabled: true\r\n                },\r\n            });\r\n            await ctx.answerCbQuery('Введите сумму для оплаты');\r\n        } catch (error) {\r\n            logger.error('Error sending autobooking message:', error);\r\n            await ctx.reply(message, keyboard);\r\n        }\r\n\r\n        await ctx.answerCbQuery();\r\n    } catch (error) {\r\n        logger.error('Error fetching products:', error);\r\n        await ctx.reply('Произошла ошибка при загрузке товаров.', Markup.inlineKeyboard([\r\n            [Markup.button.callback('Главное меню', 'mainmenu')]\r\n        ]));\r\n    }\r\n\r\n};\r\n\r\n\r\nexport const promptForSum = async (ctx: MyContext) => {\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('Назад', 'warehouse_notification')],\r\n    ]);\r\n\r\n    const product_name = ctx.scene.session.notificationForm.product_name;\r\n    const message = fmt`Введите минимальное количество для товара ${code(product_name)}`;\r\n\r\n    try {\r\n        await ctx.editMessageText(message, {\r\n            ...keyboard, // Spread the keyboard markup\r\n            link_preview_options: {\r\n                is_disabled: true\r\n            },\r\n        });\r\n        await ctx.answerCbQuery('Минимальное количество для товара');\r\n    } catch (error) {\r\n        logger.error('Error sending autobooking message:', error);\r\n        await ctx.reply(message, keyboard);\r\n    }\r\n\r\n    return ctx.wizard.next();\r\n}\r\n\r\nexport const promptForDateTime = async (ctx: MyContext) => {\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('Главное меню', 'mainmenu')],\r\n    ]);\r\n\r\n    const message = fmt`Введите дату и время уведомления в формате:\r\ndd.mm.yyyy hh:mm`;\r\n\r\n    try {\r\n        await ctx.editMessageText(message, {\r\n            ...keyboard, // Spread the keyboard markup\r\n            link_preview_options: {\r\n                is_disabled: true\r\n            },\r\n        });\r\n        await ctx.answerCbQuery('Введите дату и время уведомления');\r\n    } catch (error) {\r\n        logger.error('Error sending autobooking message:', error);\r\n        await ctx.reply(message, keyboard);\r\n    }\r\n\r\n    return ctx.wizard.next();\r\n}\r\n\r\nexport const promptForNotificationType = async (ctx: MyContext) => {\r\n    //keyboard one time or constant notification\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('Одноразовое уведомление', 'notification_one_time')],\r\n        [Markup.button.callback('Постоянное уведомление', 'notification_constant')],\r\n        [Markup.button.callback('Главное меню', 'mainmenu')],\r\n    ]);\r\n\r\n    const message = fmt`Уведомление разовое или постоянное?`;\r\n\r\n    try {\r\n        await ctx.editMessageText(message, {\r\n            ...keyboard, // Spread the keyboard markup\r\n            link_preview_options: {\r\n                is_disabled: true\r\n            },\r\n        });\r\n        await ctx.answerCbQuery('Выберите тип уведомления');\r\n    } catch (error) {\r\n        logger.error('Error sending autobooking message:', error);\r\n        await ctx.reply(message, keyboard);\r\n    }\r\n\r\n    return ctx.wizard.next();\r\n}\r\n\r\nexport const sendSuccessMessage = async (ctx: MyContext) => {\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('Создать еще', 'create_notification')],\r\n        [Markup.button.callback('Все уведомления', 'active_notifications')],\r\n        [Markup.button.callback('Главное меню', 'mainmenu')],\r\n    ]);\r\n\r\n    const message = fmt`\r\n    Вы установили минимальное количество для товара ${code(ctx.scene.session.notificationForm.product_name)} : ${code(ctx.scene.session.notificationForm.sum)}. \r\n\r\nКак только остаток товара достигнет этого количества, вы получите уведомление.\r\n`;\r\n\r\n    try {\r\n        await LaravelService.createNotificationByTelegramId(ctx.from.id, ctx.scene.session.notificationForm, 'product_balance');\r\n    } catch (error) {\r\n        logger.error('Error creating notification:', error);\r\n        await ctx.reply('Произошла ошибка при создании уведомления. Пожалуйста, попробуйте позже.', Markup.inlineKeyboard(defaultButtonsMenuOnly));\r\n    }\r\n\r\n    try {\r\n        await ctx.editMessageText(message, {\r\n            ...keyboard, // Spread the keyboard markup\r\n            link_preview_options: {\r\n                is_disabled: true\r\n            },\r\n        });\r\n        await ctx.answerCbQuery('Уведомление создано');\r\n    } catch (error) {\r\n        logger.error('Error sending autobooking message:', error);\r\n        await ctx.reply(message, keyboard);\r\n    }\r\n\r\n}","import {Composer, Markup, Scenes} from 'telegraf';\r\nimport {MyContext} from '../../../types/MyContext';\r\n\r\nimport {\r\n    enterHandler,\r\n    promptForSum,\r\n    sendSuccessMessage\r\n} from \"./createNotificationActions\";\r\nimport laravelService, {ProductsPaginatedResponse} from \"../../../../services/laravelService\";\r\n\r\nconst noKeyboard = [\r\n    [Markup.button.callback('👈 Назад', 'reenter')],\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\nconst handleSumInput = new Composer<MyContext>();\r\n\r\nhandleSumInput.on('text', async (ctx) => {\r\n    const sum = ctx.message.text;\r\n    ctx.scene.session.notificationForm.sum = sum;\r\n\r\n    console.log('ctx.scene.session.notificationForm', ctx.scene.session.notificationForm);\r\n    await sendSuccessMessage(ctx);\r\n});\r\n\r\nexport const createNotifictationScene = new Scenes.WizardScene<MyContext>(\r\n    'warehouse_create_notification',\r\n    // Step 1: Prompt to enter name\r\n    async (ctx) => {\r\n        ctx.scene.session.notificationForm = {\r\n            name: null,\r\n            sum: null,\r\n            dateTime: null,\r\n            type: null,\r\n        }\r\n       await enterHandler(ctx);\r\n    },\r\n    // Step 3: Save sum and prompt to enter date\r\n    handleSumInput,\r\n);\r\n\r\ncreateNotifictationScene.command('start', async (ctx) => {\r\n    await ctx.scene.enter('main');\r\n});\r\ncreateNotifictationScene.action('mainmenu', async (ctx) => {\r\n    await ctx.scene.enter('main');\r\n});\r\n\r\n\r\ncreateNotifictationScene.action(/^products_page_(\\d+)$/, async (ctx) => {\r\n    const page = parseInt(ctx.match[1], 10);\r\n    ctx.session.page = page;\r\n    return enterHandler(ctx); // Reload the handler with the new page\r\n});\r\n\r\n\r\ncreateNotifictationScene.action(/^warehouse_product_(\\d+)$/, async (ctx) => {\r\n    console.log('warehouse_product_');\r\n    const product_id = parseInt(ctx.match[1], 10);\r\n    console.log('product_id', product_id);\r\n    ctx.scene.session.notificationForm.product_id = product_id;\r\n    const products: ProductsPaginatedResponse = await laravelService.getProductsByTelegramId(ctx.from.id);\r\n\r\n    const product = products.allProducts.find(product => product.good_id === product_id);\r\n    ctx.scene.session.notificationForm.product_name = product.title;\r\n    await promptForSum(ctx);\r\n});\r\n","import {Markup} from \"telegraf\";\r\nimport {MyContext} from \"../../../types/MyContext\";\r\nimport {bold, code, fmt} from \"telegraf/format\";\r\nimport logger from \"../../../../utils/logger/loggerTelegram\";\r\nimport LaravelService from \"../../../../services/laravelService\";\r\nimport CacheService from \"../../../../utils/redis/Cache/Cache\";\r\n\r\nconst defaultButtons = [\r\n    [Markup.button.callback('👈 Назад', 'reenter')],\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\nconst defaultButtonsMenuOnly = [\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\nexport const enterHandler = async (ctx: MyContext) => {\r\n    const page = ctx.session.page || 1; // Store page in session for navigation\r\n    const perPage = 10; // Adjust perPage if needed\r\n\r\n    ctx.scene.session.notificationForm.product_id = null;\r\n    ctx.scene.session.notificationForm.product_name = null;\r\n    ctx.scene.session.notificationForm.sum = null;\r\n    ctx.scene.session.notificationForm.type = null;\r\n\r\n    try {\r\n        await CacheService.forgetByPattern(`notifications_product_balance_telegram_id_${ctx.from.id}_page_*`);\r\n        const notificationData = await LaravelService.getNotificationsByTelegramId(ctx.from.id, page, perPage, 'product_balance');\r\n\r\n        if (!notificationData || notificationData.data.length === 0) {\r\n            await ctx.reply('Нет доступных товаров.', Markup.inlineKeyboard([\r\n                [Markup.button.callback('Главное меню', 'mainmenu')]\r\n            ]));\r\n            return ctx.wizard.next();\r\n        }\r\n\r\n        const { data, current_page, last_page: total } = notificationData;\r\n\r\n        // Generate buttons for products\r\n        const buttons = data.map(notification => [\r\n            Markup.button.callback(notification.settings.product_name, `edit_warehouse_product_${notification.id}`)\r\n        ]);\r\n\r\n        // Add navigation buttons\r\n        const navigationButtons = [];\r\n        if (current_page > 1) {\r\n            navigationButtons.push(Markup.button.callback('← Назад', `edit_products_page_${current_page - 1}`));\r\n        }\r\n        if (current_page < total) {\r\n            navigationButtons.push(Markup.button.callback('Вперед →', `edit_products_page_${current_page + 1}`));\r\n        }\r\n        if (navigationButtons.length) {\r\n            buttons.push(navigationButtons);\r\n        }\r\n\r\n        buttons.push(...defaultButtonsMenuOnly);\r\n\r\n        const message = `Выберите товар чтобы изменить или удалить отслеживание:`\r\n        const keyboard = Markup.inlineKeyboard(buttons);\r\n\r\n        try {\r\n            await ctx.editMessageText(message, {\r\n                ...keyboard, // Spread the keyboard markup\r\n                link_preview_options: {\r\n                    is_disabled: true\r\n                },\r\n            });\r\n            await ctx.answerCbQuery('Введите товар');\r\n        } catch (error) {\r\n            logger.error('Error sending autobooking message:', error);\r\n            await ctx.reply(message, keyboard);\r\n        }\r\n\r\n        await ctx.answerCbQuery();\r\n    } catch (error) {\r\n        logger.error('Error fetching products:', error);\r\n        await ctx.reply('Произошла ошибка при загрузке товаров.', Markup.inlineKeyboard([\r\n            [Markup.button.callback('Главное меню', 'mainmenu')]\r\n        ]));\r\n    }\r\n    return ctx.wizard.next();\r\n};\r\n\r\nexport const promptForSum = async (ctx: MyContext) => {\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('Назад', 'warehouse_product_' + ctx.scene.session.notificationForm.product_id)],\r\n    ]);\r\n\r\n    const product_name = ctx.scene.session.notificationForm.product_name;\r\n    const message = fmt`Введите минимальное количество для товара ${code(product_name)}`;\r\n\r\n    try {\r\n        await ctx.editMessageText(message, {\r\n            ...keyboard, // Spread the keyboard markup\r\n            link_preview_options: {\r\n                is_disabled: true\r\n            },\r\n        });\r\n        await ctx.answerCbQuery('Минимальное количество для товара');\r\n    } catch (error) {\r\n        logger.error('Error sending autobooking message:', error);\r\n        await ctx.reply(message, keyboard);\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const promptForAction = async (ctx: MyContext) => {\r\n\r\n    const product = await LaravelService.getOneProductByTelegramId(ctx.from.id, ctx.scene.session.notificationForm.product_id);\r\n\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('Изменить минимальное количество', 'change_minimal_sum')],\r\n        [Markup.button.callback('Удалить уведомление', 'delete_notification')],\r\n        [Markup.button.callback('Главное меню', 'mainmenu')],\r\n    ]);\r\n\r\n    const amount = product.actual_amounts[0].amount ?? 0;\r\n\r\n    const message = fmt`\r\nНазвание товара - ${code(ctx.scene.session.notificationForm.product_name)} \r\nФактическое кол-во на складе - ${code(amount)}\r\nМин кол-во для уведомления: ${code(ctx.scene.session.notificationForm.sum)}`;\r\n\r\n    try {\r\n        await ctx.editMessageText(message, {\r\n            ...keyboard, // Spread the keyboard markup\r\n            link_preview_options: {\r\n                is_disabled: true\r\n            },\r\n        });\r\n        await ctx.answerCbQuery('Выберите действие');\r\n    } catch (error) {\r\n        logger.error('Error sending autobooking message:', error);\r\n        await ctx.reply(message, keyboard);\r\n    }\r\n}\r\n\r\nexport const promptForDateTime = async (ctx: MyContext) => {\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('Пропустить', 'notification_skip_date')],\r\n        [Markup.button.callback('Главное меню', 'mainmenu')],\r\n    ]);\r\n\r\n    const message = fmt`Введите дату и время уведомления в формате:\r\ndd.mm.yyyy hh:mm\r\n\r\n ${bold('Текущая дата и время: ')} ${code(ctx.session.notificationForm.dateTime)}\r\n \r\n Введите новую дату и время или нажмите пропустить\r\n`;\r\n\r\n    try {\r\n        await ctx.editMessageText(message, {\r\n            ...keyboard, // Spread the keyboard markup\r\n            link_preview_options: {\r\n                is_disabled: true\r\n            },\r\n        });\r\n        await ctx.answerCbQuery('Введите дату и время уведомления');\r\n    } catch (error) {\r\n        logger.error('Error sending autobooking message:', error);\r\n        await ctx.reply(message, keyboard);\r\n    }\r\n\r\n    return ctx.wizard.next();\r\n}\r\n\r\nexport const promptForNotificationType = async (ctx: MyContext) => {\r\n    //keyboard one time or constant notification\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('Пропустить', 'notification_skip_type')],\r\n        [Markup.button.callback('Одноразовое уведомление', 'notification_one_time')],\r\n        [Markup.button.callback('Постоянное уведомление', 'notification_constant')],\r\n        [Markup.button.callback('Главное меню', 'mainmenu')],\r\n    ]);\r\n\r\n    const message = fmt`Уведомление разовое или постоянное?\r\n    \r\n    ${bold('Текущий тип уведомления: ')} ${code(ctx.session.notificationForm.type)}\r\n    \r\n    Выберите тип уведомления или нажмите пропустить\r\n    `;\r\n\r\n    try {\r\n        await ctx.editMessageText(message, {\r\n            ...keyboard, // Spread the keyboard markup\r\n            link_preview_options: {\r\n                is_disabled: true\r\n            },\r\n        });\r\n        await ctx.answerCbQuery('Выберите тип уведомления');\r\n    } catch (error) {\r\n        logger.error('Error sending autobooking message:', error);\r\n        await ctx.reply(message, keyboard);\r\n    }\r\n\r\n    return ctx.wizard.next();\r\n}\r\n\r\nexport const deleteNotification = async (ctx: MyContext) => {\r\n    try {\r\n        await LaravelService.deleteNotification(ctx.scene.session.notificationForm.notification_id);\r\n    } catch (error) {\r\n        logger.error('Error deleting notification:', error);\r\n        await ctx.reply('Произошла ошибка при удалении уведомления. Пожалуйста, попробуйте позже.', Markup.inlineKeyboard(defaultButtonsMenuOnly));\r\n    }\r\n\r\n    await ctx.reply('Уведомление удалено', Markup.inlineKeyboard(defaultButtonsMenuOnly));\r\n}\r\n\r\nexport const sendSuccessMessage = async (ctx: MyContext) => {\r\n    const keyboard = Markup.inlineKeyboard([\r\n        [Markup.button.callback('Все уведомления', 'active_notifications')],\r\n        [Markup.button.callback('Главное меню', 'mainmenu')],\r\n    ]);\r\n\r\n    const message = fmt`\r\n    Вы установили минимальное количество для товара ${code(ctx.scene.session.notificationForm.product_name)} : ${code(ctx.scene.session.notificationForm.sum)}. \r\n\r\nКак только остаток товара достигнет этого количества, вы получите уведомление.\r\n`;\r\n\r\n    try {\r\n        await LaravelService.updateNotificationById(ctx.scene.session.notificationForm.notification_id, ctx.scene.session.notificationForm);\r\n    } catch (error) {\r\n        logger.error('Error creating notification:', error);\r\n        await ctx.reply('Произошла ошибка при создании уведомления. Пожалуйста, попробуйте позже.', Markup.inlineKeyboard(defaultButtonsMenuOnly));\r\n    }\r\n\r\n    try {\r\n        await ctx.editMessageText(message, {\r\n            ...keyboard, // Spread the keyboard markup\r\n            link_preview_options: {\r\n                is_disabled: true\r\n            },\r\n        });\r\n        await ctx.answerCbQuery('Уведомление создано');\r\n    } catch (error) {\r\n        logger.error('Error sending autobooking message:', error);\r\n        await ctx.reply(message, keyboard);\r\n    }\r\n\r\n}","import {Composer, Markup, Scenes} from 'telegraf';\r\nimport {MyContext} from '../../../types/MyContext';\r\n\r\nimport {\r\n    deleteNotification,\r\n    enterHandler, promptForAction,\r\n    promptForDateTime,\r\n    promptForNotificationType,\r\n    promptForSum,\r\n    sendSuccessMessage\r\n} from \"./editNotificationActions\";\r\nimport {createNotifictationScene} from \"./createNotificationScene\";\r\nimport laravelService, {ProductsPaginatedResponse} from \"../../../../services/laravelService\";\r\nimport LaravelService from \"../../../../services/laravelService\";\r\n\r\nconst noKeyboard = [\r\n    [Markup.button.callback('👈 Назад', 'reenter')],\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\nconst handleActionInput = new Composer<MyContext>();\r\n\r\n\r\n\r\nconst handleSumInput = new Composer<MyContext>();\r\n\r\nhandleSumInput.on('text', async (ctx) => {\r\n    const sum = ctx.message.text;\r\n    ctx.scene.session.notificationForm.sum = sum;\r\n    await sendSuccessMessage(ctx);\r\n});\r\n\r\nconst handleDateTimeInput = new Composer<MyContext>();\r\nhandleDateTimeInput.on('text', async (ctx) => {\r\n    ctx.scene.session.notificationForm.dateTime = ctx.message.text;\r\n    await promptForNotificationType(ctx);\r\n});\r\n\r\n//notification_skip_date\r\nhandleDateTimeInput.action('notification_skip_date', async (ctx) => {\r\n    await promptForNotificationType(ctx);\r\n});\r\n\r\n\r\n\r\nconst handleNotificationTypeInput = new Composer<MyContext>();\r\nhandleNotificationTypeInput.action('notification_one_time', async (ctx) => {\r\n    ctx.scene.session.notificationForm.type = 'one_time';\r\n    await sendSuccessMessage(ctx);\r\n});\r\n\r\n//notification_skip_type\r\nhandleNotificationTypeInput.action('notification_skip_type', async (ctx) => {\r\n    await sendSuccessMessage(ctx);\r\n});\r\n\r\n\r\nhandleNotificationTypeInput.action('notification_constant', async (ctx) => {\r\n    ctx.scene.session.notificationForm.type = 'constant';\r\n    await sendSuccessMessage(ctx);\r\n});\r\n\r\nexport const editNotificationScene = new Scenes.WizardScene<MyContext>(\r\n    'warehouse_edit_notification',\r\n    // Step 1: Prompt to enter name\r\n    async (ctx) => {\r\n        ctx.scene.session.notificationForm = {\r\n            name: null,\r\n            sum: null,\r\n            dateTime: null,\r\n            type: null,\r\n        }\r\n       await enterHandler(ctx);\r\n    },\r\n    // Step 2: Save name and prompt to enter sum\r\n    handleActionInput,\r\n    // Step 3: Save sum and prompt to enter date\r\n    handleSumInput,\r\n);\r\n\r\neditNotificationScene.command('start', async (ctx) => {\r\n    await ctx.scene.enter('main');\r\n});\r\neditNotificationScene.action('mainmenu', async (ctx) => {\r\n    await ctx.scene.enter('main');\r\n});\r\n\r\neditNotificationScene.action(/^products_page_(\\d+)$/, async (ctx) => {\r\n    const page = parseInt(ctx.match[1], 10);\r\n    ctx.session.page = page;\r\n    return enterHandler(ctx); // Reload the handler with the new page\r\n});\r\n\r\nhandleActionInput.action(/^edit_warehouse_product_(\\d+)$/, async (ctx) => {\r\n    const notification_id = parseInt(ctx.match[1], 10);\r\n    ctx.scene.session.notificationForm.notification_id = notification_id;\r\n    const productData = await LaravelService.getNotificationsByTelegramId(ctx.from.id, 1, 1, 'product_balance', notification_id);\r\n\r\n    const notification = productData.data.find(notification => notification.id === notification_id);\r\n    if(notification.settings.product_name) {\r\n        ctx.scene.session.notificationForm.product_name = notification.settings.product_name;\r\n    }\r\n\r\n    if(notification.settings.sum) {\r\n        ctx.scene.session.notificationForm.sum = notification.settings.sum;\r\n    }\r\n\r\n    if(notification.settings.product_id) {\r\n        ctx.scene.session.notificationForm.product_id = notification.settings.product_id;\r\n    }\r\n\r\n    if(notification.settings.type) {\r\n        ctx.scene.session.notificationForm.type = notification.settings.type;\r\n    }\r\n\r\n\r\n    await promptForAction(ctx);\r\n});\r\n\r\nhandleActionInput.action('change_minimal_sum', async (ctx) => {\r\n    await promptForSum(ctx);\r\n    return ctx.wizard.next();\r\n});\r\n\r\n// delete\r\nhandleActionInput.action('delete_notification', async (ctx) => {\r\n    await deleteNotification(ctx);\r\n});","import {Markup} from \"telegraf\";\r\nimport {MyContext} from \"../../../types/MyContext\";\r\n\r\nconst defaultButtons = [\r\n    [Markup.button.callback('Уведомление на остаток', 'warehouse_notification')],\r\n    [Markup.button.callback('Работа с остатком', 'warehouse_list')],\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\nconst defaultButtonsMenuOnly = [\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\nexport const enterHandler = async (ctx: MyContext) => {\r\n    ctx.session.page = 1; // Store page in session for navigation\r\n    const messageText = `Выберите действие`;\r\n\r\n    const buttonsArray = Markup.inlineKeyboard([...defaultButtons]);\r\n\r\n    if (ctx.callbackQuery && ctx.callbackQuery.message) {\r\n        try {\r\n            // If the interaction is from a callback query, edit the existing message\r\n            await ctx.editMessageText(messageText, buttonsArray);\r\n        }\r\n        catch (error) {\r\n            await ctx.reply(messageText, buttonsArray);\r\n        }\r\n    } else {\r\n        await ctx.reply(messageText, buttonsArray);\r\n    }\r\n}","import { Scenes, Markup } from 'telegraf';\r\nimport { MyContext } from '../../../types/MyContext';\r\n\r\nimport {enterHandler} from \"./warehouseActions\";\r\n\r\nexport const warehouseScene = new Scenes.BaseScene<MyContext>('warehouse');\r\n\r\nconst noKeyboard = [\r\n    [Markup.button.callback('👈 Назад', 'reenter')],\r\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\r\n];\r\n\r\n// Define the enter handler\r\nwarehouseScene.enter(async (ctx: MyContext) => {\r\n    await enterHandler(ctx);\r\n});\r\n\r\nwarehouseScene.action('warehouse_notification', async (ctx: MyContext) => {\r\n    await ctx.scene.enter('warehouse_create_notification');\r\n});\r\n\r\nwarehouseScene.action('warehouse_list', async (ctx: MyContext) => {\r\n    await ctx.scene.enter('warehouse_edit_notification');\r\n});\r\n\r\nwarehouseScene.action('reenter', async (ctx: MyContext) => {\r\n    await ctx.scene.reenter();\r\n});","import {Telegraf} from \"telegraf\";\r\nimport {MyContext} from \"../types/MyContext\";\r\n\r\nimport CacheService from '../../utils/redis/Cache/Cache';\r\nclass WarehouseBot {\r\n    private bot: Telegraf<MyContext>;\r\n    constructor(bot: Telegraf<MyContext>) {\r\n        this.bot = bot;\r\n    }\r\n\r\n    async handleStart(chatId: number) {\r\n        const message = \"⚡Я автоматически нахожу и бронирую доступные слоты на складах Wildberries. Выбирайте удобный тариф и бронируйте поставки.\" +\r\n            \"\\n\\nВыберите пункт в меню 👇\";\r\n\r\n        const keyboard = {\r\n            inline_keyboard: [\r\n                [\r\n                    { text: '📦 Автобронирование', callback_data: 'wh_notification' },\r\n                ],\r\n                [\r\n                    { text: '⚡ Поиск слотов', callback_data: 'wh_notification' },\r\n                    { text: '📝 Заявки на поиск слотов', callback_data: 'wh_notification' },\r\n                ],\r\n                [\r\n                    { text: '🙌 Мои кабинеты', callback_data: 'wh_payment' },\r\n                    { text: '💎 Подписка', callback_data: 'wh_payment' },\r\n                ],\r\n                [\r\n                    { text: '💬 Поддержка', url: 'https://t.me/dmitrynovikov21' },\r\n                    { text: '📍 Инструкции', url: 'https://t.me/dmitrynovikov21' },\r\n                ],\r\n            ],\r\n        };\r\n\r\n        await this.bot.telegram.sendMessage(chatId, message, {\r\n            parse_mode: 'HTML',\r\n            reply_markup: keyboard,\r\n        });\r\n    }\r\n\r\n    async fetchUserByTelegramId(telegramId: number) {\r\n        try {\r\n            return await CacheService.getUserByTelegramId(telegramId);\r\n        } catch (error) {\r\n            console.error('Error fetching user:', error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Implement other methods like handleNotification, handlePayment, etc.\r\n}\r\n\r\nexport default WarehouseBot;\r\n","import LaravelService from \"../../services/laravelService\";\r\nimport logger from \"../../utils/logger/loggerTelegram\";\r\nimport {MyContext} from \"../types/MyContext\";\r\nimport {Scenes} from \"telegraf\";\r\nimport {SceneSession} from \"telegraf/typings/scenes\";\r\n\r\nexport const cabinetGate = async (ctx: MyContext, scene: string) => {\r\n    let user = null;\r\n    try{\r\n        user = await LaravelService.getUserByTelegramId(ctx.from.id, 10);\r\n    } catch (error) {\r\n        logger.error('Error getting user:', error);\r\n        await ctx.reply('Произошла ошибка при получении данных пользователя. Попробуйте позже');\r\n    }\r\n\r\n    if (!user) {\r\n        await ctx.reply('Пользователь не найден. Пожалуйста, зарегистрируйтесь');\r\n        return;\r\n    }\r\n\r\n    // if no phone then auth\r\n    if (!user.phone_number) {\r\n        await ctx.scene.enter('login_wizard');\r\n        return;\r\n    }\r\n\r\n    ctx.session.user = user;\r\n\r\n    console.log('user', user);\r\n\r\n\r\n    await ctx.scene.enter(scene, {user});\r\n}","// nodejs-server/utils/clusterManager.ts\r\n\r\nimport { Cluster } from 'playwright-cluster';\r\n\r\nlet cluster: Cluster | undefined;\r\n\r\nconst initializeCluster = async (): Promise<Cluster> => {\r\n    if (cluster) {\r\n        return cluster;\r\n    }\r\n\r\n    cluster = await Cluster.launch({\r\n        concurrency: Cluster.CONCURRENCY_CONTEXT,\r\n        maxConcurrency: 5,\r\n        timeout: 120000,\r\n        playwrightOptions: {\r\n            headless: true,\r\n        },\r\n    });\r\n\r\n    cluster.on('taskerror', (err: Error, data: any, willRetry: boolean) => {\r\n        if (willRetry) {\r\n            console.warn(`Error processing ${data}: ${err.message}. Retrying...`);\r\n        } else {\r\n            console.error(`Failed to process ${data}: ${err.message}`);\r\n        }\r\n    });\r\n\r\n    cluster.on('active', () => {\r\n        console.log('A new task has started. Active tasks:', cluster!.idle);\r\n    });\r\n\r\n    cluster.on('idle', () => {\r\n        console.log('All tasks are complete. Cluster is idle.');\r\n    });\r\n\r\n    return cluster;\r\n};\r\n\r\nconst shutdownCluster = async (): Promise<void> => {\r\n    if (cluster) {\r\n        await cluster.close();\r\n        console.log('Cluster has been shut down.');\r\n        cluster = undefined;\r\n    }\r\n};\r\n\r\nprocess.on('SIGINT', async () => {\r\n    console.log('Received SIGINT. Shutting down cluster...');\r\n    await shutdownCluster();\r\n    process.exit(0);\r\n});\r\n\r\nprocess.on('SIGTERM', async () => {\r\n    console.log('Received SIGTERM. Shutting down cluster...');\r\n    await shutdownCluster();\r\n    process.exit(0);\r\n});\r\n\r\nexport {\r\n    initializeCluster,\r\n    shutdownCluster,\r\n};\r\n","import { createLogger, format, transports, Logger } from 'winston';\r\n\r\nconst loggerTelegram: Logger = createLogger({\r\n    level: 'info',\r\n    format: format.json(),\r\n    defaultMeta: { service: 'nodejs-server' },\r\n    transports: [\r\n        new transports.Console({\r\n            format: format.combine(\r\n                format.timestamp(),\r\n                format.simple()\r\n            ),\r\n        }),\r\n        new transports.File({\r\n            filename: 'telegram.log',\r\n            format: format.json(),\r\n        }),\r\n    ],\r\n});\r\n\r\nexport default loggerTelegram;\r\n","// src/utils/pow/solveTask.ts\r\n\r\nimport path from 'path';\r\nimport fs from 'fs';\r\nimport vm from 'vm';\r\n\r\n// Step 1: Load wasm_exec.js (adjust the path to where you store the wasm_exec.js file)\r\nconst wasmExecPath = path.join(__dirname, 'wasm_exec.js');\r\nconst wasmExecCode = fs.readFileSync(wasmExecPath, 'utf8');\r\nvm.runInThisContext(wasmExecCode); // This defines `global.Go`\r\n\r\ndeclare var Go: any;\r\n\r\nexport interface TaskInput {\r\n    // Your TaskInput interface definition\r\n}\r\n\r\n// Step 2: Create a function to run WebAssembly in Node.js\r\nasync function solveTaskInNode(wasmPath: string, taskInput: TaskInput): Promise<any> {\r\n    const go = new Go();\r\n\r\n    // Load the WebAssembly file from the file system\r\n    const wasmBuffer = fs.readFileSync(wasmPath);\r\n\r\n    // Instantiate WebAssembly with the Go import object\r\n    const { instance } = await WebAssembly.instantiate(wasmBuffer, go.importObject);\r\n    go.run(instance);\r\n\r\n    // Now call solveTask\r\n    try {\r\n        const solveTaskResult = (global as any).solveTask(taskInput);\r\n        return solveTaskResult;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\n// Step 3: Define the wasmPath and taskInput\r\nconst wasmPath = path.join(__dirname, 'solve.wasm'); // Path to your solve.wasm file\r\n\r\n// Export the function\r\nexport {\r\n    solveTaskInNode,\r\n    wasmPath,\r\n};\r\n","// src/cache/Cache.ts\r\n\r\nimport redisClient from '../redisClient';\r\nimport { serialize, unserialize } from 'php-serialize';\r\nimport axios from 'axios';\r\n\r\n// Define an interface for the user data returned by the API\r\ninterface User {\r\n    id: number;\r\n    telegramId: string;\r\n    name: string;\r\n    // Add other user properties as needed\r\n}\r\n\r\ninterface ScanResult {\r\n    cursor: number;\r\n    keys: string[];\r\n}\r\n\r\nclass Cache {\r\n    private prefix: string;\r\n\r\n    constructor() {\r\n        this.prefix = 'beauty_database_';\r\n    }\r\n\r\n    /**\r\n     * Sets a value in the Redis cache.\r\n     * @param key - The key under which the value is stored.\r\n     * @param value - The value to store; can be any serializable type.\r\n     * @param expirationInSeconds - Time in seconds before the key expires. Defaults to 3600 seconds (1 hour).\r\n     */\r\n    async set(key: string, value: any, expirationInSeconds: number = 3600): Promise<void> {\r\n        const fullKey = `${this.prefix}${key}`;\r\n        try {\r\n            const serializedValue = serialize(value);\r\n            await redisClient.set(fullKey, serializedValue, {\r\n                EX: expirationInSeconds, // Expiration time in seconds\r\n            });\r\n            console.log(`Value set for key: ${fullKey}`);\r\n        } catch (err) {\r\n            console.error(`Error setting cache value for key ${fullKey}:`, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves a value from the Redis cache.\r\n     * @param key - The key of the value to retrieve.\r\n     * @returns The deserialized value if found, raw value if deserialization fails, or null if not found.\r\n     */\r\n    async get(key: string): Promise<any | null> {\r\n        const fullKey = `${this.prefix}${key}`;\r\n        try {\r\n            const value = await redisClient.get(fullKey);\r\n            if (value !== null) {\r\n                try {\r\n                    const deserializedValue = unserialize(value);\r\n                    // console.log(`Value retrieved for key ${fullKey}:`, deserializedValue);\r\n                    return deserializedValue;\r\n                } catch (error) {\r\n                    console.warn(`Failed to deserialize value for key ${fullKey}. Returning raw value.`);\r\n                    return value;\r\n                }\r\n            } else {\r\n                console.log(`Key ${fullKey} not found in cache.`);\r\n                return null;\r\n            }\r\n        } catch (err) {\r\n            console.error(`Error getting cache value for key ${fullKey}:`, err);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves a value from the cache. If it doesn't exist, computes it using the provided function,\r\n     * stores it in the cache, and then returns it.\r\n     *\r\n     * @param key - The cache key.\r\n     * @param computeFn - An asynchronous function to compute the value if it's not cached.\r\n     * @param expirationInSeconds - Cache expiration time in seconds. Defaults to 3600 (1 hour).\r\n     * @returns A promise that resolves with the cached or computed value.\r\n     */\r\n    async rememberCacheValue<T>(\r\n        key: string,\r\n        computeFn: () => Promise<T>,\r\n        expirationInSeconds: number = 3600\r\n    ): Promise<T> {\r\n        try {\r\n            // Attempt to retrieve the cached value\r\n            const cachedValue = await this.get(key);\r\n\r\n            if (cachedValue !== null) {\r\n                console.log(`Cache hit for key: ${key}`);\r\n                return cachedValue as T;\r\n            }\r\n\r\n            console.log(`Cache miss for key: ${key}. Computing value...`);\r\n\r\n            // Compute the value using the provided function\r\n            const computedValue = await computeFn();\r\n\r\n            // Store the computed value in the cache\r\n            await this.set(key, computedValue, expirationInSeconds);\r\n            console.log(`Computed and cached value for key: ${key}`);\r\n\r\n            return computedValue;\r\n        } catch (err) {\r\n            console.error(`Error in rememberCacheValue for key ${key}:`, err);\r\n            throw err; // Rethrow the error after logging\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Retrieves a user by their Telegram ID, first checking the cache before making an API call.\r\n     * @param telegramId - The Telegram ID of the user.\r\n     * @returns The user data if found, or null otherwise.\r\n     */\r\n    async getUserByTelegramId(telegramId: number): Promise<User | null> {\r\n        const cacheKey = `user_telegram_id_${telegramId}`;\r\n        try {\r\n            let user: User | null = await this.get(cacheKey);\r\n            console.log('User retrieved from cache:', user);\r\n            if (user) {\r\n                return user;\r\n            }\r\n\r\n            const laravelApiUrl = process.env.LARAVEL_API_URL;\r\n            if (!laravelApiUrl) {\r\n                console.error('LARAVEL_API_URL is not defined in environment variables.');\r\n                return null;\r\n            }\r\n\r\n            const response = await axios.get<User>(`${laravelApiUrl}/users/telegram/${telegramId}`);\r\n            user = response.data;\r\n            console.log('User retrieved from API:', user);\r\n\r\n            // Optionally, cache the user data after fetching from the API\r\n            await this.set(cacheKey, user, 3600); // Cache for 1 hour\r\n\r\n            return user;\r\n        } catch (error) {\r\n            console.error('Error fetching user:', error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a key from the Redis cache.\r\n     * @param key - The key to delete.\r\n     * @returns True if the key was deleted, false otherwise.\r\n     */\r\n    async forget(key: string): Promise<boolean> {\r\n        const fullKey = `${this.prefix}${key}`;\r\n        try {\r\n            const result = await redisClient.del(fullKey);\r\n            if (result === 1) {\r\n                console.log(`Successfully deleted key: ${fullKey}`);\r\n                return true;\r\n            } else {\r\n                console.log(`Key ${fullKey} does not exist or could not be deleted.`);\r\n                return false;\r\n            }\r\n        } catch (err) {\r\n            console.error(`Error deleting cache value for key ${fullKey}:`, err);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async forgetByPattern(pattern: string): Promise<boolean> {\r\n        const fullPattern = `${this.prefix}${pattern}`;\r\n        console.log(`Deleting keys matching pattern: ${fullPattern}`);\r\n        try {\r\n            let cursor = 0;\r\n            do {\r\n                const result:ScanResult = await redisClient.scan(cursor, {\r\n                    MATCH: fullPattern,\r\n                    COUNT: 100\r\n                });\r\n                console.log('Scan result:', result);\r\n\r\n                // Adjusted to match the actual response structure\r\n                const nextCursor = result.cursor;\r\n                const keys = result.keys;\r\n                cursor = nextCursor;\r\n\r\n                if (keys && keys.length > 0) {  // Added a check to ensure keys is defined\r\n                    await redisClient.del(keys);\r\n                    console.log(`Successfully deleted keys matching pattern: ${fullPattern}`);\r\n                }\r\n            } while (cursor !== 0);\r\n\r\n            return true;\r\n        } catch (err) {\r\n            console.error(`Error deleting cache values for pattern ${fullPattern}:`, err);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Publishes a message to a Redis channel.\r\n     * @param channel - The channel to publish the message to.\r\n     * @param message - The message to publish.\r\n     */\r\n    async pushToChannel(channel: string, message: string): Promise<void> {\r\n        const fullChannel = `${this.prefix}${channel}`;\r\n\r\n        try {\r\n            await redisClient.publish(fullChannel, message);\r\n            console.log(`Message published to channel ${channel}: ${message}`);\r\n        } catch (err) {\r\n            console.error(`Error publishing message to channel ${channel}:`, err);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default new Cache();\r\n","// utils/redisClient.ts\r\n\r\nimport { createClient, RedisClientType } from 'redis';\r\n\r\n/**\r\n * Configuration options for the Redis client.\r\n */\r\nconst redisConfig = {\r\n    url: 'redis://redis:6379/1', // Use Redis container name as host\r\n};\r\n\r\n/**\r\n * Create a Redis client instance.\r\n */\r\nconst redisClient: RedisClientType = createClient(redisConfig);\r\n\r\n/**\r\n * Connect to Redis.\r\n */\r\nconst connectRedis = async (): Promise<void> => {\r\n    try {\r\n        await redisClient.connect();\r\n        console.log('Connected to Redis');\r\n    } catch (error) {\r\n        console.error('Redis connection error:', error);\r\n        // Optionally, handle reconnection logic or exit the process\r\n        process.exit(1);\r\n    }\r\n};\r\n\r\n// Initiate the connection\r\nconnectRedis();\r\n\r\n/**\r\n * Gracefully handle application termination signals to disconnect Redis client.\r\n */\r\nconst gracefulShutdown = async () => {\r\n    try {\r\n        await redisClient.disconnect();\r\n        console.log('Disconnected from Redis');\r\n        process.exit(0);\r\n    } catch (error) {\r\n        console.error('Error during Redis disconnection:', error);\r\n        process.exit(1);\r\n    }\r\n};\r\n\r\n// Listen for termination signals\r\nprocess.on('SIGINT', gracefulShutdown);\r\nprocess.on('SIGTERM', gracefulShutdown);\r\n\r\nexport default redisClient;\r\n","module.exports = require(\"@telegraf/session/redis\");","module.exports = require(\"axios\");","module.exports = require(\"body-parser\");","module.exports = require(\"express\");","module.exports = require(\"openai\");","module.exports = require(\"php-serialize\");","module.exports = require(\"playwright-cluster\");","module.exports = require(\"redis\");","module.exports = require(\"telegraf\");","module.exports = require(\"telegraf/format\");","module.exports = require(\"winston\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"vm\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import express, { Application, Request, Response } from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport winston from 'winston'; // For logging\r\nimport { initializeCluster, shutdownCluster } from './utils/clusterManager';\r\n\r\nimport bot from './telegraf/controllers/telegramController';\r\n// Import Routes\r\nimport draftsRoutes from './routes/drafts';\r\nimport ordersRoutes from './routes/orders';\r\nimport acceptanceRoutes from './routes/acceptance';\r\nimport yclientsRoutes from \"./routes/yclientsRoutes\";\r\nimport botMaster from \"./telegraf/controllers/telegramBotMasterController\";\r\n\r\n\r\n\r\n// Перед настройкой маршрутов добавляем установку webhook URL для каждого бота\r\nconst WEBHOOK_DOMAIN = 'https://albacore-famous-opossum.ngrok-free.app';\r\nconst app: Application = express();\r\nconst PORT: number | string = process.env.PORT || 3000;\r\n\r\n// Configure Winston (optional)\r\nexport const logger = winston.createLogger({\r\n    level: 'info',\r\n    format: winston.format.json(),\r\n    defaultMeta: { service: 'nodejs-server' },\r\n    transports: [\r\n        new winston.transports.Console({\r\n            format: winston.format.simple(),\r\n        }),\r\n        new winston.transports.File({\r\n            filename: 'combined.log', // Log file name\r\n            format: winston.format.json(), // Optional: Can also use format like simple or custom formats\r\n        }),\r\n        // Add more transports like File if needed\r\n\r\n    ],\r\n});\r\n\r\n// Middleware\r\napp.use(bodyParser.json());\r\n\r\n// Основной бот\r\nbot.telegram.setWebhook(`${WEBHOOK_DOMAIN}/webhook/main`)\r\n    .then(() => logger.info('Main bot webhook set'))\r\n    .catch(err => logger.error('Failed to set main bot webhook:', err));\r\n\r\n// Мастер бот\r\nbotMaster.telegram.setWebhook(`${WEBHOOK_DOMAIN}/webhook/master`)\r\n    .then(() => logger.info('Master bot webhook set'))\r\n    .catch(err => logger.error('Failed to set master bot webhook:', err));\r\n\r\n// Routes\r\n// Webhook route\r\napp.use(bot.webhookCallback('/webhook/main'));\r\napp.use(botMaster.webhookCallback('/webhook/master'));\r\n\r\n\r\napp.use('/api/drafts', draftsRoutes);\r\napp.use('/api/orders', ordersRoutes);\r\napp.use('/api/acceptance', acceptanceRoutes);\r\n\r\napp.use('/api/yclients', yclientsRoutes);\r\n\r\n// Health Check Endpoint\r\napp.get('/health', (req: Request, res: Response) => {\r\n    res.status(200).send({ status: 'OK' });\r\n});\r\n\r\n// Start Server After Initializing Cluster\r\nconst startServer = async (): Promise<void> => {\r\n    try {\r\n        await initializeCluster(); // Initialize Playwright Cluster\r\n        app.listen(PORT, () => {\r\n            console.log(`Node.js server is running on port ${PORT}`);\r\n        });\r\n    } catch (error: any) {\r\n        console.error('Failed to initialize Playwright cluster:', error.message);\r\n        process.exit(1); // Exit process with failure\r\n    }\r\n};\r\n\r\nstartServer();\r\n\r\n// Handle graceful shutdown\r\nprocess.on('SIGINT', async () => {\r\n    console.log('Shutting down server...');\r\n    await shutdownCluster();\r\n    process.exit(0);\r\n});\r\n\r\nprocess.on('SIGTERM', async () => {\r\n    console.log('Shutting down server...');\r\n    await shutdownCluster();\r\n    process.exit(0);\r\n});\r\n"],"names":[],"sourceRoot":""}