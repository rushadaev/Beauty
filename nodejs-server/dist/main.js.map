{"version":3,"file":"main.js","mappings":"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","sources":["webpack://nodejs-server/./src/controllers/acceptanceController.ts","webpack://nodejs-server/./src/controllers/draftsController.ts","webpack://nodejs-server/./src/controllers/ordersController.ts","webpack://nodejs-server/./src/controllers/yclientsController.ts","webpack://nodejs-server/./src/routes/acceptance.ts","webpack://nodejs-server/./src/routes/drafts.ts","webpack://nodejs-server/./src/routes/orders.ts","webpack://nodejs-server/./src/routes/yclientsRoutes.ts","webpack://nodejs-server/./src/services/laravelService.ts","webpack://nodejs-server/./src/services/openaiService.ts","webpack://nodejs-server/./src/services/wildberriesService.ts","webpack://nodejs-server/./src/telegraf/controllers/telegramBotMasterController.ts","webpack://nodejs-server/./src/telegraf/controllers/telegramController.ts","webpack://nodejs-server/./src/telegraf/services/bot-admin/scenes/adminLoginWizard.ts","webpack://nodejs-server/./src/telegraf/services/bot-admin/scenes/adminMainScene.ts","webpack://nodejs-server/./src/telegraf/services/bot-admin/scenes/createWarehouseNotificationScene.ts","webpack://nodejs-server/./src/telegraf/services/bot-admin/scenes/employmentScene.ts","webpack://nodejs-server/./src/telegraf/services/bot-admin/scenes/notificationsCreateScene.ts","webpack://nodejs-server/./src/telegraf/services/bot-admin/scenes/notificationsListScene.ts","webpack://nodejs-server/./src/telegraf/services/bot-admin/scenes/notificationsManagementScene.ts","webpack://nodejs-server/./src/telegraf/services/bot-admin/scenes/productsScene.ts","webpack://nodejs-server/./src/telegraf/services/bot-admin/scenes/remindLaterScene.ts","webpack://nodejs-server/./src/telegraf/services/bot-admin/scenes/salaryScene.ts","webpack://nodejs-server/./src/telegraf/services/bot-admin/scenes/selectBranchScene.ts","webpack://nodejs-server/./src/telegraf/services/bot-admin/scenes/tasksScene.ts","webpack://nodejs-server/./src/telegraf/services/bot-admin/scenes/warehouseNotificationsListScene.ts","webpack://nodejs-server/./src/telegraf/services/bot-admin/scenes/warehouseScene.ts","webpack://nodejs-server/./src/telegraf/services/bot-master/scenes/add_service_scene.ts","webpack://nodejs-server/./src/telegraf/services/bot-master/scenes/cancel_booking_scene.ts","webpack://nodejs-server/./src/telegraf/services/bot-master/scenes/changeDescriptionScene.ts","webpack://nodejs-server/./src/telegraf/services/bot-master/scenes/changePhotoScene.ts","webpack://nodejs-server/./src/telegraf/services/bot-master/scenes/change_phone_scene.ts","webpack://nodejs-server/./src/telegraf/services/bot-master/scenes/clientsManagementScene.ts","webpack://nodejs-server/./src/telegraf/services/bot-master/scenes/delete_service_scene.ts","webpack://nodejs-server/./src/telegraf/services/bot-master/scenes/loginWizard.ts","webpack://nodejs-server/./src/telegraf/services/bot-master/scenes/mainScene.ts","webpack://nodejs-server/./src/telegraf/services/bot-master/scenes/registrationWizard.ts","webpack://nodejs-server/./src/telegraf/services/bot-master/scenes/scheduleManagementScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/notifications/createNotificationActions.ts","webpack://nodejs-server/./src/telegraf/services/scenes/notifications/createNotificationScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/notifications/editNotificationActions.ts","webpack://nodejs-server/./src/telegraf/services/scenes/notifications/editNotificationScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/notifications/notificationActions.ts","webpack://nodejs-server/./src/telegraf/services/scenes/notifications/notificationsScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/staff/staffActions.ts","webpack://nodejs-server/./src/telegraf/services/scenes/staff/staffScene.ts","webpack://nodejs-server/./src/telegraf/utils/cabinetGate.ts","webpack://nodejs-server/./src/utils/clusterManager.ts","webpack://nodejs-server/./src/utils/logger/loggerTelegram.ts","webpack://nodejs-server/./src/utils/pow/solveTask.ts","webpack://nodejs-server/./src/utils/redis/Cache/Cache.ts","webpack://nodejs-server/./src/utils/redis/redisClient.ts","webpack://nodejs-server/external commonjs \"@telegraf/session/redis\"","webpack://nodejs-server/external commonjs \"axios\"","webpack://nodejs-server/external commonjs \"body-parser\"","webpack://nodejs-server/external commonjs \"date-fns-tz\"","webpack://nodejs-server/external commonjs \"express\"","webpack://nodejs-server/external commonjs \"form-data\"","webpack://nodejs-server/external commonjs \"moment\"","webpack://nodejs-server/external commonjs \"moment-timezone\"","webpack://nodejs-server/external commonjs \"openai\"","webpack://nodejs-server/external commonjs \"php-serialize\"","webpack://nodejs-server/external commonjs \"playwright-cluster\"","webpack://nodejs-server/external commonjs \"redis\"","webpack://nodejs-server/external commonjs \"telegraf\"","webpack://nodejs-server/external commonjs \"telegraf/format\"","webpack://nodejs-server/external commonjs \"winston\"","webpack://nodejs-server/external node-commonjs \"fs\"","webpack://nodejs-server/external node-commonjs \"node:fs\"","webpack://nodejs-server/external node-commonjs \"path\"","webpack://nodejs-server/external node-commonjs \"vm\"","webpack://nodejs-server/webpack/bootstrap","webpack://nodejs-server/webpack/runtime/compat get default export","webpack://nodejs-server/webpack/runtime/define property getters","webpack://nodejs-server/webpack/runtime/hasOwnProperty shorthand","webpack://nodejs-server/webpack/runtime/make namespace object","webpack://nodejs-server/./src/index.ts"],"sourcesContent":["// src/controllers/acceptanceController.ts\n\nimport fs from 'fs';\nimport path from 'path';\nimport axios, { AxiosResponse } from 'axios';\nimport {Request, RequestHandler, Response} from 'express';\nimport {solveTaskInNode, TaskInput, wasmPath} from '../utils/pow/solveTask';\n\n// Define Interfaces for Storage State\ninterface Cookie {\n    name: string;\n    value: string;\n}\n\ninterface LocalStorageItem {\n    name: string;\n    value: string;\n}\n\ninterface OriginData {\n    origin: string;\n    localStorage: LocalStorageItem[];\n}\n\ninterface StorageState {\n    cookies: Cookie[];\n    origins: OriginData[];\n}\n\n// Define Interfaces for Acceptance Costs Response\ninterface Coefficient {\n    coefficient: number;\n    // Add other properties if necessary\n}\n\ninterface AcceptanceCostsResult {\n    costs: Coefficient[];\n    // Add other properties if necessary\n}\n\ninterface AcceptanceCostsResponse {\n    result?: AcceptanceCostsResult;\n    // Add other properties if necessary\n}\n\n// Define Interfaces for Book Timeslot Response\ninterface BookTimeslotResult {\n    // Define the structure based on actual response\n    [key: string]: any;\n}\n\n// Define Interfaces for POW Task\ninterface PowTask {\n    // Define based on actual task structure\n    [key: string]: any;\n}\n\ninterface PowAnswer {\n    // Define based on actual answer structure\n    [key: string]: any;\n}\n\n// Helper function to wait\nconst wait = (ms: number): Promise<void> => new Promise(resolve => setTimeout(resolve, ms));\n\n// Ensure the functions are typed as RequestHandler\nexport const fetchTimeslots: RequestHandler = async (req: Request, res: Response): Promise<void> => {\n    const { userId, preorderId } = req.query;\n\n    if (!userId || !preorderId) {\n        res.status(400).json({ error: 'Missing userId or preorderId parameter.' });\n        return;\n    }\n\n    try {\n        // Path to the user's state.json\n        const statePath = path.join('/var/www/wb-back/storage/state', `${userId}.json`);\n\n        if (!fs.existsSync(statePath)) {\n            res.status(404).json({ error: 'User state not found.' });\n            return;\n        }\n\n        const storageState: StorageState = JSON.parse(fs.readFileSync(statePath, 'utf-8'));\n\n        // Extract cookies and WBTokenV3\n        const { cookies, origins } = storageState;\n        let cookieHeader = cookies.map(cookie => `${cookie.name}=${cookie.value}`).join('; ');\n\n        const originData = origins.find(origin => origin.origin === 'https://seller.wildberries.ru');\n        if (!originData) {\n            res.status(400).json({ error: 'Origin data not found in state.' });\n            return;\n        }\n\n        const wbTokenEntry = originData.localStorage.find(item => item.name === 'wb-eu-passport-v2.access-token');\n        const wbTokenValue = wbTokenEntry ? wbTokenEntry.value : null;\n\n        if (!wbTokenValue) {\n            res.status(400).json({ error: 'WBTokenV3 token not found in localStorage.' });\n            return;\n        }\n\n        // Add WBTokenV3 to cookies\n        cookieHeader += `; WBTokenV3=${wbTokenValue}`;\n\n        // Define headers\n        const headers = {\n            'Content-Type': 'application/json',\n            'Cookie': cookieHeader,\n            'Accept': '*/*',\n            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',\n            'Origin': 'https://seller.wildberries.ru',\n            'Referer': 'https://seller.wildberries.ru/',\n            'Accept-Language': 'ru,en-GB;q=0.9,en-US;q=0.8,en;q=0.7',\n            'sec-ch-ua': '\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\"',\n            'sec-ch-ua-mobile': '?0',\n            'sec-ch-ua-platform': '\"macOS\"',\n            'sec-fetch-dest': 'empty',\n            'sec-fetch-mode': 'cors',\n            'sec-fetch-site': 'same-site',\n        };\n\n        // **a. Get Acceptance Costs**\n        const acceptanceCostsUrl = 'https://seller-supply.wildberries.ru/ns/sm-supply/supply-manager/api/v1/supply/getAcceptanceCosts';\n        const dateFrom = new Date().toISOString();\n        const dateTo = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(); // 30 days from now\n        const acceptanceCostsData = {\n            \"params\": {\n                \"dateFrom\": dateFrom,\n                \"dateTo\": dateTo,\n                \"preorderID\": Number(preorderId)\n            },\n            \"jsonrpc\": \"2.0\",\n            \"id\": \"json-rpc_35\"\n        };\n\n        const acceptanceCostsResponse: AxiosResponse<AcceptanceCostsResponse> = await axios.post(acceptanceCostsUrl, acceptanceCostsData, { headers });\n        const acceptanceCostsResult = acceptanceCostsResponse.data?.result;\n\n        if (!acceptanceCostsResult) {\n            res.status(500).json({ error: 'Failed to retrieve acceptance costs.' });\n            return;\n        }\n\n        // Filter coefficients > -1\n        acceptanceCostsResult.costs = acceptanceCostsResult.costs.filter(coefficient => coefficient.coefficient > -1);\n\n        res.status(200).json({\n            message: 'Fetched acceptance costs and delivery date successfully.',\n            data: {\n                acceptanceCosts: acceptanceCostsResult,\n            }\n        });\n    } catch (error: any) {\n        console.error('Error fetching acceptance costs:', error.response ? error.response.data : error.message);\n        res.status(500).json({ error: 'Internal Server Error.' });\n    }\n};\n\nexport const bookTimeslot: RequestHandler = async (req: Request, res: Response): Promise<void> => {\n    const { userId, preorderId, deliveryDate, warehouseId, monopalletCount } = req.body;\n\n    if (!userId || !preorderId || !deliveryDate || !warehouseId) {\n        res.status(400).json({ error: 'Missing required parameters.' });\n        return;\n    }\n\n    try {\n        // Path to the user's state.json\n        const statePath = path.join('/var/www/wb-back/storage/state', `${userId}.json`);\n\n        if (!fs.existsSync(statePath)) {\n            res.status(404).json({ error: 'User state not found.' });\n            return;\n        }\n\n        const storageState: StorageState = JSON.parse(fs.readFileSync(statePath, 'utf-8'));\n\n        // Extract cookies and WBTokenV3\n        const { cookies, origins } = storageState;\n        let cookieHeader = cookies.map(cookie => `${cookie.name}=${cookie.value}`).join('; ');\n\n        const originData = origins.find(origin => origin.origin === 'https://seller.wildberries.ru');\n        if (!originData) {\n            res.status(400).json({ error: 'Origin data not found in state.' });\n            return;\n        }\n\n        const wbTokenEntry = originData.localStorage.find(item => item.name === 'wb-eu-passport-v2.access-token');\n        const wbTokenValue = wbTokenEntry ? wbTokenEntry.value : null;\n\n        if (!wbTokenValue) {\n            res.status(400).json({ error: 'WBTokenV3 token not found in localStorage.' });\n            return;\n        }\n\n        // Add WBTokenV3 to cookies\n        cookieHeader += `; WBTokenV3=${wbTokenValue}`;\n\n        // Define headers\n        const headers = {\n            'Content-Type': 'application/json',\n            'Cookie': cookieHeader,\n            'Accept': '*/*',\n            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',\n            'Origin': 'https://seller.wildberries.ru',\n            'Referer': 'https://seller.wildberries.ru/',\n            'Accept-Language': 'ru,en-GB;q=0.9,en-US;q=0.8,en;q=0.7',\n            'sec-ch-ua': '\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\"',\n            'sec-ch-ua-mobile': '?0',\n            'sec-ch-ua-platform': '\"macOS\"',\n            'sec-fetch-dest': 'empty',\n            'sec-fetch-mode': 'cors',\n            'sec-fetch-site': 'same-site',\n        };\n\n        // **d. Book Timeslot**\n        const bookTimeslotUrl = 'https://seller-supply.wildberries.ru/ns/sm/supply-manager/api/v1/plan/add';\n\n        const bookTimeslotData = {\n            \"params\": {\n                \"preOrderId\": Number(preorderId),\n                \"deliveryDate\": deliveryDate,\n                \"warehouseId\": warehouseId,\n                ...(monopalletCount !== undefined && { monopalletCount })  // Add monopalletCount if provided\n            },\n            \"jsonrpc\": \"2.0\",\n            \"id\": \"json-rpc_36\"\n        };\n\n        // **Perform CAPTCHA Solving**\n        const task: TaskInput = await getPowTask();\n\n        const startTime = Date.now();\n        const answers: PowAnswer[] = await solvePowTask(task);\n        const latency = (Date.now() - startTime).toFixed(3); // Latency in milliseconds\n\n        console.log('answers', answers);\n\n        const captchaToken: string = await verifyPowAnswer(task, answers);\n        console.log('captchaToken', captchaToken);\n\n        // Include the CAPTCHA token and latency in headers\n        const bookTimeslotHeaders = {\n            ...headers,\n            'x-wb-captcha-token': captchaToken,\n            'x-wb-captcha-latency': latency,\n        };\n\n        // Make the plan/add request with CAPTCHA headers\n        const bookTimeslotResponse: AxiosResponse<{ result: BookTimeslotResult }> = await axios.post(bookTimeslotUrl, bookTimeslotData, { headers: bookTimeslotHeaders });\n        const bookTimeslotResult = bookTimeslotResponse.data.result;\n\n        console.log('Book Timeslot Result:', bookTimeslotResult);\n\n        res.status(200).json({\n            message: 'Timeslot booked successfully.',\n            data: bookTimeslotResult\n        });\n    } catch (error: any) {\n        console.error('Error booking timeslot:', error.response ? error.response.data : error.message);\n        res.status(500).json({ error: 'Internal Server Error.' });\n    }\n};\n// Functions for CAPTCHA solving\n\n/**\n * Retrieves a POW task from the server.\n * @param clientId Optional client ID.\n * @returns The POW task.\n */\nexport const getPowTask = async (clientId: string | null = null): Promise<TaskInput> => {\n    const actualClientId = clientId || 'e150c635-c6bb-4192-8046-97c2cf81e8b8'; // Use the actual client_id if required\n    const getTaskUrl = `https://pow.wildberries.ru/api/v1/short/get-task?client_id=${actualClientId}`;\n\n    const response: AxiosResponse<TaskInput> = await axios.get(getTaskUrl, {\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            'Accept': '*/*',\n            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',\n            'Origin': 'https://seller.wildberries.ru',\n            'Referer': 'https://seller.wildberries.ru/',\n            'sec-ch-ua': '\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\"',\n            'sec-ch-ua-mobile': '?0',\n            'sec-ch-ua-platform': '\"macOS\"',\n            'sec-fetch-dest': 'empty',\n            'sec-fetch-mode': 'cors',\n            'sec-fetch-site': 'same-site',\n        },\n    });\n\n    return response.data;\n};\n\n/**\n * Solves the given POW task.\n * @param task The POW task to solve.\n * @returns An array of answers.\n */\nexport const solvePowTask = async (task:TaskInput): Promise<PowAnswer[]> => {\n    let resultArray: PowAnswer[] = [];\n    try {\n        const result = await solveTaskInNode(wasmPath, task);\n        resultArray = JSON.parse(result)?.answers;\n        console.log('solveTask result:', resultArray);\n    } catch (err) {\n        console.error('Error running solveTask:', err);\n    }\n    return resultArray;\n};\n\n/**\n * Verifies the POW answer with the server.\n * @param task The original POW task.\n * @param answers The answers to verify.\n * @returns The CAPTCHA token.\n */\nexport const verifyPowAnswer = async (task:TaskInput, answers: PowAnswer[]): Promise<string> => {\n    const verifyUrl = 'https://pow.wildberries.ru/api/v1/short/verify-answer';\n\n    const data = {\n        task,\n        answers,\n    };\n\n    console.log('data', data);\n\n    const response: AxiosResponse<{ 'wb-captcha-short-token': string }> = await axios.post(verifyUrl, JSON.stringify(data), {\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            'Accept': '*/*',\n            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',\n            'Origin': 'https://seller.wildberries.ru',\n            'Referer': 'https://seller.wildberries.ru/',\n            'sec-ch-ua': '\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\"',\n            'sec-ch-ua-mobile': '?0',\n            'sec-ch-ua-platform': '\"macOS\"',\n            'sec-fetch-dest': 'empty',\n            'sec-fetch-mode': 'cors',\n            'sec-fetch-site': 'same-site',\n        },\n    });\n\n    return response.data['wb-captcha-short-token'];\n};\n","// nodejs-server/controllers/draftsController.ts\n\nimport {Request, RequestHandler, Response} from 'express';\nimport fs from 'fs';\nimport path from 'path';\nimport axios, { AxiosResponse } from 'axios';\nimport {getDraftsForUser} from \"../services/wildberriesService\";\n\n// Define Interfaces for Storage State\ninterface Cookie {\n    name: string;\n    value: string;\n}\n\ninterface LocalStorageItem {\n    name: string;\n    value: string;\n}\n\ninterface OriginData {\n    origin: string;\n    localStorage: LocalStorageItem[];\n}\n\ninterface StorageState {\n    cookies: Cookie[];\n    origins: OriginData[];\n}\n\n// Define Interfaces for Drafts Response\ninterface Draft {\n    createdAt: string;\n    updatedAt: string;\n    barcodeQuantity: number;\n    goodQuantity: number;\n    author: string;\n    ID: string;\n}\n\ninterface DraftsResult {\n    drafts: Draft[];\n}\n\ninterface DraftsApiResponse {\n    result: DraftsResult;\n}\n\n// Define Interface for Row Data\ninterface RowData {\n    createdAt: string;\n    updatedAt: string;\n    barcodeQuantity: string;\n    goodQuantity: string;\n    author: string;\n    draftId: string;\n    url: string;\n}\n\n/**\n * List Drafts Endpoint\n * Expects a query parameter: userId\n */\nexport const listDrafts:RequestHandler = async (req: Request, res: Response): Promise<void> => {\n    const { userId } = req.query;\n\n    if (!userId || typeof userId !== 'string') {\n        res.status(400).json({ error: 'Missing or invalid userId parameter.' });\n        return\n    }\n\n    try {\n        const drafts = await getDraftsForUser(userId);\n        res.status(200).json({\n            message: `Found ${drafts.length} drafts with barcodeQuantity > 0.`,\n            data: drafts,\n        });\n        return\n    } catch (error: any) {\n        console.error('Error fetching drafts data:', error.message);\n        res.status(500).json({ error: 'Internal Server Error.' });\n        return\n    }\n};\n","// nodejs-server/controllers/ordersController.ts\n\nimport { Request, Response } from 'express';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport axios, { AxiosResponse } from 'axios';\nimport {createOrderRequest} from \"../services/wildberriesService\";\n\n/**\n * Interfaces for the storage state structure.\n */\ninterface Cookie {\n    name: string;\n    value: string;\n}\n\ninterface LocalStorageItem {\n    name: string;\n    value: string;\n}\n\ninterface OriginData {\n    origin: string;\n    localStorage: LocalStorageItem[];\n}\n\ninterface StorageState {\n    cookies: Cookie[];\n    origins: OriginData[];\n}\n\ninterface CreateSupplyResult {\n    result?: {\n        ids: { Id: string }[];\n    };\n}\n\ninterface RecommendationsResult {\n    warehouses: Warehouse[];\n}\n\ninterface Warehouse {\n    isActive: boolean;\n    // Add other relevant properties as needed\n}\n\n/**\n * Handler to create an order.\n * Expects a JSON body: { userId, draftId, warehouseId, boxTypeMask }\n */\nexport const createOrder = async (req: Request, res: Response): Promise<void> => {\n    const { userId, draftId, warehouseId, boxTypeMask } = req.body;\n\n    // Validate request body\n    if (!userId || !draftId || !warehouseId || !boxTypeMask) {\n        res.status(400).json({ error: 'Missing userId, draftId, warehouseId, or boxTypeMask in request body.' });\n        return;\n    }\n\n    try {\n        const response = await createOrderRequest(userId, draftId, warehouseId, boxTypeMask);\n\n        // Respond with success and the preorderID\n        res.status(200).json({\n            message: 'Order created successfully.',\n            preorderID: response.preorderID,\n        });\n    } catch (error: any) {\n        console.error('Error during order creation:', error.message);\n        res.status(500).json({ error: 'Internal Server Error.' });\n    }\n};\n\n/**\n * Handler to list warehouses.\n * Expects query parameters: { userId, draftId }\n */\nexport const listWarehouses = async (req: Request, res: Response): Promise<void> => {\n    const { userId, draftId } = req.query;\n\n    // Validate query parameters\n    if (typeof userId !== 'string' || typeof draftId !== 'string') {\n        res.status(400).json({ error: 'Missing or invalid userId or draftId in query parameters.' });\n        return;\n    }\n\n    try {\n        // Construct the path to the user's state.json\n        const statePath = path.join('/var/www/wb-back/storage/state', `${userId}.json`);\n\n        // Check if the state file exists\n        if (!fs.existsSync(statePath)) {\n            res.status(404).json({ error: 'User state not found.' });\n            return;\n        }\n\n        // Read and parse the storage state\n        const storageStateRaw = fs.readFileSync(statePath, 'utf-8');\n        const storageState: StorageState = JSON.parse(storageStateRaw);\n\n        // Extract cookies and construct the Cookie header\n        const cookies = storageState.cookies;\n        let cookieHeader = cookies.map(cookie => `${cookie.name}=${cookie.value}`).join('; ');\n\n        // Find origin data for Wildberries seller\n        const originData = storageState.origins.find(origin => origin.origin === 'https://seller.wildberries.ru');\n        if (!originData) {\n            res.status(400).json({ error: 'Origin data not found in state.' });\n            return;\n        }\n\n        // Retrieve WBTokenV3 from localStorage\n        const wbTokenEntry = originData.localStorage.find(item => item.name === 'wb-eu-passport-v2.access-token');\n        const wbTokenValue = wbTokenEntry ? wbTokenEntry.value : null;\n\n        if (!wbTokenValue) {\n            res.status(400).json({ error: 'WBTokenV3 token not found in localStorage.' });\n            return;\n        }\n\n        // Append WBTokenV3 to the Cookie header\n        cookieHeader += `; WBTokenV3=${wbTokenValue}`;\n\n        // Define HTTP headers for the request\n        const headers = {\n            'Content-Type': 'application/json',\n            'Cookie': cookieHeader,\n            'Accept': '*/*',\n            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',\n            'Origin': 'https://seller.wildberries.ru',\n            'Referer': 'https://seller.wildberries.ru/',\n            'Accept-Language': 'ru,en-GB;q=0.9,en-US;q=0.8,en;q=0.7',\n            'sec-ch-ua': '\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\"',\n        };\n\n        // **a. Get Warehouse Recommendations**\n        const recommendationsUrl = 'https://seller-supply.wildberries.ru/ns/sm-recommendations/supply-manager/api/v1/recommendations/getRecommendationsForWarehouses';\n        const recommendationsData = {\n            params: {\n                draftId: draftId\n            },\n            jsonrpc: \"2.0\",\n            id: \"json-rpc_20\"\n        };\n\n        // Make the POST request to get warehouse recommendations\n        const recommendationsResponse: AxiosResponse<{ result: RecommendationsResult }> = await axios.post(recommendationsUrl, recommendationsData, { headers });\n        const recommendationsResult = recommendationsResponse.data.result;\n\n        // Filter active warehouses\n        const activeWarehouses = recommendationsResult.warehouses.filter(warehouse => warehouse.isActive);\n        if (activeWarehouses.length === 0) {\n            res.status(400).json({ error: 'No active warehouses available.' });\n            return;\n        }\n\n        // Respond with the list of active warehouses\n        res.status(200).json({\n            message: 'Warehouses fetched successfully.',\n            warehouses: activeWarehouses,\n        });\n    } catch (error: any) {\n        console.error('Error during warehouse fetch:', error.message);\n        res.status(500).json({ error: 'Internal Server Error.' });\n    }\n};\n","import { Request, Response } from 'express';\nimport axios from 'axios';\n\n// Function to get goods\nexport const getGoods = async (req: Request, res: Response) => {\n    try {\n        const response = await axios.get('https://api.yclients.com/api/v1/goods/490462', {\n            headers: {\n                'Accept': 'application/vnd.api.v2+json',\n                'Authorization': 'Bearer rpxh9hw6sjakpdsha6r3, User eb4b7a6a59b300074be260e045ade57c'\n            }\n        });\n\n        res.status(200).json(response.data);\n    } catch (error: any) {\n        console.error('Error fetching goods:', error.message);\n        res.status(500).json({ error: 'Failed to get goods' });\n    }\n};\n\n// Function to get companies\nexport const getCompanies = async (req: Request, res: Response) => {\n    try {\n        const response = await axios.get('https://api.yclients.com/api/v1/companies', {\n            headers: {\n                'Accept': 'application/vnd.api.v2+json',\n                'Authorization': 'Bearer rpxh9hw6sjakpdsha6r3'\n            }\n        });\n\n        res.status(200).json(response.data);\n    } catch (error: any) {\n        console.error('Error fetching companies:', error.message);\n        res.status(500).json({ error: 'Failed to get companies' });\n    }\n};","// acceptance.ts\nimport { Router } from 'express';\nimport * as acceptanceController from '../controllers/acceptanceController';\n\nconst router: Router = Router();\n\n/**\n * @route   GET /api/acceptance/fetchTimeslots\n * @desc    Fetch available timeslots\n * @query   userId: string\n *          preorderId: string\n */\nrouter.get('/fetchTimeslots', acceptanceController.fetchTimeslots);\n\n/**\n * @route   POST /api/acceptance/bookTimeslot\n * @desc    Book a specific timeslot\n * @body    userId: string\n *          preorderId: string\n *          timeslotId: string\n */\nrouter.post('/bookTimeslot', acceptanceController.bookTimeslot);\n\nexport default router;","import { Router } from 'express';\nimport * as draftsController from '../controllers/draftsController';\n\nconst router: Router = Router();\n\n// GET /api/drafts/list\nrouter.get('/list', draftsController.listDrafts);\n\nexport default router;\n","// nodejs-server/routes/ordersRoutes.ts\n\nimport { Router } from 'express';\nimport * as ordersController from '../controllers/ordersController';\n\nconst router: Router = Router();\n\n// POST /api/orders/create\nrouter.post('/create', ordersController.createOrder);\n\n// GET /api/orders/warehouses\nrouter.get('/warehouses', ordersController.listWarehouses);\n\nexport default router;\n","// routes/yclientsRoutes.ts\n\nimport { Router } from 'express';\nimport * as yclientsController from '../controllers/yclientsController';\n\nconst router: Router = Router();\n\n// GET /api/yclients/goods\nrouter.get('/goods', yclientsController.getGoods);\n\n// GET /api/yclients/companies\nrouter.get('/companies', yclientsController.getCompanies);\n\nexport default router;\n","// src/services/UserService.ts\n\nimport axios from 'axios';\nimport CacheService from '../utils/redis/Cache/Cache';\nimport  {User, CreateCabinetResponse}  from '../telegraf/types/User';\nimport {PaginatedNotifications} from \"../telegraf/types/Notification\";\nimport { RegistrationSession } from '../telegraf/types/RegistrationSession';\nimport FormData from 'form-data';\nimport * as fs from 'node:fs';\n\ninterface NotificationResponse {\n    success: boolean;\n    message?: string;\n    data?: any;\n}\n\ninterface GetTasksParams {\n    page?: number;\n    per_page?: number;\n    filter?: 'active' | 'completed' | 'all';\n}\n\nexport interface Product {\n    good_id: number;\n    title: string;\n    actual_amount: [\n        {\n            amount: number;\n            storage_id: number;\n        }\n    ];\n}\n\nexport interface ProductsPaginatedResponse {\n    actual_amounts: any;\n    currentPage: number;\n    totalPages: number;\n    products: Product[];\n    allProducts: Product[];\n}\n\nexport interface ProductPaginatedResponse {\n    actual_amounts: any;\n    product: Product;\n}\n\nexport interface AuthResponse {\n    success: boolean;\n    token?: string;\n    user?: any;\n    message?: string;\n}\n\ninterface TaskPaginatedResponse {\n    success: boolean; // Добавляем поле success\n    data: {\n        current_page: number;\n        data: Task[];\n        total: number;\n        per_page: number;\n    };\n    meta: {\n        total: number;\n    };\n}\n\n// Добавляем интерфейсы\ninterface ScheduleSlot {\n    from: string;\n    to: string;\n}\n\ninterface StaffSchedule {\n    staff_id: number;\n    date: string;\n    slots: ScheduleSlot[];\n    busy_intervals?: Array<{\n        entity_type: string;\n        entity_id: number;\n        from: string;\n        to: string;\n    }>;\n    off_day_type?: number;\n}\n\ninterface ScheduleResponse {\n    success: boolean;\n    data: StaffSchedule[];\n    meta: {\n        count: number;\n    };\n}\n\ninterface WarehouseNotification {\n    company: any;\n    success: any;\n    product: any;\n    id: number;\n    telegram_id: number;\n    company_id: number;\n    product_id: number;\n    min_amount: number;\n    is_active: boolean;\n    last_notification_sent_at: string | null;\n    created_at: string;\n    updated_at: string;\n}\n\ninterface WarehouseNotificationForm {\n    productId: number | string;\n    minAmount: number;\n    type: 'warehouse';\n    branchId: string | number; // Добавляем поле\n}\n\ninterface PaginatedWarehouseNotifications {\n    min_amount: any;\n    current_amount: any;\n    product: any;\n    success: boolean;\n    data: {\n        current_page: number;\n        data: WarehouseNotification[];\n        total: number;\n        per_page: number;\n    };\n}\n\ninterface Task {\n    deadline: any;\n    id: number;\n    title: string;\n    description: string | null;\n    status: 'pending' | 'in_progress' | 'completed';\n    type: 'schedule_update' | 'photo_update' | 'description_update' | 'other';\n    master_phone: string | null;\n    master_name: string | null;\n    completed_at: string | null;\n    priority: number;\n    created_at: string;\n    updated_at: string;\n}\n\ninterface TaskResponse {\n    status: string;\n    success: boolean;\n    data: Task;\n    message?: string;\n}\n\ninterface TasksResponse {\n    success: boolean;\n    data: {\n        current_page: number;\n        data: Task[];\n        total: number;\n        per_page: number;\n    };\n    meta: {\n        total: number;\n    };\n}\n\nclass LaravelService {\n    private laravelApiUrl: string;\n    \n\n    constructor() {\n        const apiUrl = process.env.LARAVEL_API_URL;\n        if (!apiUrl) {\n            throw new Error('LARAVEL_API_URL is not defined in environment variables.');\n        }\n        this.laravelApiUrl = apiUrl;\n    }\n\n    public async getTasks(params: GetTasksParams): Promise<TaskPaginatedResponse> {\n        try {\n            const response = await axios.get<TaskPaginatedResponse>(\n                `${this.laravelApiUrl}/admin-tasks`,\n                { params }\n            );\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching tasks:', error);\n            throw error;\n        }\n    }\n\n    public async sendTaskNotificationToAdmin(taskId: number): Promise<void> {\n        try {\n            // Отправляем уведомление через NodeJS API\n            await axios.post(`${this.laravelApiUrl}/admin-notifications/send`, {\n                task_id: taskId,\n                type: 'new_task'\n            });\n        } catch (error) {\n            console.error('Error sending notification to admin:', error);\n        }\n    }\n\n    public async getMasterPhoto(phone: string): Promise<any> {\n        try {\n            const response = await axios.post(`${this.laravelApiUrl}/masters/get-photo`, {\n                phone: phone\n            });\n    \n            return response.data;\n    \n        } catch (error) {\n            console.error('Error getting master photo:', error);\n            return {\n                success: false,\n                message: 'Ошибка при получении фото мастера'\n            };\n        }\n    }\n    \n    public async getTaskById(id: number): Promise<TaskResponse> {\n        try {\n            const response = await axios.get<TaskResponse>(\n                `${this.laravelApiUrl}/admin-tasks/${id}`\n            );\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching task:', error);\n            throw error;\n        }\n    }\n    \n    public async completeTask(taskId: number): Promise<TaskResponse> {\n        try {\n            const response = await axios.post<TaskResponse>(\n                `${this.laravelApiUrl}/admin-tasks/${taskId}/complete`\n            );\n            return response.data;\n        } catch (error) {\n            console.error('Error completing task:', error);\n            throw error;\n        }\n    }\n    \n    public async updateTaskStatus(\n        taskId: number, \n        status: 'pending' | 'in_progress' | 'completed'\n    ): Promise<TaskResponse> {\n        try {\n            const response = await axios.put<TaskResponse>(\n                `${this.laravelApiUrl}/admin-tasks/${taskId}/status`,\n                { status }\n            );\n            return response.data;\n        } catch (error) {\n            console.error('Error updating task status:', error);\n            throw error;\n        }\n    }\n    \n    async createTaskForMaster({\n        type,\n        masterPhone,\n        masterName,\n        description = null\n    }: {\n        type: 'schedule_update' | 'photo_update' | 'description_update';\n        masterPhone: string;\n        masterName: string;\n        description?: string | null;\n    }): Promise<TaskResponse> {\n        try {\n            // Формируем заголовок в зависимости от типа задачи\n            const titles = {\n                'description_update': `Обновить описание мастера ${masterName}`,\n                'photo_update': `Обновить фото мастера ${masterName}`,\n                'schedule_update': `Обновить расписание мастера ${masterName}`\n            };\n    \n            const response = await axios.post<TaskResponse>(\n                `${this.laravelApiUrl}/admin-tasks`,\n                {\n                    type,\n                    master_phone: masterPhone,\n                    master_name: masterName,\n                    description,\n                    title: titles[type]\n                }\n            );\n\n            if (response.data.success && response.data.data) {\n                // Отправляем уведомление админам\n                await this.sendAdminNotification(response.data.data.id, type);\n            }\n    \n            return response.data;\n        } catch (error) {\n            console.error('Error creating task for master:', error);\n            throw error;\n        }\n    }\n\n    private async sendAdminNotification(taskId: number, type: string): Promise<void> {\n        try {\n            await axios.post(`${this.laravelApiUrl}/admin-notifications/send`, {\n                task_id: taskId,\n                type: type\n            });\n        } catch (error) {\n            console.error('Error sending admin notification:', error);\n            // Не выбрасываем ошибку, чтобы не прерывать основной процесс\n        }\n    }\n\n    public async getMasterByPhone(phone: string): Promise<{ name: string; id: number } | null> {\n        try {\n            const response = await axios.post(\n                `${this.laravelApiUrl}/masters/info`,\n                { phone }\n            );\n    \n            if (response.data.success) {\n                return {\n                    name: response.data.data.name,\n                    id: response.data.data.id\n                };\n            }\n            return null;\n        } catch (error) {\n            console.error('Error getting master info:', error);\n            return null;\n        }\n    }\n    \n    public async deleteTask(taskId: number): Promise<{ success: boolean; message?: string }> {\n        try {\n            const response = await axios.delete(\n                `${this.laravelApiUrl}/admin-tasks/${taskId}`\n            );\n            return response.data;\n        } catch (error) {\n            console.error('Error deleting task:', error);\n            throw error;\n        }\n    }\n    \n    // Метод для изменения приоритета задачи\n    public async updateTaskPriority(\n        taskId: number,\n        priority: number\n    ): Promise<TaskResponse> {\n        try {\n            const response = await axios.put<TaskResponse>(\n                `${this.laravelApiUrl}/admin-tasks/${taskId}/priority`,\n                { priority }\n            );\n            return response.data;\n        } catch (error) {\n            console.error('Error updating task priority:', error);\n            throw error;\n        }\n    }\n    \n    // Метод для добавления комментария к задаче\n    public async addTaskComment(\n        taskId: number,\n        comment: string\n    ): Promise<TaskResponse> {\n        try {\n            const response = await axios.post<TaskResponse>(\n                `${this.laravelApiUrl}/admin-tasks/${taskId}/comments`,\n                { comment }\n            );\n            return response.data;\n        } catch (error) {\n            console.error('Error adding task comment:', error);\n            throw error;\n        }\n    }\n    \n    // Метод для обновления дедлайна задачи\n    public async updateTaskDeadline(\n        taskId: number,\n        deadline: string\n    ): Promise<TaskResponse> {\n        try {\n            const response = await axios.put<TaskResponse>(\n                `${this.laravelApiUrl}/admin-tasks/${taskId}/deadline`,\n                { deadline }\n            );\n            return response.data;\n        } catch (error) {\n            console.error('Error updating task deadline:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Retrieves a user by their Telegram ID.\n     * Utilizes CacheService.rememberCacheValue for caching.\n     *\n     * @param telegramId - The Telegram ID of the user.\n     * @param ex\n     * @returns A Promise that resolves to the User object or null if not found.\n     */\n    public async getUserByTelegramId(telegramId: number, ex: number = 3600): Promise<User | null> {\n        const cacheKey = `user_telegram_id_${telegramId}`;\n        try {\n            const user: User | null = await CacheService.rememberCacheValue(\n                cacheKey,\n                () => this.fetchUserFromApi(telegramId),\n                ex // Cache expiration set to 1 hour (3600 seconds)\n            );\n            console.log(`User fetched for Telegram ID ${telegramId}:`, user);\n            return user;\n        } catch (error) {\n            console.error('Error fetching user:', error);\n            return null;\n        }\n    }\n\n    // Создание уведомления об остатках\n    public async createWarehouseNotification(\n        telegramId: number,\n        data: WarehouseNotificationForm\n    ): Promise<WarehouseNotification | null> {\n        try {\n            const response = await axios.post<{ success: boolean; data: WarehouseNotification }>(\n                `${this.laravelApiUrl}/warehouse-notifications`,\n                {\n                    telegram_id: telegramId,\n                    product_id: data.productId,\n                    min_amount: data.minAmount,\n                    branch_id: data.branchId // Добавляем branch_id\n                }\n            );\n    \n            if (!response.data.success) {\n                throw new Error('Failed to create warehouse notification');\n            }\n    \n            return response.data.data;\n        } catch (error) {\n            console.error('Error creating warehouse notification:', error);\n            throw error;\n        }\n    }\n\n    public async getWarehouseNotification(id: number): Promise<any> {\n        try {\n            const response = await axios.get(\n                `${this.laravelApiUrl}/warehouse-notifications/${id}`\n            );\n            return response.data;\n        } catch (error) {\n            console.error('Error getting single warehouse notification:', error);\n            return null;\n        }\n    }\n\n    // Получение списка уведомлений\n    public async getWarehouseNotifications(\n        telegramId: number,\n        branchId: number | null = null,\n        page: number = 1,\n        perPage: number = 10\n    ): Promise<PaginatedWarehouseNotifications | null> {\n        try {\n            console.log('Fetching warehouse notifications:', { telegramId, branchId, page, perPage });\n            \n            const response = await axios.get<PaginatedWarehouseNotifications>(\n                `${this.laravelApiUrl}/warehouse-notifications`,\n                {\n                    params: {\n                        telegram_id: telegramId,\n                        branch_id: branchId,\n                        page,\n                        per_page: perPage\n                    }\n                }\n            );\n    \n            console.log('Warehouse notifications response:', response.data);\n            return response.data;\n        } catch (error) {\n            console.error('Error getting warehouse notifications:', error);\n            return null;\n        }\n    }\n\n    // Обновление уведомления\n    public async updateWarehouseNotification(\n        id: number,\n        data: { min_amount: number }\n    ): Promise<any> {\n        try {\n            const response = await axios.put(\n                `${this.laravelApiUrl}/warehouse-notifications/${id}`,\n                data\n            );\n    \n            // Если получили ответ с данными - значит запрос успешен\n            return {\n                success: true,\n                data: response.data\n            };\n        } catch (error) {\n            throw new Error('Failed to update notification');\n        }\n    }\n\n    // Удаление уведомления\n    public async deleteWarehouseNotification(id: number): Promise<boolean> {\n        try {\n            const response = await axios.delete(\n                `${this.laravelApiUrl}/warehouse-notifications/${id}`\n            );\n\n            return response.data.success || false;\n        } catch (error) {\n            console.error('Error deleting warehouse notification:', error);\n            throw error;\n        }\n    }\n\n\n    /**\n     * Retrieves paginated notifications for a user by their Telegram ID.\n     *\n     * @param telegramId - The Telegram ID of the user.\n     * @param page - The page number to retrieve.\n     * @param perPage - Number of notifications per page.\n     * @param type - Either 'search' or 'booking'.\n     * @param id\n     * @returns A Promise that resolves to PaginatedNotifications or null if not found.\n     */\n    public async getNotificationsByTelegramId(\n        telegramId: number,\n        page: number = 1,\n        perPage: number = 1,\n        type: string = 'search',\n        id: number = null\n    ): Promise<PaginatedNotifications | null> {\n        const cacheKey = `notifications_${type}_telegram_id_${telegramId}_page_${page}`;\n        try {\n            const notifications: PaginatedNotifications | null = await CacheService.rememberCacheValue(\n                cacheKey,\n                () => this.fetchNotificationsFromApi(telegramId, page, perPage, type, id),\n                60 // Cache expiration set to 2 hours (7200 seconds)\n            );\n            return notifications;\n        } catch (error) {\n            console.error('Error fetching notifications:', error);\n            return null;\n        }\n    }\n\n    async rescheduleNotification(\n        notificationId: number, \n        newDateTime: string\n    ): Promise<{ success: boolean; data?: any }> {\n        try {\n            const response = await axios.patch(\n                `${this.laravelApiUrl}/admin-notifications/${notificationId}/reschedule`,\n                {\n                    notification_datetime: newDateTime\n                }\n            );\n            return response.data;\n        } catch (error) {\n            console.error('Error rescheduling notification:', error);\n            throw error;\n        }\n    }\n\n    public async createNotificationByTelegramId(\n        telegramId: number,\n        settings: any\n    ): Promise<NotificationResponse> {\n        try {\n            const response = await axios.post<NotificationResponse>(\n                `${this.laravelApiUrl}/admin-notifications`,\n                {\n                    telegram_id: telegramId,\n                    name: settings.name,\n                    sum: settings.sum,\n                    notification_datetime: this.formatDateTime(settings.dateTime),\n                    type: settings.type,\n                    frequency: settings.frequency,\n                    frequency_value: settings.frequency_value,\n                    is_active: true\n                }\n            );\n    \n            if (!response.data.success) {\n                throw new Error('Failed to create notification');\n            }\n    \n            return response.data;\n        } catch (error) {\n            console.error('Error creating notification:', error);\n            throw error;\n        }\n    }\n    \n    // Вспомогательный метод для форматирования даты и времени\n    private formatDateTime(dateTimeStr: string): string {\n        const [date, time] = dateTimeStr.split(' ');\n        const [day, month, year] = date.split('.');\n        return `${year}-${month}-${day} ${time}:00`;\n    }\n\n    // Получение списка уведомлений\npublic async getAdminNotifications(\n    telegramId: number,\n    page: number = 1,\n    perPage: number = 10\n): Promise<PaginatedNotifications | null> {\n    try {\n        const response = await axios.get<PaginatedNotifications>(\n            `${this.laravelApiUrl}/admin-notifications`,\n            {\n                params: {\n                    telegram_id: telegramId,\n                    page,\n                    per_page: perPage\n                }\n            }\n        );\n        return response.data;\n    } catch (error) {\n        console.error('Error getting admin notifications:', error);\n        return null;\n    }\n}\n\n// Получение конкретного уведомления\npublic async getAdminNotification(id: number): Promise<any> {\n    try {\n        const response = await axios.get(\n            `${this.laravelApiUrl}/admin-notifications/${id}`\n        );\n        return response.data;\n    } catch (error) {\n        console.error('Error getting admin notification:', error);\n        return null;\n    }\n}\n\n// Обновление уведомления\npublic async updateAdminNotification(\n    id: number,\n    settings: any\n): Promise<any> {\n    try {\n        const response = await axios.put(\n            `${this.laravelApiUrl}/admin-notifications/${id}`,\n            settings\n        );\n        return response.data;\n    } catch (error) {\n        console.error('Error updating admin notification:', error);\n        throw error;\n    }\n}\n\n// Удаление уведомления\npublic async deleteAdminNotification(id: number): Promise<boolean> {\n    try {\n        const response = await axios.delete(\n            `${this.laravelApiUrl}/admin-notifications/${id}`\n        );\n        return response.data.success || false;\n    } catch (error) {\n        console.error('Error deleting admin notification:', error);\n        throw error;\n    }\n}\n\n    public async updateNotificationById(\n        notificationId: string | number,\n        settings: any,\n    ): Promise<PaginatedNotifications | null> {\n        try {\n            const response = await axios.put<PaginatedNotifications>(\n                `${this.laravelApiUrl}/notifications/telegram/update/${notificationId}`,\n                {\n                    settings\n                }\n            );\n            return response.data;\n        } catch (error) {\n            console.error('Error creating notification:', error);\n            throw new Error('Error creating notification');\n        }\n    }\n\n    /**\n     * Creates a cabinet for a user identified by their Telegram ID.\n     * Utilizes caching to store and update the user data.\n     *\n     * @param telegramId - The Telegram ID of the user.\n     * @param name - The name of the cabinet to be created.\n     * @param phoneNumber - The phone number associated with the cabinet.\n     * @param userId\n     * @param statePath\n     * @returns A Promise that resolves to the updated User object or null if an error occurs.\n     */\n    public async createCabinetByTelegramId(\n        telegramId: number,\n        name: string,\n        phoneNumber: string,\n        userId: string,\n        statePath: string,\n    ): Promise<User | null> {\n\n        const cacheKey = `user_new_cabinet_${telegramId}`;\n\n        try {\n            // Prepare the payload for the POST request\n            const payload = {\n                name,\n                phone_number: phoneNumber,\n                user_id: userId,\n                state_path: statePath,\n            };\n\n            // Make the POST request to create a cabinet\n            const response = await this.createCabinet<CreateCabinetResponse>(\n                `/cabinets/telegram/${telegramId}`,\n                payload\n            );\n\n            // Extract the updated user from the response\n            const updatedUser: User = response?.user || null;\n\n            // Update the cache with the new user data\n            await CacheService.set(cacheKey, updatedUser, 3600); // Cache expires in 1 hour\n\n            console.log(`Cabinet \"${name}\" created for Telegram ID ${telegramId}. Updated user data cached.`);\n            return updatedUser;\n        } catch (error) {\n            // Handle errors (e.g., user not found, validation errors)\n            console.error(`Error creating cabinet for Telegram ID ${telegramId}:`, error);\n\n            // Optionally, you can handle specific error types here\n            // For example, if using Axios, you can check error.response.status\n\n            return null;\n        }\n    }\n\n    public async deleteCabinetByTelegramId(\n        telegramId: number,\n        cabinetId: string) {\n        try {\n            const response = await axios.delete(\n                `${this.laravelApiUrl}/cabinets/telegram/${telegramId}/${cabinetId}`\n            );\n            return response.data;\n        } catch (error) {\n            console.error('Error deleting cabinet:', error);\n            throw new Error('Error deleting cabinet');\n        }\n    }\n\n    public async updateCabinetByTelegramId(\n        telegramId: number,\n        cabinetId: string,\n        payload: any) {\n        try {\n            const response = await axios.put(\n                `${this.laravelApiUrl}/cabinets/telegram/${telegramId}/${cabinetId}`, {\n                    name: payload.name,\n                    settings: payload.settings\n                }\n            );\n            return response.data;\n        } catch (error) {\n            console.error('Error updating cabinet:', error);\n            throw new Error('Error updating cabinet');\n        }\n    }\n\n    public async deleteNotification(\n        notificationId: string | number\n    ): Promise<void> {\n        try {\n            await axios.delete(\n                `${this.laravelApiUrl}/notifications/telegram/${notificationId}`\n            );\n        } catch (error) {\n            console.error('Error deleting notification:', error);\n            throw new Error('Error deleting notification');\n        }\n    }\n\n    /**\n     * Fetches the user data from the Laravel API.\n     *\n     * @param telegramId - The Telegram ID of the user.\n     * @returns A Promise that resolves to the User object.\n     */\n    private async fetchUserFromApi(telegramId: number): Promise<User> {\n        const response = await axios.get<User>(`${this.laravelApiUrl}/users/telegram/${telegramId}`);\n        return response.data;\n    }\n\n    /**\n     * Fetches paginated notifications from the Laravel API.\n     *\n     * @param telegramId - The Telegram ID of the user.\n     * @param page - The page number to retrieve.\n     * @param perPage - Number of notifications per page.\n     * @param type - Either 'search' or 'booking'.\n     * @param id\n     * @returns A Promise that resolves to PaginatedNotifications.\n     */\n    private async fetchNotificationsFromApi(\n        telegramId: number,\n        page: number,\n        perPage: number,\n        type: string,\n        id: string | number,\n    ): Promise<PaginatedNotifications> {\n        const response = await axios.get<PaginatedNotifications>(\n            `${this.laravelApiUrl}/notifications/telegram/${telegramId}`,\n            {\n                params: {\n                    page,\n                    per_page: perPage,\n                    type,\n                    id\n                },\n            }\n        );\n        return response.data;\n    }\n\n    /**\n     * Makes a POST request to create a cabinet.\n     *\n     * @param url - The API endpoint URL.\n     * @param data - The data to be sent in the request body.\n     * @returns A Promise that resolves to the response data.\n     * @template T - The type of the response data.\n     * @private\n     * */\n\n    private async createCabinet<T>(url: string, data: any): Promise<T> {\n        const response = await axios.post<T>(`${this.laravelApiUrl}${url}`, data);\n        return response.data;\n    }\n\n\n\n    async getProductsByTelegramId(telegramId: number, page: number = 1, perPage: number = 10): Promise<ProductsPaginatedResponse> {\n        const cacheKey = `products_telegram_id_${telegramId}`;\n        try {\n            // Получаем данные из кэша или API\n            const response: any = await CacheService.rememberCacheValue(\n                cacheKey,\n                () => this.fetchProductsFromApi(telegramId),\n                3600 * 24\n            );\n    \n            // Извлекаем массив продуктов из поля data\n            const products = Array.isArray(response?.data) ? response.data : [];\n    \n            // Пагинация\n            const totalProducts = products.length;\n            const totalPages = Math.ceil(totalProducts / perPage);\n            page = Math.max(1, Math.min(totalPages || 1, page));\n            const start = (page - 1) * perPage;\n            const currentProducts = products.slice(start, start + perPage);\n    \n            return {\n                actual_amounts: undefined,\n                currentPage: page,\n                totalPages,\n                products: currentProducts,\n                allProducts: products\n            };\n        } catch (error) {\n            console.error('Error fetching products:', error);\n            return {\n                actual_amounts: undefined,\n                currentPage: 1,\n                totalPages: 0,\n                products: [],\n                allProducts: []\n            };\n        }\n    }\n\n    async getTaskByTelegramId(telegramId: number, page: number = 1, perPage: number = 10): Promise<TaskPaginatedResponse> {\n        const cacheKey = `task_telegram_id_${telegramId}`;\n        try {\n            // Получаем задачи из кеша или API с правильной типизацией\n            const response: { data: Task[] } | null = await CacheService.rememberCacheValue(\n                cacheKey,\n                () => this.fetchTasksFromApi(telegramId),\n                10\n            );\n    \n            if (!response || !Array.isArray(response.data)) {\n                return this.createEmptyResponse(page, perPage);\n            }\n    \n            // Пагинация\n            const tasks = response.data;\n            const totalTasks = tasks.length;\n            const totalPages = Math.max(1, Math.ceil(totalTasks / perPage));\n            const validPage = Math.max(1, Math.min(totalPages, page));\n            const start = (validPage - 1) * perPage;\n            const currentTasks = tasks.slice(start, start + perPage);\n    \n            // Возвращаем данные в формате TaskPaginatedResponse\n            return {\n                success: true,\n                data: {\n                    current_page: validPage,\n                    data: currentTasks,\n                    total: totalTasks,\n                    per_page: perPage\n                },\n                meta: {\n                    total: totalTasks\n                }\n            };\n        } catch (error) {\n            console.error('Error fetching tasks:', {\n                error,\n                telegram_id: telegramId,\n                page,\n                per_page: perPage\n            });\n            \n            return this.createEmptyResponse(page, perPage);\n        }\n    }\n    \n    // Вспомогательный метод для создания пустого ответа\n    private createEmptyResponse(page: number, perPage: number): TaskPaginatedResponse {\n        return {\n            success: false,\n            data: {\n                current_page: page,\n                data: [],\n                total: 0,\n                per_page: perPage\n            },\n            meta: {\n                total: 0\n            }\n        };\n    }\n    \n    // Типизированный метод для получения задач из API\n    private async fetchTasksFromApi(telegramId: number): Promise<{ data: Task[] }> {\n        const response = await axios.get<{ data: Task[] }>(\n            `${this.laravelApiUrl}/tasks`,\n            {\n                params: {\n                    telegram_id: telegramId\n                }\n            }\n        );\n        \n        return response.data;\n    }\n\n    async closeTask(taskId: number, telegramId: number): Promise<void> {\n        try {\n            const cacheKey = `task_telegram_id_${telegramId}_task_id_${taskId}`;\n            const cacheKey2 = `task_telegram_id_${telegramId}`;\n            cacheKey && await CacheService.forget(cacheKey);\n            cacheKey2 && await CacheService.forget(cacheKey2);\n\n\n            await axios.put(`${this.laravelApiUrl}/tasks/close/${taskId}`);\n        } catch (error) {\n            console.error('Error closing task:', error);\n            throw new Error('Error closing task');\n        }\n    }\n\n   \n\n    async getOneProductByTelegramId(telegramId: number, product_id: number): Promise<ProductPaginatedResponse> {\n        const cacheKey = `product_telegram_id_${telegramId}_product_id_${product_id}`;\n        try {\n            // Fetch products from cache or API\n            const product: any = await CacheService.rememberCacheValue(\n                cacheKey,\n                () => this.fetchProductsFromApi(telegramId, product_id),\n                86400 // Cache expiration set to 24 hours (86400 seconds)\n            );\n\n\n\n            // Prepare response with pagination details\n            return product;\n        } catch (error) {\n            console.error('Error fetching products:', error);\n            return null;\n        }\n    }\n\n\n    private async fetchProductsFromApi(telegramId: number, product_id: number = null): Promise<any> {\n        try {\n            if (product_id === null) {\n                const response = await axios.get(`${this.laravelApiUrl}/yclients/goods/${telegramId}`);\n                // Возвращаем весь ответ, так как нам нужна структура с полями success, data, meta\n                return response.data;\n            } else {\n                const response = await axios.get(`${this.laravelApiUrl}/yclients/goods/${telegramId}&product_id=${product_id}`);\n                return response.data;\n            }\n        }\n        catch (error) {\n            console.error('Error fetching products:', error);\n            throw new Error('Error fetching products');\n        }\n    }\n\n   \n\n    async getUsersByTelegramId(telegramId: number, page: number = 1, perPage: number = 10): Promise<any> {\n        const cacheKey = `users_telegram_id_${telegramId}`;\n        try {\n            // Fetch products from cache or API\n            const users: any = await CacheService.rememberCacheValue(\n                cacheKey,\n                () => this.fetchUsersFromApi(telegramId),\n                10 // Cache expiration set to 24 hours (86400 seconds)\n            );\n\n            // Paginate products\n            const totalUsers = users.length;\n            const totalPages = Math.ceil(totalUsers / perPage);\n            page = Math.max(1, Math.min(totalPages, page));\n            const start = (page - 1) * perPage;\n            const currentUsers = users.slice(start, start + perPage);\n\n            // Prepare response with pagination details\n            return {\n                actual_amounts: undefined,\n                currentPage: page,\n                totalPages,\n                tasks: currentUsers,\n                allTasks: users\n            };\n        } catch (error) {\n            console.error('Error fetching tasks:', error);\n            return null;\n        }\n    }\n\n    async getUserById(telegramId: number, user_id: number): Promise<any> {\n        const cacheKey = `user_telegram_id_${telegramId}_user_id_${user_id}`;\n        try {\n            // Fetch products from cache or API\n            const user: any = await CacheService.rememberCacheValue(\n                cacheKey,\n                () => this.fetchUsersFromApi(telegramId, user_id),\n                10 // Cache expiration set to 24 hours (86400 seconds)\n            );\n\n            // Prepare response with pagination details\n            return user;\n        } catch (error) {\n            console.error('Error fetching tasks:', error);\n            return null;\n        }\n    }\n\n    private getHeaders() {\n        return {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        };\n    }\n\n    public async submitRegistration(data: RegistrationSession): Promise<any> {\n        try {\n            const formattedData = {\n                full_name: data.fullName,\n                birth_date: this.formatDate(data.birthDate),\n                passport_series_number: data.passport,\n                passport_issued_by: data.issuedBy?.toUpperCase(),\n                passport_issue_date: this.formatDate(data.issueDate),\n                passport_division_code: data.divisionCode,\n                registration_address: data.registrationAddress,\n                inn: data.inn,\n                account_number: data.accountNumber,\n                bank_name: data.bankName,\n                bik: data.bik,\n                correspondent_account: data.corrAccount,\n                bank_inn: data.bankInn,\n                bank_kpp: data.bankKpp,\n                phone: data.phone,\n                email: data.email,\n                has_med_book: data.hasMedBook,\n                med_book_expiry: data.medBookExpiry ? this.formatDate(data.medBookExpiry) : null,\n                has_education_cert: data.hasEducationCert,\n                education_cert_photo: data.educationCertPhoto,\n                is_self_employed: data.isSelfEmployed,\n                master_price: data.masterPrice, // Добавляем поле master_price\n                work_address: data.selectedBranch?.address, // Добавляем адрес филиала\n                branch_name: data.selectedBranch?.name,     // Добавляем название филиала\n                branch_id: data.selectedBranch?.id,         // Добавляем ID филиала\n                telegram_id: data.telegram_id, // Добавляем telegram_id\n                status: 'pending'\n            };\n    \n            const response = await axios.post(\n                `${this.laravelApiUrl}/employee-registrations`,\n                formattedData,\n                {\n                    headers: {\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json'\n                    }\n                }\n            );\n    \n            // Если регистрация успешна, отправляем уведомление\n            if (response.data?.success || response.status === 201) {\n                try {\n                    await axios.post(\n                        `${this.laravelApiUrl}/admin-notifications/employment`,\n                        {\n                            registration_id: response.data.data.id,\n                            type: 'new_registration'\n                        },\n                        {\n                            headers: {\n                                'Accept': 'application/json',\n                                'Content-Type': 'application/json'\n                            }\n                        }\n                    );\n                } catch (notificationError) {\n                    console.error('Error sending registration notification:', {\n                        error: notificationError,\n                        registrationId: response.data.data.id,\n                        response: notificationError.response?.data\n                    });\n                }\n            }\n    \n            return response.data;\n        } catch (error) {\n            console.error('Error submitting registration:', error);\n            throw error;\n        }\n    }\n    \n    // Добавьте также вспомогательный метод, если его еще нет\n    private formatDate(dateStr?: string): string | null {\n        if (!dateStr) return null;\n        const [day, month, year] = dateStr.split('.');\n        return `${year}-${month}-${day}`;\n    }\n\n    public async generateContract(data: { id: number }): Promise<Buffer> {\n        try {\n            const response = await axios.post(\n                `${this.laravelApiUrl}/employee-registrations/generate-contract`,\n                data,\n                {\n                    headers: {\n                        'Accept': 'application/zip',\n                        'Content-Type': 'application/json'\n                    },\n                    responseType: 'arraybuffer',  // Добавляем настройки для правильной обработки больших файлов\n                    maxContentLength: Infinity,\n                    maxBodyLength: Infinity,\n                    timeout: 30000 // 30 секунд тайм-аут\n                }\n            );\n    \n            if (!response.data || response.data.length === 0) {\n                throw new Error('Empty response received');\n            }\n    \n            // Проверяем заголовки ответа\n            const contentType = response.headers['content-type'];\n            if (contentType?.includes('application/json')) {\n                // Если получили JSON с ошибкой\n                const errorText = new TextDecoder().decode(response.data);\n                const error = JSON.parse(errorText);\n                throw new Error(error.message || 'Contract generation failed');\n            }\n    \n            return Buffer.from(response.data);\n    \n        } catch (error) {\n            console.error('Contract generation error:', {\n                message: error.message,\n                response: error.response?.data\n            });\n            throw error;\n        }\n    }\n\n    public async getActiveRegistrations(): Promise<any[]> {\n        try {\n            const response = await axios.get(\n                `${this.laravelApiUrl}/employee-registrations/pending`,\n                {\n                    headers: this.getHeaders()\n                }\n            );\n            return response.data.data;\n        } catch (error) {\n            console.error('Error fetching active registrations:', error);\n            throw error;\n        }\n    }\n\n    \n    \n    public async getRegistrationDetails(id: string): Promise<any> {\n        try {\n            const response = await axios.get(\n                `${this.laravelApiUrl}/employee-registrations/${id}`,\n                {\n                    headers: this.getHeaders()\n                }\n            );\n            return response.data.data;\n        } catch (error) {\n            console.error('Error fetching registration details:', error);\n            throw error;\n        }\n    }\n    \n    public async sendEmploymentInvite(registrationId: string): Promise<any> {\n        try {\n            const response = await axios.post(\n                `${this.laravelApiUrl}/employee-registrations/${registrationId}/send-invite`,\n                {},\n                {\n                    headers: this.getHeaders()\n                }\n            );\n            return response.data;\n        } catch (error) {\n            console.error('Error sending employment invite:', error);\n            throw error;\n        }\n    }\n\n    public async getMasterSalary(\n        telegramId: number,\n        startDate: string,\n        endDate: string\n    ): Promise<any> {\n        try {\n            const response = await axios.get(\n                `${this.laravelApiUrl}/salary/master`,  // Исправленный URL\n                {\n                    params: {\n                        telegram_id: telegramId,\n                        start_date: startDate,\n                        end_date: endDate\n                    }\n                }\n            );\n    \n            return response.data;\n        } catch (error) {\n            console.error('Error getting master salary:', error);\n            throw error;\n        }\n    }\n\n    static async exportSalaryReport(): Promise<Buffer> {\n        try {\n            const response = await axios({\n                url: `${process.env.LARAVEL_API_URL}/salary/export`,\n                method: 'GET',\n                responseType: 'arraybuffer'\n            });\n            \n            return response.data;\n        } catch (error) {\n            console.error('Error exporting salary:', error);\n            throw error;\n        }\n    }\n    \n    public async createStaffProfile(registrationId: string): Promise<any> {\n        try {\n            const response = await axios.post(\n                `${this.laravelApiUrl}/employee-registrations/${registrationId}/create-staff-after-invite`,\n                {},\n                {\n                    headers: this.getHeaders()\n                }\n            );\n            return response.data;\n        } catch (error) {\n            console.error('Error creating staff profile:', error);\n            throw error;\n        }\n    }\n    \n    public async getRegistrationDocuments(id: string): Promise<any[]> {\n        try {\n            console.log('Fetching documents for registration:', id);\n            const response = await axios.get(\n                `${this.laravelApiUrl}/employee-registrations/${id}/documents`,\n                {\n                    headers: this.getHeaders()\n                }\n            );\n            console.log('Documents response:', response.data);\n            return response.data.data;\n        } catch (error) {\n            console.error('Error fetching registration documents:', error);\n            throw error;\n        }\n    }\n\n    async getMasterDocumentsByPhone(phone: string): Promise<any[]> {\n        try {\n            const response = await axios.get(\n                `${this.laravelApiUrl}/master/documents/${phone}`,\n                {\n                    headers: this.getHeaders()\n                }\n            );\n            return response.data.data;\n        } catch (error) {\n            console.error('Error fetching master documents:', error);\n            throw error;\n        }\n    }\n\n    \n    public async approveRegistration(id: string): Promise<void> {\n        try {\n            await axios.post(\n                `${this.laravelApiUrl}/employee-registrations/${id}/approve`,\n                {},\n                {\n                    headers: this.getHeaders()\n                }\n            );\n        } catch (error) {\n            console.error('Error approving registration:', error);\n            throw error;\n        }\n    }\n\n\n    \n    public async rejectRegistration(id: string): Promise<void> {\n        try {\n            await axios.post(\n                `${this.laravelApiUrl}/employee-registrations/${id}/reject`,\n                {},\n                {\n                    headers: this.getHeaders()\n                }\n            );\n        } catch (error) {\n            console.error('Error rejecting registration:', error);\n            throw error;\n        }\n    }\n\n    public async logout(telegramId: number): Promise<void> {\n        try {\n            // Очищаем токен в Redis через бэкенд\n            await axios.post(`${this.laravelApiUrl}/auth/logout`, {\n                telegram_id: telegramId\n            });\n    \n            // Очищаем локальный кэш\n            const cacheKey = `user_telegram_id_${telegramId}`;\n            await CacheService.forget(cacheKey);\n    \n        } catch (error) {\n            console.error('Logout error:', error);\n            // Даже если запрос завершился с ошибкой, очищаем локальный кэш\n            const cacheKey = `user_telegram_id_${telegramId}`;\n            await CacheService.forget(cacheKey);\n            // Не пробрасываем ошибку дальше, просто логируем\n        }\n    }\n\n    public async getBranchYclientsId(branchId: string): Promise<any> {\n        try {\n            const response = await axios.get(\n                `${this.laravelApiUrl}/branches/${branchId}/yclients-id`,\n                {\n                    headers: this.getHeaders()\n                }\n            );\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching branch yclients_id:', error);\n            throw error;\n        }\n    }\n\n    \n\n    public async updateMasterDescription(\n        phone: string,\n        password: string,\n        description: string\n    ): Promise<boolean> {\n        try {\n            console.log('Starting master description update:', {\n                phone,\n                descriptionLength: description.length\n            });\n    \n            const response = await axios.post(`${this.laravelApiUrl}/masters/update-description`, {\n                phone,\n                password,\n                description\n            });\n    \n            console.log('Full update description response:', {\n                status: response.status,\n                success: response.data?.success,\n                message: response.data?.message,\n                debug: response.data?.debug // Для отладочной информации с бэкенда\n            });\n    \n            if (!response.data?.success) {\n                console.error('Update description failed:', {\n                    message: response.data?.message,\n                    debug: response.data?.debug,\n                    responseData: response.data\n                });\n                return false;\n            }\n    \n            return true;\n        } catch (error: any) {\n            // Расширенное логирование ошибки\n            console.error('Error updating master description:', {\n                errorMessage: error?.message,\n                errorResponse: {\n                    status: error?.response?.status,\n                    statusText: error?.response?.statusText,\n                    data: error?.response?.data,\n                    debug: error?.response?.data?.debug\n                },\n                requestData: {\n                    phone,\n                    descriptionLength: description.length,\n                    url: `${this.laravelApiUrl}/masters/update-description`\n                }\n            });\n            \n            // Специфичные ошибки\n            if (error?.response?.status === 401) {\n                throw new Error('Неверный логин или пароль');\n            }\n            \n            if (error?.response?.status === 404) {\n                throw new Error('Мастер не найден в системе');\n            }\n            \n            throw new Error('Не удалось обновить описание: ' + \n                (error?.response?.data?.message || error.message));\n        }\n    }\n\n\n\n   private async fetchUsersFromApi(telegramId: number, user_id: number = null): Promise<any> {\n        try {\n            if (user_id === null) {\n                const response = await axios.get(`${this.laravelApiUrl}/staff?telegram_id=${telegramId}`);\n                return response.data;\n            } else {\n                const response = await axios.get(`${this.laravelApiUrl}/staff?telegram_id=${telegramId}&user_id=${user_id}`);\n                return response.data;\n            }\n        } catch (error) {\n            console.error('Error fetching tasks:', error);\n            throw new Error('Error fetching tasks');\n        }\n   }\n\n   async auth(phone: string, password: string, telegram_id: number): Promise<AuthResponse> {\n    try {\n        const response = await axios.post<AuthResponse>(`${this.laravelApiUrl}/auth`, {\n            phone,\n            password,\n            telegram_id\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Error authenticating:', error);\n        throw error; // Пробрасываем ошибку дальше для обработки в обработчике\n    }\n}\n\n// Добавляем новый метод в LaravelService\nasync authAdmin(phone: string, password: string, telegram_id: number): Promise<AuthResponse> {\n    try {\n        // Сначала получаем обычный ответ аутентификации\n        const response = await axios.post<AuthResponse>(`${this.laravelApiUrl}/auth/admin`, {\n            phone,\n            password,\n            telegram_id\n        });\n\n        // Проверяем роль пользователя\n        if (response.data.success && response.data.user) {\n            const userRole = response.data.user.user_role_slug;\n            \n            // Если роль не owner или administrator - возвращаем ошибку\n            if (!['owner', 'administrator'].includes(userRole)) {\n                return {\n                    success: false,\n                    message: 'Доступ запрещен: недостаточно прав. Этот бот доступен только для владельцев и администраторов.'\n                };\n            }\n        }\n\n        return response.data;\n    } catch (error) {\n        console.error('Error authenticating admin:', error);\n        if (axios.isAxiosError(error) && error.response?.data?.message) {\n            return {\n                success: false,\n                message: error.response.data.message\n            };\n        }\n        throw error;\n    }\n}\n\n\n\nasync uploadSignedDocuments(registrationId: number, files: Array<{url: string, name: string}>): Promise<any> {\n    try {\n        const response = await axios.post(\n            `${this.laravelApiUrl}/employee-registrations/${registrationId}/upload-signed-documents`,\n            { \n                files,\n                status: 'documents_uploaded'\n            },\n            {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            }\n        );\n\n        return response.data;\n    } catch (error) {\n        console.error('Error uploading signed documents:', {\n            error,\n            registrationId,\n            response: error.response?.data\n        });\n        throw error;\n    }\n}\n\npublic async getFilialStaff(\n    telegramId: number,\n    startDate: string,\n    endDate: string,\n    useAdminAuth: boolean = false\n): Promise<any> {\n    try {\n        const response = await axios.get(\n            `${this.laravelApiUrl}/staff/filial`,\n            {\n                params: {\n                    telegram_id: telegramId,\n                    start_date: startDate,\n                    end_date: endDate,\n                    use_admin_auth: useAdminAuth\n                }\n            }\n        );\n        return response.data;\n    } catch (error) {\n        console.error('Error getting filial staff:', error);\n        return null;\n    }\n}\n\n /**\n     * Получить расписание сотрудника\n     */\n public async getStaffSchedule(\n    telegramId: number,\n    startDate: string,\n    endDate: string,\n    useAdminAuth: boolean = false\n): Promise<ScheduleResponse | null> {\n    const cacheKey = `schedule_telegram_id_${telegramId}_${startDate}_${endDate}_${useAdminAuth}`;\n    \n    try {\n        // Логируем входные параметры\n        console.log('getStaffSchedule request params:', {\n            telegramId,\n            startDate,\n            endDate,\n            useAdminAuth,\n            cacheKey,\n            apiUrl: `${this.laravelApiUrl}/schedule`\n        });\n\n        // Временно отключаем кэширование для отладки\n        // const schedule = await CacheService.rememberCacheValue(\n        //     cacheKey,\n        //     async () => {\n        try {\n            console.log('Making API request to get schedule...');\n            \n            const response = await axios.get(\n                `${this.laravelApiUrl}/schedule`,\n                {\n                    params: {\n                        telegram_id: telegramId,\n                        start_date: startDate,\n                        end_date: endDate,\n                        use_admin_auth: useAdminAuth\n                    }\n                }\n            );\n\n            console.log('API Response received:', {\n                status: response.status,\n                statusText: response.statusText,\n                headers: response.headers,\n                data: response.data\n            });\n\n            return response.data;\n        } catch (apiError) {\n            console.error('API request error:', {\n                error: apiError,\n                response: apiError.response?.data,\n                status: apiError.response?.status\n            });\n            throw apiError;\n        }\n        //     },\n        //     300\n        // );\n\n        // return schedule;\n    } catch (error) {\n        console.error('Error in getStaffSchedule:', {\n            error: error.message,\n            stack: error.stack,\n            response: error.response?.data\n        });\n        return null;\n    }\n}\n\n\n// Обновляем метод updateStaffSchedule с правильными типами\npublic async updateStaffSchedule(\n    telegramId: number,\n    date: string,\n    scheduleData: {\n        schedules_to_set: Array<{\n            staff_id: number;\n            date: string;\n            slots: ScheduleSlot[];\n        }>;\n        schedules_to_delete: Array<{\n            staff_id: number;\n            date: string;\n        }>;\n    },\n    useAdminAuth: boolean\n): Promise<ScheduleResponse | null> {\n    try {\n        const response = await axios.put<ScheduleResponse>(\n            `${this.laravelApiUrl}/schedule`,\n            {\n                telegram_id: telegramId,\n                use_admin_auth: useAdminAuth,\n                ...scheduleData\n            }\n        );\n\n        if (!response.data.success) {\n            console.error('Failed to update schedule:', response.data);\n            return null;\n        }\n\n        // Очищаем кэш для этой даты и соседних дат\n        const clearDate = new Date(date);\n        const startDate = new Date(clearDate);\n        startDate.setDate(clearDate.getDate() - 7);\n        const endDate = new Date(clearDate);\n        endDate.setDate(clearDate.getDate() + 7);\n\n        const cacheKey = `schedule_telegram_id_${telegramId}_${startDate.toISOString().split('T')[0]}_${endDate.toISOString().split('T')[0]}`;\n        await CacheService.forget(cacheKey);\n\n        return response.data;\n    } catch (error) {\n        console.error('Error updating staff schedule:', error);\n        if (axios.isAxiosError(error)) {\n            const errorMessage = error.response?.data?.message || error.message;\n            throw new Error(`Не удалось обновить расписание: ${errorMessage}`);\n        }\n        throw error;\n    }\n}\n\n/**\n * Проверить доступность временного интервала\n */\npublic async checkTimeSlotAvailability(\n    telegramId: number,\n    date: string,\n    startTime: string,\n    endTime: string\n): Promise<boolean> {\n    try {\n        const response = await axios.get(\n            `${this.laravelApiUrl}/schedule/check-availability`,\n            {\n                params: {\n                    telegram_id: telegramId,\n                    date,\n                    start_time: startTime,\n                    end_time: endTime\n                }\n            }\n        );\n        return response.data.available || false;\n    } catch (error) {\n        console.error('Error checking time slot availability:', error);\n        return false;\n    }\n}\n\nasync updateMasterPhoto(\n    phone: string,\n    photoPath: string\n): Promise<any> {\n    try {\n        console.log('Starting master photo update:', {\n            phone,\n            photoPath\n        });\n\n        // Проверяем существование файла\n        if (!fs.existsSync(photoPath)) {\n            throw new Error('Photo file not found');\n        }\n\n        // Создаем FormData и добавляем файл и телефон\n        const form = new FormData();\n        form.append('photo', fs.createReadStream(photoPath));\n        form.append('phone', phone);\n\n        const response = await axios.post(\n            `${this.laravelApiUrl}/masters/update-photo`,\n            form,\n            {\n                headers: {\n                    ...form.getHeaders(),\n                },\n                maxContentLength: Infinity,\n                maxBodyLength: Infinity\n            }\n        );\n\n        console.log('Full update photo response:', {\n            status: response.status,\n            data: response.data\n        });\n\n        if (response.data) {\n            return response.data; // Возвращаем полный объект ответа\n        }\n\n        throw new Error('Invalid response format');\n\n    } catch (error: any) {\n        // Расширенное логирование ошибки\n        console.error('Error updating master photo:', {\n            errorMessage: error?.message,\n            errorResponse: {\n                status: error?.response?.status,\n                statusText: error?.response?.statusText,\n                data: error?.response?.data\n            },\n            requestData: {\n                phone,\n                photoPath,\n                url: `${this.laravelApiUrl}/masters/update-photo`\n            }\n        });\n\n        // Формируем объект ответа с ошибкой\n        const errorResponse = {\n            success: false,\n            message: 'Не удалось обновить фото',\n            error: error?.message\n        };\n\n        // Добавляем специфические ошибки\n        if (error?.response?.status === 401) {\n            errorResponse.message = 'Ошибка авторизации';\n        } else if (error?.response?.status === 404) {\n            errorResponse.message = 'Мастер не найден в системе';\n        } else if (error?.response?.status === 413) {\n            errorResponse.message = 'Файл слишком большой';\n        } else if (error?.response?.data?.message) {\n            errorResponse.message = error.response.data.message;\n        }\n\n        return errorResponse; // Возвращаем объект с информацией об ошибке\n    }\n}\n\npublic async getMasterRecords({\n    phone,\n    password,\n    params\n}: {\n    phone: string;\n    password: string;\n    params: {\n        start_date: string;\n        end_date: string;\n    }\n}): Promise<any> {\n    try {\n        console.log('Starting getMasterRecords:', {\n            phone,\n            date_range: params\n        });\n\n        // Делаем запрос к API для получения записей\n        const response = await axios.post(`${this.laravelApiUrl}/records/master`, {\n            phone,\n            password,\n            start_date: params.start_date,\n            end_date: params.end_date\n        });\n\n        console.log('Records response received:', {\n            status: response.status,\n            success: response.data?.success,\n            recordsCount: response.data?.data?.length ?? 0\n        });\n\n        // Проверяем успешность запроса\n        if (!response.data?.success) {\n            console.error('Failed to get master records:', {\n                message: response.data?.message,\n                data: response.data\n            });\n            return {\n                success: false,\n                message: response.data?.message || 'Не удалось получить записи'\n            };\n        }\n\n        return {\n            success: true,\n            data: response.data.data\n        };\n\n    } catch (error: any) {\n        console.error('Error in getMasterRecords:', {\n            errorMessage: error?.message,\n            errorResponse: {\n                status: error?.response?.status,\n                statusText: error?.response?.statusText,\n                data: error?.response?.data\n            },\n            requestData: {\n                phone,\n                date_range: params,\n                url: `${this.laravelApiUrl}/records/master`\n            }\n        });\n\n        // Обработка специфических ошибок\n        if (error?.response?.status === 401) {\n            throw new Error('Неверный логин или пароль');\n        }\n\n        if (error?.response?.status === 404) {\n            throw new Error('Мастер не найден в системе');\n        }\n\n        throw new Error('Не удалось получить записи: ' + \n            (error?.response?.data?.message || error.message));\n    }\n}\n\n// Получение деталей конкретной записи\npublic async getMasterRecordDetails({\n    phone,\n    password,\n    recordId\n}: {\n    phone: string;\n    password: string;\n    recordId: string;\n}): Promise<any> {\n    try {\n        console.log('Starting getMasterRecordDetails:', {\n            phone,\n            recordId\n        });\n\n        const response = await axios.post(`${this.laravelApiUrl}/records/master/details`, {\n            phone,\n            password,\n            record_id: recordId\n        });\n\n        if (!response.data?.success) {\n            console.error('Failed to get record details:', {\n                message: response.data?.message,\n                data: response.data\n            });\n            return {\n                success: false,\n                message: response.data?.message || 'Не удалось получить детали записи'\n            };\n        }\n\n        return {\n            success: true,\n            data: response.data.data\n        };\n\n    } catch (error: any) {\n        console.error('Error in getMasterRecordDetails:', {\n            errorMessage: error?.message,\n            errorResponse: {\n                status: error?.response?.status,\n                statusText: error?.response?.statusText,\n                data: error?.response?.data\n            }\n        });\n\n        if (error?.response?.status === 401) {\n            throw new Error('Неверный логин или пароль');\n        }\n\n        throw new Error('Не удалось получить детали записи: ' + \n            (error?.response?.data?.message || error.message));\n    }\n}\n\npublic async cancelMasterRecord({\n    phone,\n    password,\n    recordId\n}: {\n    phone: string;\n    password: string;\n    recordId: string;\n}): Promise<any> {\n    try {\n        console.log('Starting cancelMasterRecord:', {\n            phone,\n            recordId\n        });\n\n        const response = await axios.post(`${this.laravelApiUrl}/records/master/cancel`, {\n            phone,\n            password,\n            record_id: recordId\n        });\n\n        if (!response.data?.success) {\n            throw new Error(response.data?.message || 'Не удалось отменить запись');\n        }\n\n        return {\n            success: true,\n            message: response.data.message\n        };\n\n    } catch (error: any) {\n        console.error('Error in cancelMasterRecord:', {\n            errorMessage: error?.message,\n            errorResponse: error?.response?.data\n        });\n\n        throw new Error('Не удалось отменить запись: ' + \n            (error?.response?.data?.message || error.message));\n    }\n}\n\npublic async updateMasterRecord({\n    phone,\n    password,\n    recordId,\n    updateData\n}: {\n    phone: string;\n    password: string;\n    recordId: string;\n    updateData: any;\n}): Promise<any> {\n    try {\n        const response = await axios.post(`${this.laravelApiUrl}/records/master/update`, {\n            phone,\n            password,\n            record_id: recordId,\n            update_data: updateData\n        });\n\n        if (!response.data?.success) {\n            throw new Error(response.data?.message || 'Не удалось обновить запись');\n        }\n\n        return {\n            success: true,\n            data: response.data.data\n        };\n\n    } catch (error: any) {\n        console.error('Error in updateMasterRecord:', error);\n        throw new Error('Не удалось обновить запись: ' + \n            (error?.response?.data?.message || error.message));\n    }\n}\n\npublic async getMasterServices({\n    phone,\n    password\n}: {\n    phone: string;\n    password: string;\n}): Promise<any> {\n    try {\n        console.log('Starting getMasterServices');\n\n        const response = await axios.post(`${this.laravelApiUrl}/services/master`, {\n            phone,\n            password\n        });\n\n        if (!response.data?.success) {\n            throw new Error(response.data?.message || 'Не удалось получить список услуг');\n        }\n\n        return {\n            success: true,\n            data: response.data.data\n        };\n\n    } catch (error: any) {\n        console.error('Error in getMasterServices:', error);\n        throw new Error('Не удалось получить список услуг: ' + \n            (error?.response?.data?.message || error.message));\n    }\n}\n\npublic async getCompanies(): Promise<any> {\n    try {\n        const response = await axios.get<any>(\n            `${this.laravelApiUrl}/companies`\n        );\n        return response.data;\n    } catch (error) {\n        console.error('Error getting companies:', error);\n        return null;\n    }\n}\n\npublic async getProducts(companyId: number): Promise<any> {\n    try {\n        const response = await axios.get(\n            `${this.laravelApiUrl}/products/${companyId}`\n        );\n        return response.data;\n    } catch (error) {\n        console.error('Error getting products:', error);\n        return null;\n    }\n}\n\n}\n\n\nexport default new LaravelService();\n","import OpenAI from 'openai';\n\nclass OpenAIService {\n    private openai: OpenAI;\n    private readonly prompt: string;\n\n    constructor() {\n        if (!process.env.OPENAI_API_KEY) {\n            throw new Error('OPENAI_API_KEY is not defined');\n        }\n\n        this.openai = new OpenAI({\n            apiKey: process.env.OPENAI_API_KEY\n        });\n\n        this.prompt = `Войди в роль нейрокопирайтера, который прекрасно составляет описание мастеров по шугарингу. Описание мастера будет использоваться на сайте студии.\n        ВАЖНО: Описание ОБЯЗАТЕЛЬНО должно быть не более 300 символов и представлять собой законченный текст.\n        Найди имя мастера в тексте и используй его в описании. Если имя не найдено, используй нейтральное обращение \"мастер\".\n\nУчитывай информацию из инструкции: имя мастера и наброски описания от самого мастера. Опиши личные качества мастера, укажи на профессиональные качества, упомяни отзывы клиентов или результат работы. Заверши текст позитивной рекомендацией или акцентом на желании вернуться к мастеру. Текст должен быть теплым, дружелюбным и лаконичным. Максимальное кол-во символов описания: 300. В своем ответе укажи только описание и ничего больше. Пиши без воды, в человеческом стиле. \nДанные по мастеру:\nИмя: Анна \nНаброски описания от самого мастера: большой опыт работы\nПримеры стиля:\n'Анна умеет располагать к себе даже самого капризного клиента. Она всегда найдёт подход и интересную тему для общения. А ещё она легко и очень профессионально выполняет свою работу, что подтверждают многочисленные положительные отзывы. Вы точно захотите к ней вернуться!'\n'Снежана очень быстро и легко выполняет депиляцию как женщинам, так и мужчинам. Если Вы - не любитель долгих разговоров и длительных процедур, то это , безусловно, ваш мастер! Быстро, качественно и комфортно без лишних слов.'\n'Несмотря на малый опыт, Ксения уже завоевала сердца наших клиентов и заслуженно получила много положительных отзывов. Этот мастер очень внимателен к деталям. Индивидуальный подход к каждому клиенту и качественный результат для Ксении важнее всего.'\n'Анастасия - очень аккуратный и внимательный мастер. Её лёгкая рука сделает услугу максимально безболезненной и быстрой. А большой багаж знаний и опыта поможет без труда подобрать домашний уходу для любого типа кожи и волос. Анастасию ценят за её профессионализм и ответственный подход к работе.'\nВ ответе укажи ТОЛЬКО готовое описание, уложившись в 300 символов.`;\n    }\n\n    async generateDescription(userInput: string): Promise<string> {\n        try {\n            const completion = await this.openai.chat.completions.create({\n                model: 'gpt-4o',\n                messages: [\n                    {\n                        role: 'system',\n                        content: this.prompt\n                    },\n                    {\n                        role: 'user',\n                        content: userInput\n                    }\n                ],\n                temperature: 0.7,\n                max_tokens: 500,\n                presence_penalty: 0.3,\n                frequency_penalty: 0.5\n            });\n\n            const generatedText = completion.choices[0]?.message?.content?.trim() || '';\n\n            // Проверяем длину текста\n            if (generatedText.length > 300) {\n                return generatedText.substring(0, 300) + '...';\n            }\n\n            return generatedText;\n        } catch (error: any) {\n            console.error('OpenAI API Error:', {\n                error: error.message,\n                userInput\n                \n            });\n\n            if (error.response?.status === 429) {\n                throw new Error('Слишком много запросов. Пожалуйста, подождите немного и попробуйте снова.');\n            }\n\n            throw new Error('Не удалось сгенерировать описание. Пожалуйста, попробуйте позже.');\n        }\n    }\n}\n\nexport const openAIService = new OpenAIService();","import path from 'path';\nimport fs from 'fs';\nimport axios, { AxiosResponse } from 'axios';\n\n// Define the interfaces (if you need type safety)\ninterface StorageState {\n    cookies: { name: string; value: string }[];\n    origins: {\n        origin: string;\n        localStorage: { name: string; value: string }[];\n    }[];\n}\n\ninterface DraftsApiResponse {\n    result: {\n        drafts: any[];\n    };\n}\n\ninterface RowData {\n    createdAt: string;\n    updatedAt: string;\n    barcodeQuantity: string;\n    goodQuantity: string;\n    author: string;\n    draftId: string;\n    url: string;\n}\n\ninterface CreateSupplyResult {\n    result?: {\n        ids: { Id: string }[];\n    };\n}\n\nexport const getDraftsForUser = async (userId: string): Promise<RowData[]> => {\n    // Path to the user's state.json\n    const statePath = path.join('/var/www/wb-back/storage/state', `${userId}.json`);\n\n    if (!fs.existsSync(statePath)) {\n        throw new Error('User state not found.');\n    }\n\n    const storageState: StorageState = JSON.parse(fs.readFileSync(statePath, 'utf-8'));\n\n    // Extract cookies and WBTokenV3\n    const { cookies, origins } = storageState;\n    let cookieHeader = cookies.map(cookie => `${cookie.name}=${cookie.value}`).join('; ');\n\n    const originData = origins.find(origin => origin.origin === 'https://seller.wildberries.ru');\n    if (!originData) {\n        throw new Error('Origin data not found in state.');\n    }\n\n    const wbTokenEntry = originData.localStorage.find(item => item.name === 'wb-eu-passport-v2.access-token');\n    const wbTokenValue = wbTokenEntry ? wbTokenEntry.value : null;\n\n    if (!wbTokenValue) {\n        throw new Error('WBTokenV3 token not found in localStorage.');\n    }\n\n    // Add WBTokenV3 to cookies\n    cookieHeader += `; WBTokenV3=${wbTokenValue}`;\n\n    // Define the API endpoint\n    const apiUrl = 'https://seller-supply.wildberries.ru/ns/sm-draft/supply-manager/api/v1/draft/listDrafts';\n\n    // Define the request payload\n    const data = {\n        params: {\n            filter: {\n                orderBy: {\n                    createdAt: -1,\n                },\n            },\n            limit: 10,\n            offset: 0,\n        },\n        jsonrpc: '2.0',\n        id: 'json-rpc_20',\n    };\n\n    // Define headers\n    const headers = {\n        'Content-Type': 'application/json',\n        'Cookie': cookieHeader,\n        'Accept': '*/*',\n        'User-Agent':\n            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',\n        'Origin': 'https://seller.wildberries.ru',\n        'Referer': 'https://seller.wildberries.ru/',\n        'Accept-Language': 'ru,en-GB;q=0.9,en-US;q=0.8,en;q=0.7',\n        'sec-ch-ua': '\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\"',\n    };\n\n    // Make the API request using axios\n    const response: AxiosResponse<DraftsApiResponse> = await axios.post(apiUrl, data, { headers });\n\n    // Extract and process drafts data\n    const drafts = response.data.result.drafts;\n\n    const filteredDrafts = drafts.filter(draft => draft.barcodeQuantity > 0);\n    return filteredDrafts.map(draft => ({\n        createdAt: draft.createdAt,\n        updatedAt: draft.updatedAt,\n        barcodeQuantity: draft.barcodeQuantity.toString(),\n        goodQuantity: draft.goodQuantity.toString(),\n        author: draft.author,\n        draftId: draft.ID,\n        url: `https://seller.wildberries.ru/supplies-management/drafts/draft-detail?draftNumber=${draft.ID}`,\n    }));\n};\n\n\nexport const createOrderRequest = async (cabinetId:string, draftId:string, warehouseId:string, boxTypeMask:string): Promise<{\n    preorderID: string;\n    message: string\n}> => {\n    // Validate request body\n    if (!cabinetId || !draftId || !warehouseId || !boxTypeMask) {\n       throw new Error('Missing required parameters.');\n    }\n\n    try {\n        // Construct the path to the user's state.json\n        const statePath = path.join('/var/www/wb-back/storage/state', `${cabinetId}.json`);\n\n        // Check if the state file exists\n        if (!fs.existsSync(statePath)) {\n            throw new Error('User state not found.' );\n        }\n\n        // Read and parse the storage state\n        const storageStateRaw = fs.readFileSync(statePath, 'utf-8');\n        const storageState: StorageState = JSON.parse(storageStateRaw);\n\n        // Extract cookies and construct the Cookie header\n        const cookies = storageState.cookies;\n        let cookieHeader = cookies.map(cookie => `${cookie.name}=${cookie.value}`).join('; ');\n\n        // Find origin data for Wildberries seller\n        const originData = storageState.origins.find(origin => origin.origin === 'https://seller.wildberries.ru');\n        if (!originData) {\n            throw new Error('Origin data not found in state.' );\n        }\n\n        // Retrieve WBTokenV3 from localStorage\n        const wbTokenEntry = originData.localStorage.find(item => item.name === 'wb-eu-passport-v2.access-token');\n        const wbTokenValue = wbTokenEntry ? wbTokenEntry.value : null;\n\n        if (!wbTokenValue) {\n            throw new Error('WBTokenV3 token not found in localStorage.');\n        }\n\n        // Append WBTokenV3 to the Cookie header\n        cookieHeader += `; WBTokenV3=${wbTokenValue}`;\n\n        // Define HTTP headers for the request\n        const headers = {\n            'Content-Type': 'application/json',\n            'Cookie': cookieHeader,\n            'Accept': '*/*',\n            'User-Agent': 'Mozilla/5.0 (compatible)',\n            'Origin': 'https://seller.wildberries.ru',\n            'Referer': 'https://seller.wildberries.ru/',\n            'Accept-Language': 'ru,en-GB;q=0.9,en-US;q=0.8,en;q=0.7',\n        };\n\n        // **b. Create Supply**\n        const createSupplyUrl = 'https://seller-supply.wildberries.ru/ns/sm-supply/supply-manager/api/v1/supply/create';\n\n        //Monopallet 32\n        //Koroba 4\n        const boxTypeCorrect = boxTypeMask == \"5\" ? 32 : 4;\n        // Prepare the payload for creating supply\n        const createSupplyData = {\n            params: {\n                boxTypeMask: boxTypeCorrect,\n                draftID: draftId,\n                transitWarehouseId: null,\n                warehouseId: Number(warehouseId),\n            },\n            jsonrpc: \"2.0\",\n            id: \"json-rpc_26\"\n        };\n\n        // Make the POST request to create supply\n        const createSupplyResponse: AxiosResponse<CreateSupplyResult> = await axios.post(createSupplyUrl, createSupplyData, { headers });\n        const createSupplyResult = createSupplyResponse.data;\n\n        // Extract preorderID from the response\n        const preorderID = createSupplyResult?.result?.ids[0]?.Id;\n        console.log('createSupplyResult:', createSupplyResult);\n\n        // Respond with success and the preorderID\n        return {\n            message: 'Order created successfully.',\n            preorderID: preorderID,\n        };\n    } catch (error: any) {\n        console.error('Error during order creation:', error.message);\n        throw new Error('Internal Server Error.');\n    }\n};\n","import { Telegraf, session, Scenes, Markup } from 'telegraf';\nimport WarehouseBot from '../services/warehouseBot';\nimport logger from '../../utils/logger/loggerTelegram'; // Ensure correct path\nimport { Redis as RedisStore } from '@telegraf/session/redis';\nimport {MyContext, MySession} from \"../types/MyContext\";\n\n// Import mainScene from the new file\nimport { mainScene } from '../services/bot-master/scenes/mainScene';\nimport {cabinetGate} from \"../utils/cabinetGate\";\nimport {loginWizard} from \"../services/bot-master/scenes/loginWizard\";\nimport {registrationWizard} from \"../services/bot-master/scenes/registrationWizard\";\nimport { changeDescriptionScene } from '../services/bot-master/scenes/changeDescriptionScene';\n// If you have other scenes like subscriptionScene, consider importing them similarly\nimport { scheduleManagementScene } from '../services/bot-master/scenes/scheduleManagementScene';\nimport { changePhotoScene } from '../services/bot-master/scenes/changePhotoScene';\nimport { clientsManagementScene } from '../services/bot-master/scenes/clientsManagementScene';\nimport { cancelBookingScene } from '../services/bot-master/scenes/cancel_booking_scene';\nimport { changePhoneScene } from '../services/bot-master/scenes/change_phone_scene';\nimport { deleteServiceScene } from '../services/bot-master/scenes/delete_service_scene';\nimport { addServiceScene } from '../services/bot-master/scenes/add_service_scene';\n\n\nconst botToken: string = process.env.TELEGRAM_BOT_TOKEN_MASTER!;\nconst botMaster: Telegraf<MyContext> = new Telegraf(botToken);\n\n\nconst store = RedisStore<MySession>({\n    url: 'redis://redis:6379/2',\n});\n\n// Initialize the stage with imported scenes\nconst stage = new Scenes.Stage<MyContext>([\n    mainScene,\n    loginWizard,\n    registrationWizard,\n    changeDescriptionScene,\n    scheduleManagementScene,\n    changePhotoScene,\n    clientsManagementScene,\n    cancelBookingScene,\n    changePhoneScene,\n    deleteServiceScene,\n    addServiceScene,\n]);\n\n// Middleware to log incoming updates\nbotMaster.use(session({ store }));\nbotMaster.use(stage.middleware());\nbotMaster.use(async (ctx: MyContext, next: () => Promise<void>) => {\n    logger.info('Received update', { update: ctx.update });\n    await next();\n});\n\n// Handle /start command\nbotMaster.start(async (ctx: MyContext) => {\n    // Очищаем сессию при старте\n    if (ctx.session) {\n        ctx.session = {}; // Сбрасываем сессию\n    }\n    \n    const startPayload = ctx.payload;\n\n    if (startPayload && startPayload === 'registration') {\n        // Если есть payload registration, идем сразу на регистрацию\n        await ctx.scene.enter('registration_wizard');\n        return;\n    }\n\n    // В остальных случаях всегда идем на login_wizard\n    await ctx.scene.enter('login_wizard');\n});\n\n// Handle 'mainmenu' action\nbotMaster.action('mainmenu', async (ctx: MyContext) => {\n    // Проверяем авторизацию\n    if (!ctx.session?.user?.token) {\n        // Если нет токена - отправляем на логин\n        await ctx.scene.enter('login_wizard');\n        return;\n    }\n\n    // Если есть токен - показываем главное меню\n    await cabinetGate(ctx, 'main');\n    await ctx.answerCbQuery('🏦Главная');\n});\n\n// Handle /ping command\nbotMaster.command('ping', (ctx: MyContext) => {\n    ctx.reply('pong!');\n});\n\n\nbotMaster.on('callback_query', async (ctx: MyContext) => {\n    await ctx.answerCbQuery('👌');\n});\n\n\n\n// Export the bot instance\nexport default botMaster;\n","import { Telegraf, session, Scenes, Markup } from 'telegraf';\nimport WarehouseBot from '../services/warehouseBot';\nimport logger from '../../utils/logger/loggerTelegram';\nimport { Redis as RedisStore } from '@telegraf/session/redis';\nimport { MyContext, MySession } from \"../types/MyContext\";\n\n// Импорты сцен управляющего\nimport { adminMainScene } from '../services/bot-admin/scenes/adminMainScene';\nimport { cabinetGate } from \"../utils/cabinetGate\";\nimport { salaryScene } from \"../services/bot-admin/scenes/salaryScene\";\nimport { notifictationsScene } from \"../services/scenes/notifications/notificationsScene\";\nimport { employmentScene } from \"../services/bot-admin/scenes/employmentScene\";\nimport { staffScene } from \"../services/scenes/staff/staffScene\";\nimport { adminLoginWizard } from '../services/bot-admin/scenes/adminLoginWizard';\n\n// Импорты сцен уведомлений\nimport { createNotifictationScene as notificationsCreateNotificationScene } from \"../services/scenes/notifications/createNotificationScene\";\nimport { editNotificationScene as notificationsEditNotificationScene } from \"../services/scenes/notifications/editNotificationScene\";\n\n// Импорты сцен склад\n\nimport { selectBranchScene } from '../services/bot-admin/scenes/selectBranchScene';\nimport { productsScene } from '../services/bot-admin/scenes/productsScene';\nimport { createWarehouseNotificationScene } from '../services/bot-admin/scenes/createWarehouseNotificationScene';\nimport { warehouseScene } from '../services/bot-admin/scenes/warehouseScene';\nimport { warehouseNotificationsListScene } from '../services/bot-admin/scenes/warehouseNotificationsListScene';\nimport { notificationsManagementScene } from '../services/bot-admin/scenes/notificationsManagementScene';\nimport { notificationsCreateScene } from '../services/bot-admin/scenes/notificationsCreateScene';\nimport { remindLaterScene } from '../services/bot-admin/scenes/remindLaterScene';\nimport { notificationsListScene } from '../services/bot-admin/scenes/notificationsListScene';\nimport { tasksScene } from  '../services/bot-admin/scenes/tasksScene';\n\n\ninterface BaseState {\n    notificationId?: string;\n}\n\nconst botToken: string = process.env.TELEGRAM_BOT_TOKEN_SUPPLIES_NEW!;\nconst bot: Telegraf<MyContext> = new Telegraf(botToken);\n\n\nconst store = RedisStore<MySession>({\n    url: 'redis://redis:6379/2',\n});\n\n// Инициализация stage со всеми сценами\nconst stage = new Scenes.Stage<MyContext>([\n    adminLoginWizard,\n    adminMainScene,\n    salaryScene,\n    notifictationsScene,\n    notificationsCreateNotificationScene,\n    notificationsListScene,\n    employmentScene,\n    warehouseScene,\n    staffScene,\n    notificationsEditNotificationScene,\n    selectBranchScene,\n    productsScene,\n    createWarehouseNotificationScene,\n    warehouseNotificationsListScene,\n    notificationsManagementScene,\n    notificationsCreateScene,\n    remindLaterScene,\n    notificationsListScene,\n    tasksScene,\n]);\n\n// Middleware\nbot.use(session({ store }));\nbot.use(stage.middleware());\nbot.use(async (ctx: MyContext, next: () => Promise<void>) => {\n    logger.info('Received update', { update: ctx.update });\n    await next();\n});\n\n// Обработка команды /start\nbot.start(async (ctx: MyContext) => {\n    await ctx.scene.enter('admin_login_wizard');\n});\n\n// Обработка действия 'mainmenu'\nbot.action('mainmenu', async (ctx: MyContext) => {\n    await ctx.scene.enter('admin_main');\n    await ctx.answerCbQuery('🏦 Главное меню');\n});\n\n\n\n// Обновляем обработчик\nbot.action(/remind_later_(\\d+)/, async (ctx) => {\n    try {\n        await ctx.answerCbQuery();\n        \n        const notificationId = ctx.match[1];\n        logger.info('Starting remind later process:', {\n            notification_id: notificationId\n        });\n\n        // Инициализируем state если его нет\n        if (!ctx.scene.state) {\n            ctx.scene.state = {};\n        }\n\n        await ctx.scene.enter('remind_later_scene', { notificationId });\n        \n    } catch (error) {\n        logger.error('Error in remind_later handler:', error);\n        await ctx.answerCbQuery('❌ Произошла ошибка');\n    }\n});\n\n// Обработка команды /ping\nbot.command('ping', (ctx: MyContext) => {\n    ctx.reply('pong!');\n});\n\n// Обработчики уведомлений\nbot.action('create_notification', async (ctx) => {\n    await ctx.scene.enter('create_notification');\n});\n\nbot.action('active_notifications', async (ctx) => {\n    await ctx.scene.enter('notifications_list_scene');\n});\n\n// Обработчики склада\nbot.action('warehouse_notification', async (ctx) => {\n    await ctx.scene.enter('warehouse_create_notification');\n});\n\nbot.action('warehouse_list', async (ctx) => {\n    await ctx.scene.enter('warehouse_edit_notification');\n});\n\n// Общий обработчик callback_query\nbot.on('callback_query', async (ctx: MyContext) => {\n    await ctx.answerCbQuery('👌');\n});\n\n// Функция отправки сообщений клиенту\nexport const sendMessageToClient = async (chatId: string, message: string, isButtonAvailable = true) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n    ]);\n\n    try {\n        const response = await bot.telegram.sendMessage(\n            chatId, \n            message, \n            isButtonAvailable ? { reply_markup: keyboard.reply_markup } : {}\n        );\n        logger.info('Message sent to Telegram successfully!', response);\n        return true;\n    } catch (error: any) {\n        logger.error('Exception occurred while sending message:', error.message);\n        return false;\n    }\n};\n\nexport default bot;","import { Scenes, Markup, Composer } from 'telegraf';\nimport { MyContext, MySession } from '../../../types/MyContext';\nimport laravelService from \"../../../../services/laravelService\";\n\ninterface AdminSessionData {\n    phone?: string;\n    password?: string;\n    apiToken?: string;\n    user?: any;\n}\n\n// Утилиты для работы с телефоном\nconst formatPhone = (phone: string): string => {\n    let cleaned = phone.replace(/\\D/g, '');\n    if (cleaned.startsWith('8')) {\n        cleaned = '7' + cleaned.slice(1);\n    }\n    if (!cleaned.startsWith('7')) {\n        cleaned = '7' + cleaned;\n    }\n    return cleaned;\n};\n\nconst isValidPhone = (phone: string): boolean => {\n    const cleaned = phone.replace(/\\D/g, '');\n    return /^[78]\\d{10}$/.test(cleaned);\n};\n\n// Шаг 1: Начальное меню\nconst showMainMenu = async (ctx: MyContext) => {\n    const messageText = `👋 Добро пожаловать в панель управления CherryTown!\\n\\n`\n        + `🎯 Здесь вы сможете:\\n`\n        + `• Управлять персоналом\\n`\n        + `• Контролировать записи\\n`\n        + `• Работать со складом\\n`\n        + `• Следить за уведомлениями\\n`\n        + `• И многое другое!\\n\\n`\n        + `🔐 Для начала работы необходимо авторизоваться:`;\n\n    const mainMenuKeyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('🔑 Авторизация', 'admin_authorization')],\n    ]);\n\n    if (ctx.callbackQuery?.message) {\n        try {\n            await ctx.editMessageText(messageText, mainMenuKeyboard);\n        } catch (error) {\n            await ctx.reply(messageText, mainMenuKeyboard);\n        }\n    } else {\n        await ctx.reply(messageText, mainMenuKeyboard);\n    }\n\n    return ctx.wizard.next();\n};\n\n// Обработка авторизации и ввода телефона\nconst handleAdminAuthorization = new Composer<MyContext>();\nhandleAdminAuthorization.action('admin_authorization', async (ctx) => {\n    await ctx.answerCbQuery();\n    const message = `📱 Введите ваш номер телефона в формате:\\n+7XXXXXXXXXX`;\n\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('👈 Назад', 'back_to_admin_menu')],\n    ]);\n\n    await ctx.editMessageText(message, keyboard);\n    return ctx.wizard.next();\n});\n\n// Обработка ввода телефона\nconst handlePhoneInput = new Composer<MyContext>();\nhandlePhoneInput.action('back_to_admin_menu', async (ctx) => {\n    await ctx.answerCbQuery();\n    return ctx.scene.reenter();\n});\n\nhandlePhoneInput.on('text', async (ctx) => {\n    const phone = formatPhone(ctx.message.text);\n\n    if (!isValidPhone(phone)) {\n        await ctx.reply(\n            '❌ Неверный формат номера. Пожалуйста, введите номер в формате:\\n+7XXXXXXXXXX',\n            Markup.inlineKeyboard([\n                [Markup.button.callback('👈 Назад', 'back_to_admin_menu')]\n            ])\n        );\n        return;\n    }\n\n    ctx.scene.session.phone = phone;\n\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('👈 Назад', 'back_to_admin_phone')] // Обновляем название action\n    ]);\n\n    await ctx.reply('🔑 Введите пароль от личного кабинета YClients:', keyboard);\n    return ctx.wizard.next();\n});\n\n// Утилита для задержки\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\n// Обработка ввода пароля\nconst handlePasswordInput = new Composer<MyContext>();\n\nhandlePasswordInput.action('back_to_admin_phone', async (ctx) => { // Обновляем название action\n    await ctx.answerCbQuery();\n    const message = `📱 Введите ваш номер телефона в формате:\\n+7XXXXXXXXXX`;\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('👈 Назад', 'back_to_admin_menu')], // Обновляем название action\n    ]);\n    await ctx.editMessageText(message, keyboard);\n    return ctx.wizard.back();\n});\n\nhandlePasswordInput.on('text', async (ctx) => {\n    const password = ctx.message.text;\n    const phone = ctx.scene.session.phone;\n\n    try {\n        await ctx.reply('⏳ Проверяем данные...');\n        const response = await laravelService.authAdmin(phone, password, ctx.from.id);\n        \n        if (response?.success) {\n            // Проверяем роль пользователя\n            const userRole = response.user?.user_role_slug;\n            if (!['owner', 'administrator'].includes(userRole)) {\n                const errorMessage = await ctx.reply('❌ Доступ запрещен: недостаточно прав.\\n\\nЭтот бот доступен только для владельцев и администраторов.');\n                await delay(2000);\n                const errorKeyboard = Markup.inlineKeyboard([\n                    [Markup.button.callback('👈 Вернуться в меню', 'back_to_admin_menu')]\n                ]);\n                await ctx.telegram.editMessageText(\n                    ctx.chat.id,\n                    errorMessage.message_id,\n                    undefined,\n                    '❌ Доступ запрещен: недостаточно прав.\\n\\nЭтот бот доступен только для владельцев и администраторов.',\n                    { reply_markup: errorKeyboard.reply_markup }\n                );\n                return;\n            }\n\n            if (ctx.session) {\n                const sessionData: AdminSessionData = {\n                    phone,\n                    password,\n                    apiToken: response.token,\n                    user: response.user\n                };\n                Object.assign(ctx.session, sessionData);\n            }\n\n            try {\n                const messagesToDelete = ctx.message.message_id;\n                for (let i = 0; i < 3; i++) {\n                    try {\n                        await ctx.deleteMessage(messagesToDelete - i);\n                    } catch (e) {\n                        // Игнорируем ошибки удаления\n                    }\n                }\n            } catch (e) {\n                console.log('Could not delete messages:', e);\n            }\n\n            // Очищаем временные данные\n            delete ctx.scene.session.phone;\n            delete ctx.scene.session.password;\n\n            const successMsg = await ctx.reply('🔄 Авторизация...');\n            await delay(700);\n            await ctx.telegram.editMessageText(\n                ctx.chat.id,\n                successMsg.message_id,\n                undefined,\n                '✨ Проверяем данные...'\n            );\n            await delay(700);\n            await ctx.telegram.editMessageText(\n                ctx.chat.id,\n                successMsg.message_id,\n                undefined,\n                '🎉 Успешно! Добро пожаловать в панель управления.'\n            );\n\n            await delay(1000);\n            return ctx.scene.enter('admin_main');\n        }\n\n        const errorMsg = response?.message || 'Ошибка авторизации';\n        const errorMessage = await ctx.reply('❌ ' + errorMsg);\n        await delay(500);\n\n        const errorKeyboard = Markup.inlineKeyboard([\n            [Markup.button.callback('🔄 Попробовать снова', 'retry_admin_auth')], // Обновляем название action\n            [Markup.button.callback('👈 Вернуться в меню', 'back_to_admin_menu')] // Обновляем название action\n        ]);\n\n        await ctx.telegram.editMessageText(\n            ctx.chat.id,\n            errorMessage.message_id,\n            undefined,\n            '❌ ' + errorMsg,\n            { reply_markup: errorKeyboard.reply_markup }\n        );\n\n    } catch (error) {\n        console.error('Ошибка авторизации:', error);\n        \n        let errorMessage = 'Ошибка авторизации. ';\n        if (error.response?.data?.message) {\n            errorMessage += error.response.data.message;\n        } else {\n            errorMessage += 'Проверьте введенные данные и попробуйте снова.';\n        }\n\n        const errorMsg = await ctx.reply('⚠️ Обработка...');\n        await delay(500);\n\n        const errorKeyboard = Markup.inlineKeyboard([\n            [Markup.button.callback('🔄 Попробовать снова', 'retry_admin_auth')], // Обновляем название action\n            [Markup.button.callback('👈 Вернуться в меню', 'back_to_admin_menu')] // Обновляем название action\n        ]);\n\n        await ctx.telegram.editMessageText(\n            ctx.chat.id,\n            errorMsg.message_id,\n            undefined,\n            '❌ ' + errorMessage,\n            { reply_markup: errorKeyboard.reply_markup }\n        );\n    }\n});\n\n// Добавляем обработчики для кнопок после ошибки\n// Исправим обработчик retry_admin_auth\nhandlePasswordInput.action('retry_admin_auth', async (ctx) => {\n    try {\n        await ctx.answerCbQuery(); // Сразу отвечаем на callback\n        await ctx.scene.reenter(); // Перезапускаем сцену\n    } catch (error) {\n        console.error('Error in retry_admin_auth:', error);\n        // В случае ошибки просто пробуем перезапустить сцену\n        await ctx.scene.reenter();\n    }\n});\n\n// Исправим обработчик back_to_admin_menu\nhandlePasswordInput.action('back_to_admin_menu', async (ctx) => {\n    try {\n        await ctx.answerCbQuery(); // Сразу отвечаем на callback\n        await ctx.scene.reenter(); // Перезапускаем сцену\n    } catch (error) {\n        console.error('Error in back_to_admin_menu:', error);\n        // В случае ошибки просто пробуем перезапустить сцену\n        await ctx.scene.reenter();\n    }\n});\n\n\n\n// Создаем сцену wizard с новым именем\nexport const adminLoginWizard = new Scenes.WizardScene<MyContext>(\n    'admin_login_wizard', // Обновляем название сцены\n    showMainMenu,\n    handleAdminAuthorization,\n    handlePhoneInput,\n    handlePasswordInput\n);\n\n// Добавляем middleware для обработки ошибок\nadminLoginWizard.use(async (ctx, next) => {\n    try {\n        await next();\n    } catch (error) {\n        console.error('Ошибка в admin login wizard:', error);\n        await ctx.reply(\n            'Произошла ошибка. Пожалуйста, попробуйте позже или обратитесь к администратору.',\n            Markup.inlineKeyboard([\n                [Markup.button.callback('👈 Вернуться в меню', 'back_to_admin_menu')]\n            ])\n        );\n    }\n});\n\n","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\nimport CacheService from '../../../../utils/redis/Cache/Cache';\nimport { fmt, link } from 'telegraf/format';\nimport logger from '../../../../utils/logger/loggerTelegram';\nimport LaravelService from \"../../../../services/laravelService\";\nimport { cabinetGate } from \"../../../utils/cabinetGate\";\n\nexport const adminMainScene = new Scenes.BaseScene<MyContext>('admin_main');\n\nadminMainScene.enter(async (ctx: MyContext) => {\n    // Получаем имя пользователя из сессии, если есть\n    \n    \n    const messageText = fmt`\n🏢 *Панель управления CherryTown*\n\n👋 Добро пожаловать!\n\n📊 *Доступные функции:*\n- Управление персоналом и трудоустройство\n- Контроль выполнения задач\n- Расчёт заработной платы\n- Управление складом и остатками\n- Система уведомлений\n- Работа с клиентами\n\nℹ️ Выберите нужный раздел:`;\n\n    const mainMenuKeyboard = Markup.inlineKeyboard([\n        [\n            Markup.button.callback('👥 Управление персоналом', 'staff'),\n            Markup.button.callback('📋 Задачи', 'tasks'),\n        ],\n        [\n            Markup.button.callback('💰 Расчет ЗП', 'salary'),\n            Markup.button.callback('🏪 Управление складом', 'warehouse'),\n        ],\n        [\n            Markup.button.callback('🔔 Уведомления', 'notifications'),\n            Markup.button.callback('👥 Трудоустройство', 'employment'),\n        ],\n        [\n            Markup.button.callback('🚪 Выйти из аккаунта', 'logout')\n        ]\n    ]);\n\n    try {\n        if (ctx.callbackQuery?.message) {\n            await ctx.editMessageText(messageText, {\n                ...mainMenuKeyboard,\n                parse_mode: 'Markdown'\n            });\n        } else {\n            await ctx.reply(messageText, {\n                ...mainMenuKeyboard,\n                parse_mode: 'Markdown'\n            });\n        }\n    } catch (error) {\n        logger.error('Error in adminMainScene.enter:', error);\n        await ctx.reply('Произошла ошибка при загрузке главного меню. Попробуйте еще раз.');\n    }\n});\n\n// Обработчик выхода\nadminMainScene.action('logout', async (ctx: MyContext) => {\n    try {\n        await ctx.answerCbQuery('Выходим из аккаунта...');\n        \n        const confirmKeyboard = Markup.inlineKeyboard([\n            [\n                Markup.button.callback('✅ Да, выйти', 'confirm_logout'),\n                Markup.button.callback('❌ Отмена', 'cancel_logout')\n            ]\n        ]);\n\n        await ctx.editMessageText(\n            '❓ Вы уверены, что хотите выйти из аккаунта?',\n            confirmKeyboard\n        );\n    } catch (error) {\n        logger.error('Error in logout handler:', error);\n        await ctx.reply('Произошла ошибка. Попробуйте позже.');\n    }\n});\n\n// Подтверждение выхода\nadminMainScene.action('confirm_logout', async (ctx: MyContext) => {\n    try {\n        await ctx.answerCbQuery();\n        \n        const telegramId = ctx.from?.id;\n        if (telegramId) {\n            try {\n                await LaravelService.logout(telegramId);\n            } catch (error) {\n                logger.error('Error during backend logout:', error);\n            }\n        }\n\n       \n\n        await ctx.editMessageText(\n            '👋 Вы успешно вышли из аккаунта.',\n            Markup.inlineKeyboard([\n                [Markup.button.callback('🔑 Войти снова', 'start_login')]\n            ])\n        );\n        \n        return ctx.scene.enter('admin_login_wizard');\n\n    } catch (error) {\n        logger.error('Error in confirm_logout handler:', error);\n        await ctx.reply('Произошла ошибка. Попробуйте еще раз через несколько секунд.');\n        return ctx.scene.enter('admin_login_wizard');\n    }\n});\n\n// Отмена выхода\nadminMainScene.action('cancel_logout', async (ctx: MyContext) => {\n    try {\n        await ctx.answerCbQuery('Отменено');\n        return ctx.scene.reenter();\n    } catch (error) {\n        logger.error('Error in cancel_logout handler:', error);\n        await ctx.reply('Произошла ошибка. Попробуйте позже.');\n    }\n});\n\n// Обработчики переходов в другие сцены\nadminMainScene.action('tasks', async (ctx: MyContext) => {\n    await ctx.answerCbQuery('📋 Переходим к задачам...');\n    await ctx.scene.enter('tasks');\n});\n\nadminMainScene.action('salary', async (ctx: MyContext) => {\n    await ctx.answerCbQuery('💰 Расчет зарплаты...');\n    await ctx.scene.enter('salary');\n});\n\nadminMainScene.action('notifications', async (ctx) => {\n    await ctx.answerCbQuery();\n    await ctx.scene.enter('notifications_management');\n});\n\nadminMainScene.action('employment', async (ctx: MyContext) => {\n    await ctx.answerCbQuery('👥 Трудоустройство...');\n    await ctx.scene.enter('employment');\n});\n\nadminMainScene.action('warehouse', async (ctx) => {\n    await ctx.answerCbQuery('🏪 Управление складом...');\n    return ctx.scene.enter('warehouse'); // Теперь переходим в основное меню склада\n});\n\nadminMainScene.action('staff', async (ctx: MyContext) => {\n    await ctx.answerCbQuery('👥 Управление персоналом...');\n    await ctx.scene.enter('staff');\n});\n\n// Обработчик возврата в главное меню\nadminMainScene.action('mainmenu', async (ctx) => {\n    await ctx.answerCbQuery('🏠 Главное меню');\n    return ctx.scene.reenter();\n});\n\n// Обработка ошибок\nadminMainScene.use(async (ctx, next) => {\n    try {\n        await next();\n    } catch (error) {\n        logger.error('Error in adminMainScene:', error);\n        await ctx.reply(\n            'Произошла ошибка. Пожалуйста, попробуйте позже или обратитесь к администратору.',\n            Markup.inlineKeyboard([\n                [Markup.button.callback('🏠 Вернуться в главное меню', 'mainmenu')]\n            ])\n        );\n    }\n});","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\nimport { code, fmt } from \"telegraf/format\";\nimport logger from \"../../../../utils/logger/loggerTelegram\";\nimport LaravelService from \"../../../../services/laravelService\";\n\n// Кнопки по умолчанию\nconst defaultButtons = [\n   [Markup.button.callback('👈 Назад', 'back_to_products')],\n   [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n];\n\nconst defaultButtonsMenuOnly = [\n   [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n];\n\n// Создаем WizardScene\nexport const createWarehouseNotificationScene = new Scenes.WizardScene<MyContext>(\n    'create_warehouse_notification_scene',\n    // Шаг 1\n    async (ctx) => {\n        logger.info('Первый шаг создания уведомления', {\n            selectedProductId: ctx.session.selectedProductId,\n            scene: ctx.scene.current?.id\n        });\n\n        try {\n            if (!ctx.session?.selectedProductId) {\n                throw new Error('Продукт не выбран');\n            }\n\n            const keyboard = Markup.inlineKeyboard([\n                [Markup.button.callback('Отмена', 'back_to_products')],\n                [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n            ]);\n\n            await ctx.reply('Введите минимальное количество товара, при достижении которого нужно отправить уведомление:', keyboard);\n            \n            return ctx.wizard.next();\n        } catch (error) {\n            logger.error('Ошибка в первом шаге:', error);\n            await ctx.reply('Произошла ошибка. Возвращаемся к выбору продукта.');\n            return ctx.scene.enter('products_scene');\n        }\n    },\n   // Шаг 2: Подтверждение\n   // Шаг 2: Подтверждение\nasync (ctx) => {\n    logger.info('Вход во второй шаг', {\n        message: ctx.message,\n        session: ctx.scene.session,\n        wizard_state: ctx.wizard?.state\n    });\n\n    if (!ctx.message || !('text' in ctx.message)) {\n        await ctx.reply('Пожалуйста, введите число.');\n        return;\n    }\n\n    const amount = parseInt(ctx.message.text, 10);\n    if (isNaN(amount) || amount < 0) {\n        await ctx.reply('Пожалуйста, введите положительное число.');\n        return;\n    }\n\n    try {\n        // Инициализируем объект, если его нет\n        if (!ctx.session.warehouseForm) {\n            ctx.session.warehouseForm = {\n                productId: ctx.session.selectedProductId,\n                minAmount: null,\n                type: 'warehouse'\n            };\n        }\n\n        // Теперь безопасно устанавливаем значение\n        ctx.session.warehouseForm.minAmount = amount;\n\n        const keyboard = Markup.inlineKeyboard([\n            [Markup.button.callback('✅ Подтвердить', 'confirm_warehouse_notification')],\n            [Markup.button.callback('❌ Отмена', 'back_to_products')],\n            [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n        ]);\n\n        const message = fmt`Проверьте настройки уведомления:\n\n${code('Минимальное количество')}: ${amount}\n\nПодтвердите создание уведомления.`;\n\n        await ctx.reply(message, keyboard);\n\n        logger.info('Подтверждение настроек отправлено', {\n            amount,\n            form: ctx.session.warehouseForm\n        });\n\n    } catch (error) {\n        logger.error('Ошибка во втором шаге:', error);\n        await ctx.reply('Произошла ошибка при обработке данных. Попробуйте еще раз.');\n        return ctx.scene.enter('products_scene');\n    }\n}\n);\n\n// Добавляем обработчики действий\ncreateWarehouseNotificationScene.action('confirm_warehouse_notification', async (ctx) => {\n    try {\n        // Берем form из ctx.session вместо ctx.scene.session\n        const form = ctx.session.warehouseForm;\n        \n        logger.info('Попытка создания уведомления', {\n            form,\n            user_id: ctx.from?.id\n        });\n        \n        if (!form || !form.productId || !form.minAmount) {\n            throw new Error('Неполные данные формы');\n        }\n\n        const result = await LaravelService.createWarehouseNotification(\n            ctx.from.id,\n            {\n                productId: form.productId,\n                minAmount: form.minAmount,\n                type: 'warehouse',\n                branchId: ctx.session.selectedBranchId // Добавляем из сессии\n            }\n        );\n\n        if (!result) {\n            throw new Error('Failed to create notification');\n        }\n\n        const keyboard = Markup.inlineKeyboard([\n            [Markup.button.callback('📝 Создать еще', 'back_to_products')],\n            [Markup.button.callback('📋 Все уведомления', 'warehouse_list')],\n            [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n        ]);\n\n        const message = fmt`✅ Уведомление создано\n\nКогда количество товара достигнет ${code(form.minAmount.toString())} единиц, \nвы получите уведомление.`;\n\n        await ctx.reply(message, keyboard);\n        await ctx.answerCbQuery('Уведомление создано');\n\n        logger.info('Уведомление успешно создано', {\n            form,\n            user_id: ctx.from?.id\n        });\n\n    } catch (error) {\n        logger.error('Error creating notification:', error);\n        await ctx.reply(\n            'Произошла ошибка при создании уведомления. Попробуйте позже.',\n            Markup.inlineKeyboard([\n                [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n            ])\n        );\n    }\n});\n\ncreateWarehouseNotificationScene.action('back_to_products', async (ctx) => {\n    logger.info('Возврат к списку продуктов');\n    await ctx.answerCbQuery();\n    return ctx.scene.enter('products_scene');\n});\n\ncreateWarehouseNotificationScene.action('warehouse_list', async (ctx) => {\n    logger.info('Переход к списку уведомлений');\n    await ctx.answerCbQuery();\n    return ctx.scene.enter('warehouse_notifications_list');\n});\n\ncreateWarehouseNotificationScene.action('mainmenu', async (ctx) => {\n   logger.info('Возврат в главное меню');\n   await ctx.answerCbQuery();\n   return ctx.scene.enter('admin_main');\n});\n\n// Обработка необработанных callback-запросов\n// Обработка необработанных callback-запросов\n\n\n\n\n// Обработка текстовых сообщений вне шагов\ncreateWarehouseNotificationScene.on('text', async (ctx, next) => {\n   logger.info('Получено текстовое сообщение', {\n       step: ctx.wizard?.cursor,\n       text: ctx.message.text\n   });\n   \n   if (ctx.wizard?.cursor === 0 || ctx.wizard?.cursor === 1) {\n       return next();\n   }\n   \n   await ctx.reply('Пожалуйста, используйте доступные команды.');\n});\n\nexport default createWarehouseNotificationScene;","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\nimport LaravelService from \"../../../../services/laravelService\";\nimport * as fs from 'fs';\n\nexport const employmentScene = new Scenes.BaseScene<MyContext>('employment');\n\n// Функция для отображения главного меню трудоустройства\nconst showEmploymentMenu = async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('📋 Активные заявки', 'show_applications')],\n        [Markup.button.callback('➕ Трудоустроить', 'add_employee')],\n        [Markup.button.callback('« Назад', 'mainmenu')]\n    ]);\n\n    const text = '👥 Управление трудоустройством\\n\\nВыберите действие:';\n    \n    if (ctx.callbackQuery?.message) {\n        await ctx.editMessageText(text, keyboard);\n    } else {\n        await ctx.reply(text, keyboard);\n    }\n};\n\n// Вход в сцену\nemploymentScene.enter(async (ctx) => {\n    \n    await showEmploymentMenu(ctx);\n});\n\n// Обработчик для показа активных заявок\nemploymentScene.action('show_applications', async (ctx) => {\n    try {\n        const applications = await LaravelService.getActiveRegistrations();\n        console.log('Received applications:', applications); // Добавим лог\n\n        if (!applications || applications.length === 0) {\n            await ctx.editMessageText(\n                '📝 Активные заявки отсутствуют',\n                Markup.inlineKeyboard([[Markup.button.callback('« Назад', 'back_to_employment')]])\n            );\n            return;\n        }\n\n        const buttons = applications.map(app => ([\n            Markup.button.callback(\n                `👤 ${app.short_name}`, \n                `view_application_${app.id}`\n            )\n        ]));\n        \n        buttons.push([Markup.button.callback('« Назад', 'back_to_employment')]);\n\n        await ctx.editMessageText(\n            '📋 Активные заявки на трудоустройство:',\n            Markup.inlineKeyboard(buttons)\n        );\n    } catch (error) {\n        console.error('Error fetching applications:', error);\n        await ctx.reply('Произошла ошибка при получении заявок.');\n    }\n});\n\n// Обработчик просмотра конкретной заявки\nemploymentScene.action(/^view_application_(\\d+)$/, async (ctx) => {\n    try {\n        const applicationId = ctx.match[1];\n        const application = await LaravelService.getRegistrationDetails(applicationId);\n\n        // Форматируем дату из ISO в DD.MM.YYYY\n        const formattedDate = application.has_med_book && application.med_book_expiry \n            ? new Date(application.med_book_expiry).toLocaleDateString('ru-RU') \n            : '';\n\n        const messageText = `\n👤 Заявка на трудоустройство\n\nФИО: ${application.full_name}\nТелефон: ${application.phone}\nEmail: ${application.email}\nФилиал: ${application.branch_name}\nСтавка: ${application.master_price}%\n\n🏥 Мед. книжка: ${application.has_med_book ? '✅' : '❌'}\n${application.has_med_book ? `Срок действия до: ${formattedDate}` : ''}\n📜 Сертификат: ${application.has_education_cert ? '✅' : '❌'}\n\n🏦 Самозанятый: ${application.is_self_employed ? '✅' : '❌'}\n`;\n\n        const keyboard = Markup.inlineKeyboard([\n            [\n                Markup.button.callback('✅ Принять', `approve_${applicationId}`),\n                Markup.button.callback('❌ Отказать', `reject_${applicationId}`)\n            ],\n            [Markup.button.callback('📄 Проверить документы', `check_docs_${applicationId}`)],\n            [Markup.button.callback('« К списку заявок', 'show_applications')]\n        ]);\n\n        await ctx.editMessageText(messageText, keyboard);\n    } catch (error) {\n        console.error('Error viewing application:', error);\n        await ctx.reply('Произошла ошибка при просмотре заявки.');\n    }\n});\n\n// Обработка проверки документов\n// Обработка проверки документов\nemploymentScene.action(/^check_docs_(\\d+)$/, async (ctx) => {\n    const applicationId = ctx.match[1];\n    try {\n        const documents = await LaravelService.getRegistrationDocuments(applicationId);\n        \n        if (documents && documents.length > 0) {\n            for (const doc of documents) {\n                try {\n                    const fileBuffer = await fs.promises.readFile(doc.path);\n                    await ctx.replyWithDocument({ \n                        source: fileBuffer,\n                        filename: doc.original_name \n                    });\n                    await new Promise(resolve => setTimeout(resolve, 1000));\n                } catch (docError) {\n                    console.error('Error sending document:', {\n                        error: docError,\n                        document: doc\n                    });\n                    await ctx.reply(`Ошибка при отправке документа ${doc.original_name}`);\n                }\n            }\n\n            // Добавляем сообщение с кнопкой возврата после отправки всех документов\n            await ctx.reply('Все документы отправлены', \n                Markup.inlineKeyboard([[\n                    Markup.button.callback('« Назад к заявке', `view_application_${applicationId}`)\n                ]])\n            );\n        } else {\n            await ctx.reply('Документы еще не были загружены кандидатом.',\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('« Назад к заявке', `view_application_${applicationId}`)\n                ]])\n            );\n        }\n    } catch (error) {\n        console.error('Error fetching documents:', error);\n        await ctx.reply('Произошла ошибка при получении документов.',\n            Markup.inlineKeyboard([[\n                Markup.button.callback('« Назад к заявке', `view_application_${applicationId}`)\n            ]])\n        );\n    }\n});\n\n// Обработчики принятия/отказа\nemploymentScene.action(/^approve_(\\d+)$/, async (ctx) => {\n    const applicationId = ctx.match[1];\n    try {\n        await LaravelService.approveRegistration(applicationId);\n        await ctx.answerCbQuery('✅ Кандидат успешно принят на работу');\n        await ctx.scene.reenter();\n    } catch (error) {\n        console.error('Error approving application:', error);\n        await ctx.reply('Произошла ошибка при одобрении заявки.');\n    }\n});\n\nemploymentScene.action(/^reject_(\\d+)$/, async (ctx) => {\n    const applicationId = ctx.match[1];\n    try {\n        await LaravelService.rejectRegistration(applicationId);\n        await ctx.answerCbQuery('❌ Заявка отклонена');\n        await ctx.scene.reenter();\n    } catch (error) {\n        console.error('Error rejecting application:', error);\n        await ctx.reply('Произошла ошибка при отклонении заявки.');\n    }\n});\n\n// Обработчик добавления нового сотрудника\nemploymentScene.action('add_employee', async (ctx) => {\n    const text = `\n📝 Инструкция по трудоустройству нового мастера:\n\n1️⃣ Отправьте кандидату ссылку на бота:\n@testmaster031224_bot\n\n2️⃣ Кандидату необходимо:\n- Запустить бота командой /start\n- Пройти процесс регистрации\n- Загрузить необходимые документы\n\n❗️ После загрузки документов заявка появится в разделе \"Активные заявки\"\n    `;\n\n    const keyboard = Markup.inlineKeyboard([[\n        Markup.button.callback('« Назад', 'back_to_employment')\n    ]]);\n\n    await ctx.editMessageText(text, keyboard);\n});\n\n// Обработчики навигации\nemploymentScene.action('back_to_employment', async (ctx) => {\n    await ctx.answerCbQuery();\n    await showEmploymentMenu(ctx);\n});\n\nemploymentScene.action('mainmenu', async (ctx) => {\n    await ctx.answerCbQuery();\n    await ctx.scene.enter('admin_main');\n});\n\n// Обработка ошибок\nemploymentScene.use(async (ctx, next) => {\n    try {\n        await next();\n    } catch (error) {\n        console.error('Error in employmentScene:', error);\n        await ctx.reply(\n            'Произошла ошибка. Попробуйте позже или обратитесь к администратору.',\n            Markup.inlineKeyboard([[\n                Markup.button.callback('« Назад', 'back_to_employment')\n            ]])\n        );\n    }\n});","import { Scenes, Markup } from 'telegraf';\nimport { MyContext, NotificationForm } from '../../../types/MyContext';\nimport logger from '../../../../utils/logger/loggerTelegram';\nimport LaravelService from '../../../../services/laravelService';\n\ninterface NotificationResponse {\n    success: boolean;\n    message?: string;\n    data?: any;\n}\n\nexport const notificationsCreateScene = new Scenes.BaseScene<MyContext>('notifications_create_scene');\n\n// Обработчик входа в сцену\nnotificationsCreateScene.enter(async (ctx) => {\n    // Инициализируем структуру уведомления\n    ctx.session.notificationForm = {\n        name: '',\n        sum: '',\n        dateTime: '',\n        type: '',\n        frequency: '', // daily, weekly, monthly, custom\n        frequency_value: '', // Для custom: количество дней\n        created_at: new Date().toISOString()\n    };\n\n    await ctx.reply(\n        'Введите название уведомления\\n\\nПример: Оплатить аренду помещения',\n        Markup.inlineKeyboard([\n            [Markup.button.callback('👈 Назад', 'back_to_notifications')],\n            [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n        ])\n    );\n});\n\n// Обработчик текстовых сообщений\nnotificationsCreateScene.on('text', async (ctx) => {\n    if (!ctx.session.notificationForm) {\n        await ctx.scene.reenter();\n        return;\n    }\n\n    const form = ctx.session.notificationForm;\n\n    try {\n        // Этап ввода названия\n        if (!form.name) {\n            form.name = ctx.message.text;\n            await ctx.reply(\n                'Какая сумма для оплаты?\\n\\nЕсли сумма не требуется, введите 0',\n                Markup.inlineKeyboard([\n                    [Markup.button.callback('👈 Назад', 'reset_name')],\n                    [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n                ])\n            );\n            return;\n        }\n\n        // Этап ввода суммы\n        if (!form.sum && form.sum !== '0') {\n            const sum = Number(ctx.message.text);\n            if (isNaN(sum) || sum < 0) {\n                await ctx.reply('Пожалуйста, введите положительное число или 0');\n                return;\n            }\n            form.sum = sum.toString();\n            await ctx.reply(\n                'Введите дату и время уведомления\\n\\nФормат: ДД.ММ.ГГГГ ЧЧ:ММ\\nПример: 25.12.2024 15:00',\n                Markup.inlineKeyboard([\n                    [Markup.button.callback('👈 Назад', 'reset_sum')],\n                    [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n                ])\n            );\n            return;\n        }\n\n        // Этап ввода даты и времени\n        if (!form.dateTime) {\n            const dateTimeRegex = /^(\\d{2})\\.(\\d{2})\\.(\\d{4})\\s(\\d{2}):(\\d{2})$/;\n            const match = ctx.message.text.match(dateTimeRegex);\n            \n            if (!match) {\n                await ctx.reply(\n                    'Неверный формат даты и времени!\\n\\n' +\n                    'Используйте формат: ДД.ММ.ГГГГ ЧЧ:ММ\\n' +\n                    'Например: 25.12.2024 15:00'\n                );\n                return;\n            }\n\n            const [_, day, month, year, hour, minute] = match;\n            const date = new Date(Number(year), Number(month) - 1, Number(day), Number(hour), Number(minute));\n\n            if (date < new Date()) {\n                await ctx.reply('Дата и время не могут быть в прошлом');\n                return;\n            }\n\n            form.dateTime = ctx.message.text;\n            \n            // Запрашиваем тип уведомления\n            await ctx.reply(\n                'Уведомление разовое или повторяющееся?',\n                Markup.inlineKeyboard([\n                    [\n                        Markup.button.callback('⚡️ Разовое', 'type_single'),\n                        Markup.button.callback('🔄 Повторяющееся', 'type_recurring')\n                    ],\n                    [Markup.button.callback('👈 Назад', 'reset_datetime')],\n                    [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n                ])\n            );\n            return;\n        }\n\n        // Этап ввода значения для кастомной периодичности\n        if (form.type === 'recurring' && form.frequency === 'custom' && !form.frequency_value) {\n            const days = parseInt(ctx.message.text);\n            if (isNaN(days) || days <= 0 || days > 365) {\n                await ctx.reply('Пожалуйста, введите число от 1 до 365');\n                return;\n            }\n            \n            form.frequency_value = days.toString();\n            await createNotification(ctx);\n        }\n\n    } catch (error) {\n        logger.error('Error in notifications create scene:', error);\n        await ctx.reply(\n            '❌ Произошла ошибка. Попробуйте начать сначала.',\n            Markup.inlineKeyboard([\n                [Markup.button.callback('🔄 Начать сначала', 'restart')],\n                [Markup.button.callback('👈 Назад', 'back_to_notifications')],\n                [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n            ])\n        );\n    }\n});\n\n// Обработчики типа уведомления\nnotificationsCreateScene.action('type_single', async (ctx) => {\n    await ctx.answerCbQuery();\n    ctx.session.notificationForm.type = 'single';\n    await createNotification(ctx);\n});\n\nnotificationsCreateScene.action('type_recurring', async (ctx) => {\n    await ctx.answerCbQuery();\n    ctx.session.notificationForm.type = 'recurring';\n    \n    await ctx.reply(\n        'Выберите периодичность уведомления:',\n        Markup.inlineKeyboard([\n            [Markup.button.callback('📅 Каждый день', 'frequency_daily')],\n            [Markup.button.callback('📅 Каждую неделю', 'frequency_weekly')],\n            [Markup.button.callback('📅 Каждый месяц', 'frequency_monthly')],\n            [Markup.button.callback('📅 Указать свой период', 'frequency_custom')],\n            [Markup.button.callback('👈 Назад', 'reset_type')],\n            [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n        ])\n    );\n});\n\n// Обработчики периодичности\nnotificationsCreateScene.action(['frequency_daily', 'frequency_weekly', 'frequency_monthly'], async (ctx) => {\n    await ctx.answerCbQuery();\n    const frequencyMap: Record<string, NotificationForm['frequency']> = {\n        'frequency_daily': 'daily',\n        'frequency_weekly': 'weekly',\n        'frequency_monthly': 'monthly'\n    };\n    \n    if (ctx.callbackQuery && 'data' in ctx.callbackQuery) {\n        const data = ctx.callbackQuery.data;\n        const frequency = frequencyMap[data];\n        if (frequency) {\n            ctx.session.notificationForm.frequency = frequency;\n        }\n    }\n    await createNotification(ctx);\n});\n\nnotificationsCreateScene.action('frequency_custom', async (ctx) => {\n    await ctx.answerCbQuery();\n    ctx.session.notificationForm.frequency = 'custom';\n    \n    await ctx.reply(\n        'Введите количество дней между уведомлениями (от 1 до 365):',\n        Markup.inlineKeyboard([\n            [Markup.button.callback('👈 Назад', 'reset_frequency')],\n            [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n        ])\n    );\n});\n\n// Функция создания уведомления\nasync function createNotification(ctx: MyContext) {\n    try {\n        const form = ctx.session.notificationForm;\n        \n        if (!form) {\n            throw new Error('Notification form is empty');\n        }\n\n        const result = await LaravelService.createNotificationByTelegramId(\n            ctx.from.id,\n            ctx.session.notificationForm\n        ) as NotificationResponse;\n\n        if (!result?.success) {\n            throw new Error(result?.message || 'Failed to create notification');\n        }\n\n        const message = `✅ Уведомление успешно создано!\\n\\n` +\n            `📝 Название: ${form.name}\\n` +\n            `💰 Сумма: ${form.sum === '0' ? 'не указана' : form.sum + ' руб.'}\\n` +\n            `🕐 Время: ${form.dateTime}\\n` +\n            `🔄 Тип: ${form.type === 'single' ? 'разовое' : 'повторяющееся'}`;\n\n        await ctx.reply(\n            message,\n            Markup.inlineKeyboard([\n                [Markup.button.callback('📝 Создать ещё', 'create_another')],\n                [Markup.button.callback('📋 К списку уведомлений', 'back_to_notifications')],\n                [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n            ])\n        );\n\n    } catch (error) {\n        logger.error('Error creating notification:', error);\n        await ctx.reply(\n            '❌ Ошибка при создании уведомления',\n            Markup.inlineKeyboard([\n                [Markup.button.callback('🔄 Попробовать снова', 'restart')],\n                [Markup.button.callback('👈 Назад', 'back_to_notifications')],\n                [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n            ])\n        );\n    }\n}\n\n// Обработчики навигации и сброса данных\nnotificationsCreateScene.action('reset_name', async (ctx) => {\n    await ctx.answerCbQuery();\n    ctx.session.notificationForm.name = '';\n    await ctx.scene.reenter();\n});\n\nnotificationsCreateScene.action('reset_sum', async (ctx) => {\n    await ctx.answerCbQuery();\n    ctx.session.notificationForm.sum = '';\n    await ctx.reply('Какая сумма для оплаты?\\n\\nЕсли сумма не требуется, введите 0');\n});\n\nnotificationsCreateScene.action('reset_datetime', async (ctx) => {\n    await ctx.answerCbQuery();\n    ctx.session.notificationForm.dateTime = '';\n    await ctx.reply(\n        'Введите дату и время уведомления\\n\\nФормат: ДД.ММ.ГГГГ ЧЧ:ММ\\nПример: 25.12.2024 15:00'\n    );\n});\n\nnotificationsCreateScene.action('reset_type', async (ctx) => {\n    await ctx.answerCbQuery();\n    ctx.session.notificationForm.type = '';\n    await ctx.reply(\n        'Уведомление разовое или повторяющееся?',\n        Markup.inlineKeyboard([\n            [\n                Markup.button.callback('⚡️ Разовое', 'type_single'),\n                Markup.button.callback('🔄 Повторяющееся', 'type_recurring')\n            ],\n            [Markup.button.callback('👈 Назад', 'reset_datetime')],\n            [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n        ])\n    );\n});\n\nnotificationsCreateScene.action('reset_frequency', async (ctx) => {\n    await ctx.answerCbQuery();\n    ctx.session.notificationForm.frequency = '';\n    ctx.session.notificationForm.type = 'recurring';\n    \n    await ctx.reply(\n        'Выберите периодичность уведомления:',\n        Markup.inlineKeyboard([\n            [Markup.button.callback('📅 Каждый день', 'frequency_daily')],\n            [Markup.button.callback('📅 Каждую неделю', 'frequency_weekly')],\n            [Markup.button.callback('📅 Каждый месяц', 'frequency_monthly')],\n            [Markup.button.callback('📅 Указать свой период', 'frequency_custom')],\n            [Markup.button.callback('👈 Назад', 'reset_type')],\n            [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n        ])\n    );\n});\n\n// Общие обработчики навигации\nnotificationsCreateScene.action('create_another', async (ctx) => {\n    await ctx.answerCbQuery();\n    await ctx.scene.reenter();\n});\n\nnotificationsCreateScene.action('back_to_notifications', async (ctx) => {\n    await ctx.answerCbQuery();\n    await ctx.scene.enter('notifications_management');\n});\n\nnotificationsCreateScene.action('restart', async (ctx) => {\n    await ctx.answerCbQuery();\n    await ctx.scene.reenter();\n});\n\nnotificationsCreateScene.action('mainmenu', async (ctx) => {\n    await ctx.answerCbQuery();\n    await ctx.scene.enter('admin_main');\n});\n\nexport default notificationsCreateScene;","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\nimport logger from '../../../../utils/logger/loggerTelegram';\nimport LaravelService from '../../../../services/laravelService';\nimport { PaginatedNotifications, Notification } from '../../../types/Notification';\nimport { formatInTimeZone } from 'date-fns-tz';\n\n\ninterface LaravelApiResponse<T> {\n    success: boolean;\n    data: T;\n    message?: string;\n}\n\nexport const notificationsListScene = new Scenes.BaseScene<MyContext>('notifications_list_scene');\n\n// Вход в сцену - показываем список уведомлений\nnotificationsListScene.enter(async (ctx) => {\n    try {\n        const response = await LaravelService.getAdminNotifications(ctx.from.id) as unknown as LaravelApiResponse<PaginatedNotifications>;\n\n        if (!response?.success || !response?.data) {\n            await ctx.reply(\n                '❌ Ошибка при загрузке уведомлений',\n                Markup.inlineKeyboard([\n                    [Markup.button.callback('📝 Создать уведомление', 'create_notification')],\n                    [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n                ])\n            );\n            return;\n        }\n\n        let notificationsArray: Notification[] = [];\n\n        // Response.data теперь точно содержит PaginatedNotifications\n        if (response.data.data) {\n            notificationsArray = response.data.data;\n        }\n\n        if (notificationsArray.length === 0) {\n            await ctx.reply(\n                '📝 У вас пока нет активных уведомлений',\n                Markup.inlineKeyboard([\n                    [Markup.button.callback('📝 Создать уведомление', 'create_notification')],\n                    [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n                ])\n            );\n            return;\n        }\n\n        if (notificationsArray.length === 0) {\n            await ctx.reply(\n                '📝 У вас пока нет активных уведомлений',\n                Markup.inlineKeyboard([\n                    [Markup.button.callback('📝 Создать уведомление', 'create_notification')],\n                    [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n                ])\n            );\n            return;\n        }\n\n        await ctx.reply(\n            '📋 Список ваших уведомлений:\\n\\n' +\n            notificationsArray.map((notif, index) => {\n                let formattedTime = notif.notification_datetime;\n                if (notif.notification_datetime && typeof notif.notification_datetime === 'string') {\n                    try {\n                        formattedTime = formatInTimeZone(new Date(notif.notification_datetime), 'Europe/Moscow', 'dd.MM.yyyy HH:mm');\n                    } catch (e) {\n                        logger.error('Error formatting notification time', { error: e, notification: notif });\n                    }\n                }\n                return `${index + 1}. 📝 ${notif.name}\\n` +\n                    `💰 Сумма: ${notif.sum ? `${notif.sum} руб.` : 'не указана'}\\n` +\n                    `🕐 Время: ${formattedTime}\\n` +\n                    `🔄 Тип: ${notif.type === 'single' ? 'разовое' : 'повторяющееся'}\\n`;\n            }).join('\\n'),\n            Markup.inlineKeyboard([\n                ...notificationsArray.map(notif => [\n                    Markup.button.callback(`✏️ ${notif.name}`, `edit_${notif.id}`)\n                ]),\n                [Markup.button.callback('📝 Создать уведомление', 'create_notification')],\n                [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n            ])\n        );\n    } catch (error) {\n        logger.error('Error in notifications list scene:', error);\n        await ctx.reply('❌ Произошла ошибка при загрузке уведомлений');\n    }\n});\n\n// Обработка нажатия на уведомление для редактирования\nnotificationsListScene.action(/edit_(\\d+)/, async (ctx) => {\n    try {\n        await ctx.answerCbQuery();\n        const notificationId = ctx.match[1];\n\n        const response = await LaravelService.getAdminNotification(parseInt(notificationId)) as LaravelApiResponse<Notification>;\n        \n        if (!response?.success || !response?.data) {\n            await ctx.reply('❌ Уведомление не найдено');\n            return;\n        }\n\n        const notification = response.data;\n        let formattedTime = 'не указано';\n        \n        if (notification.notification_datetime) {\n            try {\n                formattedTime = formatInTimeZone(\n                    new Date(notification.notification_datetime),\n                    'Europe/Moscow',\n                    'dd.MM.yyyy HH:mm'\n                );\n            } catch (error) {\n                logger.error('Ошибка форматирования даты', { error, date: notification.notification_datetime });\n            }\n        }\n\n        ctx.session.selectedNotificationId = parseInt(notificationId);\n\n        await ctx.reply(\n            `Выберите, что хотите изменить:\\n\\n` +\n            `📝 Название: ${notification.name || 'не указано'}\\n` +\n            `💰 Сумма: ${notification.sum ? `${notification.sum} руб.` : 'не указана'}\\n` +\n            `🕐 Время: ${formattedTime}`,\n            Markup.inlineKeyboard([\n                [Markup.button.callback('✏️ Название', 'edit_name')],\n                [Markup.button.callback('💰 Сумму', 'edit_sum')],\n                [Markup.button.callback('🕐 Дату', 'edit_date')],\n                [Markup.button.callback('❌ Удалить', 'delete_notification')],\n                [Markup.button.callback('👈 Назад', 'back_to_list')],\n                [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n            ])\n        );\n    } catch (error) {\n        logger.error('Ошибка в действии редактирования уведомления:', error);\n        await ctx.reply('❌ Произошла ошибка');\n    }\n});\n\n// Обработчики редактирования\nnotificationsListScene.action('edit_name', async (ctx) => {\n    await ctx.answerCbQuery();\n    ctx.session.editField = 'name';\n    await ctx.reply('Введите новое название уведомления:');\n});\n\nnotificationsListScene.action('edit_sum', async (ctx) => {\n    await ctx.answerCbQuery();\n    ctx.session.editField = 'sum';\n    await ctx.reply('Введите новую сумму (или 0, если сумма не требуется):');\n});\n\nnotificationsListScene.action('edit_date', async (ctx) => {\n    await ctx.answerCbQuery();\n    ctx.session.editField = 'date';\n    await ctx.reply(\n        'Введите новую дату и время:\\n\\n' +\n        'Формат: ДД.ММ.ГГГГ ЧЧ:ММ\\n' +\n        'Например: 25.12.2024 15:00'\n    );\n});\n\n// Обработка текстовых сообщений для редактирования\n// Обработка текстовых сообщений для редактирования\nnotificationsListScene.on('text', async (ctx) => {\n    if (!ctx.session.editField || !ctx.session.selectedNotificationId) {\n        return;\n    }\n\n    try {\n        let updateData: any = {};\n        const value = ctx.message.text;\n\n        // Получаем текущее уведомление для проверки его типа\n        const currentNotification = await LaravelService.getAdminNotification(ctx.session.selectedNotificationId) as LaravelApiResponse<Notification>;\n        \n        if (!currentNotification?.success || !currentNotification?.data) {\n            throw new Error('Failed to get current notification');\n        }\n\n        // Особая обработка для даты\n        if (ctx.session.editField === 'date') {\n            try {\n                // Парсим введённую дату в формате ДД.ММ.ГГГГ ЧЧ:ММ\n                const [datePart, timePart] = value.split(' ');\n                if (!datePart || !timePart) {\n                    throw new Error('Invalid date format');\n                }\n\n                const [day, month, year] = datePart.split('.');\n                const [hours, minutes] = timePart.split(':');\n\n                // Проверяем все компоненты даты\n                if (!day || !month || !year || !hours || !minutes) {\n                    throw new Error('Invalid date components');\n                }\n\n                // Создаём дату в московском часовом поясе\n                const moscowDate = new Date(\n                    parseInt(year),\n                    parseInt(month) - 1,\n                    parseInt(day),\n                    parseInt(hours),\n                    parseInt(minutes)\n                );\n\n                if (isNaN(moscowDate.getTime())) {\n                    throw new Error('Invalid date');\n                }\n\n                // Преобразуем в UTC для сохранения\n                const utcDate = formatInTimeZone(moscowDate, 'Europe/Moscow', \"yyyy-MM-dd HH:mm:ss\");\n                updateData.notification_datetime = utcDate;\n\n                // Для повторяющихся уведомлений сбрасываем дату последней отправки\n                if (currentNotification.data.type === 'recurring') {\n                    updateData.last_notification_sent_at = null;\n                }\n            } catch (error) {\n                logger.error('Error parsing date:', error);\n                await ctx.reply(\n                    '❌ Неверный формат даты. Используйте формат ДД.ММ.ГГГГ ЧЧ:ММ\\n' +\n                    'Например: 25.12.2024 15:00'\n                );\n                return;\n            }\n        } else {\n            // Для остальных полей просто передаём значение\n            updateData[ctx.session.editField] = value;\n        }\n\n        const result = await LaravelService.updateAdminNotification(\n            ctx.session.selectedNotificationId,\n            updateData\n        );\n\n        if (result?.success) {\n            await ctx.reply(\n                '✅ Уведомление успешно обновлено',\n                Markup.inlineKeyboard([\n                    [Markup.button.callback('👈 К списку уведомлений', 'back_to_list')],\n                    [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n                ])\n            );\n        } else {\n            throw new Error('Failed to update notification');\n        }\n\n    } catch (error) {\n        logger.error('Error updating notification:', error);\n        await ctx.reply('❌ Произошла ошибка при обновлении');\n    }\n\n    ctx.session.editField = undefined;\n});\n\n// Удаление уведомления\nnotificationsListScene.action('delete_notification', async (ctx) => {\n    try {\n        await ctx.answerCbQuery();\n        \n        if (!ctx.session.selectedNotificationId) {\n            throw new Error('No notification selected');\n        }\n\n        const success = await LaravelService.deleteAdminNotification(ctx.session.selectedNotificationId);\n\n        if (success) {\n            await ctx.reply(\n                '✅ Уведомление удалено',\n                Markup.inlineKeyboard([\n                    [Markup.button.callback('👈 К списку уведомлений', 'back_to_list')],\n                    [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n                ])\n            );\n        } else {\n            throw new Error('Failed to delete notification');\n        }\n\n    } catch (error) {\n        logger.error('Error deleting notification:', error);\n        await ctx.reply('❌ Произошла ошибка при удалении уведомления');\n    }\n});\n\n// Навигация\nnotificationsListScene.action('back_to_list', async (ctx) => {\n    await ctx.answerCbQuery();\n    ctx.session.editField = undefined;\n    ctx.session.selectedNotificationId = undefined;\n    await ctx.scene.reenter();\n});\n\nnotificationsListScene.action('create_notification', async (ctx) => {\n    await ctx.answerCbQuery();\n    await ctx.scene.enter('notifications_create_scene');\n});\n\nnotificationsListScene.action('mainmenu', async (ctx) => {\n    await ctx.answerCbQuery();\n    await ctx.scene.enter('admin_main');\n});\n\nexport default notificationsListScene;","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\nimport logger from '../../../../utils/logger/loggerTelegram';\nimport LaravelService from '../../../../services/laravelService';\n\nexport const notificationsManagementScene = new Scenes.BaseScene<MyContext>('notifications_management');\n\nnotificationsManagementScene.enter(async (ctx) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('📝 Создать уведомление', 'create_notification')],\n        [Markup.button.callback('📋 Активные уведомления', 'active_notifications')],\n        [Markup.button.callback('👈 Назад', 'back_to_main')],\n        [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n    ]);\n\n    await ctx.reply(\n        'Управление уведомлениями\\n\\n' +\n        'Здесь вы можете создавать напоминания и просматривать активные уведомления.',\n        keyboard\n    );\n});\n\n// Обработчик кнопки создания нового уведомления\nnotificationsManagementScene.action('create_notification', async (ctx) => {\n    await ctx.answerCbQuery();\n    await ctx.scene.enter('notifications_create_scene');\n});\n\n// Обработчик кнопки просмотра активных уведомлений\nnotificationsManagementScene.action('active_notifications', async (ctx) => {\n    await ctx.answerCbQuery();\n    await ctx.scene.enter('notifications_list_scene');\n});\n\n// Обработчик кнопки \"Назад\"\nnotificationsManagementScene.action('back_to_main', async (ctx) => {\n    await ctx.answerCbQuery();\n    await ctx.scene.enter('admin_main');\n});\n\n// Обработчик кнопки \"Главное меню\"\nnotificationsManagementScene.action('mainmenu', async (ctx) => {\n    await ctx.answerCbQuery();\n    await ctx.scene.enter('admin_main');\n});\n\nexport default notificationsManagementScene;","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\nimport LaravelService from '../../../../services/laravelService';\nimport logger from '../../../../utils/logger/loggerTelegram';\n\nexport const productsScene = new Scenes.BaseScene<MyContext>('products_scene');\n\nproductsScene.enter(async (ctx) => {\n    try {\n        // Читаем из общей сессии\n        const branchId = parseInt(ctx.session.selectedBranchId, 10);\n        \n        console.log('Products scene enter:', {\n            sessionBranchId: ctx.session.selectedBranchId,\n            parsedBranchId: branchId\n        });\n        \n        if (!branchId || isNaN(branchId)) {\n            await ctx.reply('Филиал не выбран');\n            return ctx.scene.enter('select_branch_scene');\n        }\n\n        // Получаем товары филиала\n        const response = await LaravelService.getProducts(branchId);\n        \n        if (!response?.success || !response?.data) {\n            await ctx.reply('В этом филиале нет товаров');\n            return ctx.scene.enter('select_branch_scene');\n        }\n\n        const products = response.data;\n        const buttons = [];\n        \n        for (let i = 0; i < products.length; i++) {\n            const product = products[i];\n            buttons.push([\n                Markup.button.callback(\n                    `${product.title} (${product.actual_amounts?.[0]?.amount || 0} шт)`, \n                    `product_${product.good_id}`\n                )\n            ]);\n        }\n\n        buttons.push([\n            Markup.button.callback('👈 Назад к филиалам', 'back_to_branches'),\n            Markup.button.callback('🏠 Главное меню', 'mainmenu')\n        ]);\n\n        const messageText = 'Выберите товар для которого нужно отслеживать остаток:';\n        \n        if (ctx.callbackQuery?.message) {\n            await ctx.editMessageText(messageText, Markup.inlineKeyboard(buttons));\n        } else {\n            await ctx.reply(messageText, Markup.inlineKeyboard(buttons));\n        }\n\n    } catch (error) {\n        console.error('Error in products scene:', error);\n        await ctx.reply('Произошла ошибка при загрузке товаров');\n        return ctx.scene.enter('select_branch_scene');\n    }\n});\n\nproductsScene.action('back_to_branches', async (ctx) => {\n    await ctx.answerCbQuery();\n    return ctx.scene.enter('select_branch_scene');\n});\n\nproductsScene.action('warehouse_list', async (ctx) => {\n    await ctx.answerCbQuery();\n    return ctx.scene.enter('warehouse_notifications_list');\n});\n\nproductsScene.action('mainmenu', async (ctx) => {\n    await ctx.answerCbQuery();\n    return ctx.scene.enter('admin_main');\n});\n\nproductsScene.action(/^product_(\\d+)$/, async (ctx) => {\n    try {\n        const productId = ctx.match[1];\n        \n        logger.info('Начало обработки выбора продукта:', {\n            productId,\n            branch_id: ctx.session.selectedBranchId,\n            user_id: ctx.from?.id\n        });\n\n        // Сохраняем ID в session (не scene.session!)\n        ctx.session.selectedProductId = productId;\n        \n        logger.info('Переход к сцене создания уведомления', {\n            selectedProductId: productId,\n            session: ctx.session\n        });\n\n        // Сначала делаем переход\n        const result = await ctx.scene.enter('create_warehouse_notification_scene');\n        \n        // Только потом отвечаем на callback\n        await ctx.answerCbQuery('Товар выбран ✓');\n\n        logger.info('Переход выполнен', { \n            success: true,\n            currentScene: ctx.scene.current?.id\n        });\n\n    } catch (error) {\n        logger.error('Ошибка при выборе продукта:', {\n            error: error instanceof Error ? error.message : 'Unknown error',\n            productId: ctx.match?.[1],\n            userId: ctx.from?.id\n        });\n        \n        await ctx.answerCbQuery('Произошла ошибка ❌');\n        await ctx.reply(\n            'Произошла ошибка при выборе товара. Попробуйте еще раз.',\n            Markup.inlineKeyboard([\n                [Markup.button.callback('🔄 Попробовать снова', 'refresh_products')],\n                [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n            ])\n        );\n    }\n});\n\nproductsScene.action('refresh_products', async (ctx) => {\n    await ctx.answerCbQuery('Обновляем список... ⌛');\n    await ctx.scene.reenter();\n});","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\nimport logger from '../../../../utils/logger/loggerTelegram';\nimport LaravelService from '../../../../services/laravelService';\nimport moment from 'moment'; // Изменен импорт\nimport 'moment-timezone';\n\nexport const remindLaterScene = new Scenes.BaseScene<MyContext & { scene: { state: RemindLaterSceneState } }>('remind_later_scene');\n\n\ninterface NotificationResponse {\n    success: boolean;\n    message?: string;\n    data?: any;\n}\n\ninterface RemindLaterSceneState {\n    notificationId: string;\n}\n\n// Обработчик входа в сцену\nremindLaterScene.enter(async (ctx) => {\n    try {\n        const { state } = ctx.scene;\n        const notificationId = state?.notificationId;\n        \n        logger.info('Entering remind later scene:', {\n            state,\n            notificationId,\n            scene_state: ctx.scene.state\n        });\n        \n        if (!notificationId) {\n            logger.error('No notification ID provided');\n            await ctx.reply('❌ Произошла ошибка. Попробуйте снова.');\n            await ctx.scene.leave();\n            return;\n        }\n\n        await ctx.reply(\n            '⏰ Выберите время для повторного напоминания:',\n            Markup.inlineKeyboard([\n                [Markup.button.callback('🕐 Через 15 минут', `remind_15_${notificationId}`)],\n                [Markup.button.callback('🕐 Через час', `remind_60_${notificationId}`)],\n                [Markup.button.callback('📅 Завтра в это же время', `remind_tomorrow_${notificationId}`)],\n                [Markup.button.callback('❌ Отмена', 'cancel_remind')]\n            ])\n        );\n    } catch (error) {\n        logger.error('Error in remind later scene enter:', error);\n        await ctx.reply('❌ Произошла ошибка. Попробуйте снова.');\n        await ctx.scene.leave();\n    }\n});\n\n// Обработчик для напоминания через 15 минут\nremindLaterScene.action(/remind_15_(\\d+)/, async (ctx) => {\n    await ctx.answerCbQuery();\n    const notificationId = ctx.match[1];\n    await handleReschedule(ctx, notificationId, 15, 'minutes');\n});\n\n// Обработчик для напоминания через час\nremindLaterScene.action(/remind_60_(\\d+)/, async (ctx) => {\n    await ctx.answerCbQuery();\n    const notificationId = ctx.match[1];\n    await handleReschedule(ctx, notificationId, 1, 'hours');\n});\n\n// Обработчик для напоминания завтра\nremindLaterScene.action(/remind_tomorrow_(\\d+)/, async (ctx) => {\n    await ctx.answerCbQuery();\n    const notificationId = ctx.match[1];\n    await handleReschedule(ctx, notificationId, 24, 'hours');\n});\n\n// Обработчик отмены\nremindLaterScene.action('cancel_remind', async (ctx) => {\n    await ctx.answerCbQuery('Отменено');\n    await ctx.reply('❌ Перенос напоминания отменён');\n    await ctx.scene.leave();\n});\n\n// Функция для обработки переноса уведомления\nasync function handleReschedule(\n    ctx: MyContext,\n    notificationId: string,\n    amount: number,\n    unit: 'minutes' | 'hours'\n) {\n    try {\n        // Добавляем минуты/часы к текущему UTC времени\n        const utcDateTime = moment().utc()\n            .add(amount, unit)\n            .format('YYYY-MM-DD HH:mm:00');\n\n        // Для отображения конвертируем в московское время\n        const mskDisplayTime = moment().utc()\n            .add(amount, unit)\n            .tz('Europe/Moscow')\n            .format('DD.MM.YYYY HH:mm');\n\n        const result = await LaravelService.rescheduleNotification(\n            parseInt(notificationId),\n            utcDateTime // отправляем время в UTC\n        );\n\n        if (result?.success) {\n            await ctx.reply(\n                `✅ Напоминание перенесено на ${mskDisplayTime}`, // показываем московское время\n                Markup.inlineKeyboard([\n                    [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n                ])\n            );\n        } else {\n            throw new Error('Failed to reschedule notification');\n        }\n    } catch (error) {\n        logger.error('Error rescheduling notification:', error);\n        await ctx.reply('❌ Произошла ошибка при переносе уведомления');\n    }\n    \n    await ctx.scene.leave();\n}\n    \n\n\nexport default remindLaterScene;","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\nimport axios from 'axios';\nimport fs from 'fs';\nimport path from 'path';\nimport LaravelService from '../../../../services/laravelService';\n\nexport const salaryScene = new Scenes.BaseScene<MyContext>('salary');\n\n// Обработчик кнопки экспорта\nsalaryScene.action('export_salary', async (ctx) => {\n    try {\n        await ctx.answerCbQuery('Генерируем отчет...');\n        \n        // Получаем файл через сервис\n        const excelBuffer = await LaravelService.exportSalaryReport();\n\n        // Создаем временный файл\n        const tempDir = path.join(__dirname, '../../../temp');\n        if (!fs.existsSync(tempDir)) {\n            fs.mkdirSync(tempDir, { recursive: true });\n        }\n        \n        const tempFilePath = path.join(tempDir, `salary_${Date.now()}.xlsx`);\n        fs.writeFileSync(tempFilePath, excelBuffer);\n\n        // Отправляем файл\n        await ctx.replyWithDocument({\n            source: tempFilePath,\n            filename: `salary_report.xlsx`\n        });\n\n        // Удаляем временный файл\n        fs.unlinkSync(tempFilePath);\n\n    } catch (error) {\n        console.error('Error exporting salary:', error);\n        await ctx.reply('Произошла ошибка при формировании отчета. Попробуйте позже.');\n    }\n});\n\nsalaryScene.action('mainmenu', async (ctx) => {\n    await ctx.answerCbQuery();\n    await ctx.scene.enter('admin_main');\n});\n\n// Входная точка сцены\nsalaryScene.enter(async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('📥 Скачать отчет по зарплате', 'export_salary')],\n        [Markup.button.callback('◀️ Назад', 'mainmenu')]\n    ]);\n\n    await ctx.reply('💰 Управление зарплатами', keyboard);\n});","// src/services/scenes/warehouse/selectBranchScene.ts\nimport { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\nimport LaravelService from '../../../../services/laravelService';\nimport logger from '../../../../utils/logger/loggerTelegram';\n\nexport const selectBranchScene = new Scenes.BaseScene<MyContext>('select_branch_scene');\n\nselectBranchScene.enter(async (ctx) => {\n    try {\n        // Получаем компании\n        const response = await LaravelService.getCompanies();\n\n        if (!response?.success || !response?.data) {\n            await ctx.reply('Нет доступных филиалов');\n            return ctx.scene.enter('warehouse');\n        }\n\n        const companies = response.data;\n\n        // Создаем кнопки для каждого филиала\n        const buttons = companies.map(company => [\n            Markup.button.callback(\n                company.title, \n                `select_branch_${company.id}`\n            )\n        ]);\n\n        buttons.push([\n        \n            Markup.button.callback('🏠 Главное меню', 'mainmenu')\n        ]);\n\n        const messageText = 'Выберите филиал для просмотра товаров:';\n        \n        if (ctx.callbackQuery?.message) {\n            await ctx.editMessageText(messageText, \n                Markup.inlineKeyboard(buttons)\n            );\n        } else {\n            await ctx.reply(messageText, \n                Markup.inlineKeyboard(buttons)\n            );\n        }\n    } catch (error) {\n        logger.error('Error in selectBranchScene.enter:', error);\n        await ctx.reply('Произошла ошибка при загрузке списка филиалов');\n        return ctx.scene.enter('warehouse');\n    }\n});\n\nselectBranchScene.action(/^select_branch_(\\d+)$/, async (ctx) => {\n    try {\n        const branchId = ctx.match[1];\n        // Сохраняем в общей сессии вместо scene.session\n        ctx.session.selectedBranchId = branchId;\n        \n        console.log('Selected branch ID in selection:', {\n            branchId,\n            session: ctx.session\n        });\n        \n        await ctx.answerCbQuery('Филиал выбран');\n        return ctx.scene.enter('products_scene');\n    } catch (error) {\n        logger.error('Error in branch selection:', error);\n        await ctx.reply('Произошла ошибка при выборе филиала');\n        return ctx.scene.enter('select_branch_scene');\n    }\n});\n\nselectBranchScene.action('back_to_warehouse', async (ctx) => {\n    await ctx.answerCbQuery();\n    return ctx.scene.enter('warehouse');  // Теперь возвращаемся в основное меню склада\n});\n\nselectBranchScene.action('mainmenu', async (ctx) => {\n    await ctx.answerCbQuery();\n    return ctx.scene.enter('admin_main');\n});","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\nimport logger from '../../../../utils/logger/loggerTelegram';\nimport LaravelService from \"../../../../services/laravelService\";\nimport { fmt, bold } from 'telegraf/format';\n\n// Дополнительные типы для сцены\ninterface TasksState {\n    page: number;\n    filter: 'active' | 'completed' | 'all';\n}\n\ninterface SceneState {\n    tasksState: TasksState;\n}\n\ntype TasksSceneContext = MyContext & {\n    scene: Scenes.SceneContextScene<MyContext> & {\n        state: SceneState;\n    };\n};\n\nexport const tasksScene = new Scenes.BaseScene<TasksSceneContext>('tasks');\n\n// Инициализация состояния при входе в сцену\ntasksScene.enter(async (ctx) => {\n    if (!ctx.scene.state) {\n        ctx.scene.state = {\n            tasksState: {\n                page: 1,\n                filter: 'active' as const\n            }\n        };\n    } else {\n        ctx.scene.state.tasksState = {\n            page: 1,\n            filter: 'active' as const\n        };\n    }\n    \n    await showTasks(ctx);\n});\n\nasync function showTasks(ctx: TasksSceneContext) {\n    try {\n        const state = ctx.scene.state.tasksState;\n        \n        const response = await LaravelService.getTasks({\n            page: state.page,\n            per_page: 5,\n            filter: state.filter\n        });\n\n        const tasks = response?.data?.data || [];\n        const total = response?.data?.total || 0;\n        const totalPages = Math.ceil(total / 5) || 1;\n\n        // Проверяем валидность текущей страницы\n        if (state.page > totalPages) {\n            state.page = totalPages;\n        }\n\n        // Если нет задач\n        if (!tasks.length) {\n            const message = state.filter === 'completed' \n                ? '📋 Нет выполненных задач' \n                : '📋 Список задач пуст';\n\n            if (ctx.callbackQuery) {\n                try {\n                    await ctx.editMessageText(message, buildMainMenuKeyboard());\n                } catch (error) {\n                    if (!error.message?.includes('message is not modified')) {\n                        await ctx.reply(message, buildMainMenuKeyboard());\n                    }\n                }\n            } else {\n                await ctx.reply(message, buildMainMenuKeyboard());\n            }\n            return;\n        }\n\n        // Формируем заголовок\n        const headerText = [\n            '📋 Задачи',\n            '',\n            `Всего задач: ${total}`,\n            `Страница: ${state.page}/${totalPages}`,\n            '',\n            'Выберите задачу для просмотра:'\n        ].join('\\n');\n\n        // Формируем клавиатуру\n        const keyboard = [\n            // Задачи\n            ...tasks.map(task => ([\n                Markup.button.callback(\n                    `${getStatusEmoji(task.status)} ${task.title.substring(0, 35)}${task.title.length > 35 ? '...' : ''}`,\n                    `view_task_${task.id}`\n                )\n            ])),\n\n            // Навигация (показываем только если есть больше одной страницы)\n            ...(totalPages > 1 ? [[\n                ...(state.page > 1 ? [Markup.button.callback('⬅️ Назад', 'prev_page')] : []),\n                ...(state.page < totalPages ? [Markup.button.callback('➡️ Вперёд', 'next_page')] : [])\n            ]] : []),\n\n            // Фильтры\n            [\n                Markup.button.callback(\n                    state.filter === 'active' ? '🔵 Активные' : '⚪️ Активные',\n                    'filter_active'\n                ),\n                Markup.button.callback(\n                    state.filter === 'completed' ? '🔵 Выполненные' : '⚪️ Выполненные',\n                    'filter_completed'\n                )\n            ],\n\n            // Кнопка возврата в меню\n            [Markup.button.callback('👈 Вернуться в меню', 'mainmenu')]\n        ].filter(row => row.length > 0); // Убираем пустые ряды\n\n        const markup = Markup.inlineKeyboard(keyboard);\n\n        // Отправляем или обновляем сообщение\n        if (ctx.callbackQuery) {\n            try {\n                await ctx.editMessageText(headerText, markup);\n            } catch (error) {\n                if (!error.message?.includes('message is not modified')) {\n                    console.error('Error updating message:', error);\n                    // Если не удалось обновить, отправляем новое\n                    await ctx.reply(headerText, markup);\n                }\n            }\n        } else {\n            await ctx.reply(headerText, markup);\n        }\n\n    } catch (error) {\n        logger.error('Error in showTasks:', error);\n        const errorMessage = '❌ Произошла ошибка при загрузке задач';\n        \n        if (ctx.callbackQuery) {\n            try {\n                await ctx.editMessageText(errorMessage, buildMainMenuKeyboard());\n            } catch {\n                await ctx.reply(errorMessage, buildMainMenuKeyboard());\n            }\n        } else {\n            await ctx.reply(errorMessage, buildMainMenuKeyboard());\n        }\n    }\n}\n\n// Добавим новый обработчик\ntasksScene.action(/^get_master_photo_(\\d+)$/, async (ctx) => {\n    try {\n        const taskId = parseInt(ctx.match[1], 10);\n        const task = await LaravelService.getTaskById(taskId);\n\n        if (!task?.data) {\n            await ctx.answerCbQuery('❌ Задача не найдена');\n            return;\n        }\n\n        await ctx.answerCbQuery('🔍 Получаем фото...');\n\n        const photoResult = await LaravelService.getMasterPhoto(task.data.master_phone);\n\n        if (!photoResult.success) {\n            await ctx.reply(\n                '❌ ' + (photoResult.message || 'Ошибка получения фото мастера'),\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('👈 Вернуться к задаче', `view_task_${taskId}`)\n                ]])\n            );\n            return;\n        }\n\n        const messageText = `\n🖼 Актуальное фото мастера:\n👤 ${task.data.master_name}\n📱 ${task.data.master_phone}\n\n${photoResult.data.photo_url}\n`.trim();\n\n        await ctx.reply(messageText, Markup.inlineKeyboard([[\n            Markup.button.callback('👈 Вернуться к задаче', `view_task_${taskId}`)\n        ]]));\n\n    } catch (error) {\n        logger.error('Error in get_master_photo handler:', error);\n        await ctx.answerCbQuery('❌ Произошла ошибка');\n    }\n});\n\n// Просмотр задачи\ntasksScene.action(/^view_task_(\\d+)$/, async (ctx) => {\n    try {\n        const taskId = parseInt(ctx.match[1], 10);\n        const response = await LaravelService.getTaskById(taskId);\n\n        if (!response?.data) {\n            await ctx.answerCbQuery('❌ Задача не найдена');\n            return;\n        }\n\n        const task = response.data;\n\n        // Форматируем сообщение в виде строки, а не массива\n        const messageText = `\n📋 Задача #${task.id}\n\n📝 Название: ${task.title}\n👤 Мастер: ${task.master_name || 'Не указан'}\n${task.master_phone ? `📱 Телефон: ${task.master_phone}` : ''}\n🔄 Статус: ${getStatusText(task.status)}\n⏰ Создано: ${formatDate(task.created_at)}\n${task.deadline ? `⚠️ Дедлайн: ${formatDate(task.deadline)}` : ''}\n${task.completed_at ? `✅ Выполнено: ${formatDate(task.completed_at)}` : ''}\n\n${task.description ? `📄 Описание: ${task.description}` : ''}\n`.trim();\n\n        const keyboard = [];\n        \n        if (task.status !== 'completed') {\n            keyboard.push([\n                Markup.button.callback('✅ Отметить выполненной', `complete_task_${task.id}`)\n            ]);\n            if (task.status === 'pending') {\n                keyboard.push([\n                    Markup.button.callback('🔄 Взять в работу', `progress_task_${task.id}`)\n                ]);\n            }\n        }\n\n        if (task.type === 'photo_update') {\n            keyboard.push([\n                Markup.button.callback('🖼 Получить фото мастера', `get_master_photo_${task.id}`)\n            ]);\n        }\n\n        keyboard.push([Markup.button.callback('👈 Назад к списку', 'back_to_tasks')]);\n        keyboard.push([Markup.button.callback('🏠 В главное меню', 'mainmenu')]);\n\n        await ctx.editMessageText(messageText, {\n            parse_mode: 'HTML',\n            ...Markup.inlineKeyboard(keyboard)\n        });\n\n    } catch (error) {\n        logger.error('Error in view_task handler:', error);\n        await ctx.answerCbQuery('❌ Произошла ошибка при загрузке задачи');\n    }\n});\n\n// Обработчики действий с задачами\ntasksScene.action(/^complete_task_(\\d+)$/, async (ctx) => {\n    try {\n        const taskId = parseInt(ctx.match[1], 10);\n        const result = await LaravelService.completeTask(taskId);\n\n        if (result?.success) {\n            await ctx.answerCbQuery('✅ Задача отмечена как выполненная');\n            await showTasks(ctx);\n        } else {\n            await ctx.answerCbQuery('❌ Не удалось обновить статус задачи');\n        }\n    } catch (error) {\n        logger.error('Error in complete_task handler:', error);\n        await ctx.answerCbQuery('❌ Произошла ошибка');\n    }\n});\n\ntasksScene.action(/^progress_task_(\\d+)$/, async (ctx) => {\n    try {\n        const taskId = parseInt(ctx.match[1], 10);\n        const result = await LaravelService.updateTaskStatus(taskId, 'in_progress');\n\n        if (result?.success) {\n            await ctx.answerCbQuery('✅ Задача взята в работу');\n            await showTasks(ctx);\n        } else {\n            await ctx.answerCbQuery('❌ Не удалось обновить статус задачи');\n        }\n    } catch (error) {\n        logger.error('Error in progress_task handler:', error);\n        await ctx.answerCbQuery('❌ Произошла ошибка');\n    }\n});\n\n// Навигация и фильтры\ntasksScene.action('prev_page', async (ctx) => {\n    if (ctx.scene.state.tasksState.page > 1) {\n        ctx.scene.state.tasksState.page--;\n    }\n    await ctx.answerCbQuery();\n    await showTasks(ctx);\n});\n\ntasksScene.action('next_page', async (ctx) => {\n    ctx.scene.state.tasksState.page++;\n    await ctx.answerCbQuery();\n    await showTasks(ctx);\n});\n\ntasksScene.action('filter_active', async (ctx) => {\n    ctx.scene.state.tasksState.filter = 'active';\n    ctx.scene.state.tasksState.page = 1;\n    await ctx.answerCbQuery('🔵 Показаны активные задачи');\n    await showTasks(ctx);\n});\n\ntasksScene.action('filter_completed', async (ctx) => {\n    ctx.scene.state.tasksState.filter = 'completed';\n    ctx.scene.state.tasksState.page = 1;\n    await ctx.answerCbQuery('🔵 Показаны выполненные задачи');\n    await showTasks(ctx);\n});\n\ntasksScene.action('back_to_tasks', async (ctx) => {\n    await ctx.answerCbQuery();\n    await showTasks(ctx);\n});\n\ntasksScene.action('mainmenu', async (ctx) => {\n    await ctx.answerCbQuery();\n    return ctx.scene.enter('admin_main');\n});\n\n// Вспомогательные функции\nfunction getStatusEmoji(status: string): string {\n    return {\n        'pending': '⏳',\n        'in_progress': '🔄',\n        'completed': '✅'\n    }[status] || '❓';\n}\n\nfunction getStatusText(status: string): string {\n    return {\n        'pending': 'Ожидает выполнения',\n        'in_progress': 'В процессе',\n        'completed': 'Выполнена'\n    }[status] || 'Неизвестно';\n}\n\nfunction formatDate(date: string): string {\n    return new Date(date).toLocaleString('ru-RU', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n    });\n}\n\nfunction buildMainMenuKeyboard() {\n    return Markup.inlineKeyboard([[\n        Markup.button.callback('👈 Вернуться в меню', 'mainmenu')\n    ]]);\n}\n\nexport default tasksScene;","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\nimport logger from '../../../../utils/logger/loggerTelegram';\nimport LaravelService from '../../../../services/laravelService';\n\nexport const warehouseNotificationsListScene = new Scenes.BaseScene<MyContext>('warehouse_notifications_list');\n\nwarehouseNotificationsListScene.enter(async (ctx) => {\n    try {\n\n        const branchId = parseInt(ctx.session.selectedBranchId, 10);\n        \n        // Добавляем логирование\n        logger.info('Fetching warehouse notifications:', {\n            telegramId: ctx.from.id,\n            branchId: branchId\n        });\n        // Получаем все активные уведомления\n        const response = await LaravelService.getWarehouseNotifications(\n            ctx.from.id,\n            branchId\n        );\n\n        // Добавляем проверку ответа\n        logger.info('Notifications response:', response);\n\n        if (!response?.success || !response?.data?.data?.length) {\n            await ctx.reply(\n                'Нет активных уведомлений об остатках',\n                Markup.inlineKeyboard([\n                    [Markup.button.callback('👈 Назад', 'back_to_warehouse')],\n                    [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n                ])\n            );\n            return;\n        }\n\n        const notifications = response.data.data;\n\n        const buttons = notifications.map(notification => [\n            Markup.button.callback(\n                `${notification.product.title} | ${notification.company?.title || 'Неизвестный филиал'} (мин: ${notification.min_amount})`,\n                `notification_${notification.id}`\n            )\n        ]);\n\n        buttons.push([\n            Markup.button.callback('👈 Назад', 'back_to_warehouse'),\n            Markup.button.callback('🏠 Главное меню', 'mainmenu')\n        ]);\n\n        const messageText = 'Выберите товар чтобы изменить или удалить отслеживание:';\n\n        if (ctx.callbackQuery?.message) {\n            await ctx.editMessageText(messageText, Markup.inlineKeyboard(buttons));\n        } else {\n            await ctx.reply(messageText, Markup.inlineKeyboard(buttons));\n        }\n    } catch (error) {\n        logger.error('Error in warehouseNotificationsListScene.enter:', error);\n        await ctx.reply('Произошла ошибка при загрузке уведомлений');\n    }\n});\n\nwarehouseNotificationsListScene.action(/^notification_(\\d+)$/, async (ctx) => {\n    try {\n        const notificationId = parseInt(ctx.match[1], 10);\n        \n        // Добавим логирование\n        logger.info('Fetching single notification:', { notificationId });\n        \n        // Вызываем специальный метод для получения одного уведомления\n        const response = await LaravelService.getWarehouseNotification(notificationId); // Изменим метод\n\n        if (!response?.success || !response?.data) {\n            throw new Error('Notification not found');\n        }\n\n        const notification = response.data;\n        ctx.session.selectedNotificationId = notificationId;\n\n        const keyboard = Markup.inlineKeyboard([\n            [Markup.button.callback('✏️ Изменить мин. кол-во', 'edit_amount')],\n            [Markup.button.callback('🗑 Удалить уведомление', 'delete_notification')],\n            [Markup.button.callback('👈 Назад', 'back_to_list')],\n            [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n        ]);\n\n        await ctx.editMessageText(\n            `[${notification.product.title}]\\n` +\n            `Фактическое кол-во на складе: ${notification.current_amount}\\n` +\n            `Мин. кол-во для уведомления: ${notification.min_amount}`,\n            keyboard\n        );\n    } catch (error) {\n        logger.error('Error displaying notification:', error);\n        await ctx.reply('Произошла ошибка при загрузке информации об уведомлении');\n    }\n});\n\n// Обработчики действий\nwarehouseNotificationsListScene.action('edit_amount', async (ctx) => {\n    await ctx.answerCbQuery();\n    await ctx.reply('Введите новое минимальное количество для уведомления:');\n    ctx.session.isEditing = true; // Устанавливаем флаг редактирования\n});\n\n// Добавляем обработчик текстовых сообщений\n// В обработчике текстовых сообщений\nwarehouseNotificationsListScene.on('text', async (ctx) => {\n    if (ctx.session.isEditing) {\n        try {\n            const newAmount = parseInt(ctx.message.text, 10);\n            \n            if (isNaN(newAmount) || newAmount < 0) {\n                await ctx.reply('Пожалуйста, введите корректное положительное число');\n                return;\n            }\n\n            const notificationId = ctx.session.selectedNotificationId;\n\n            // Добавим проверку наличия ID уведомления\n            if (!notificationId) {\n                throw new Error('ID уведомления не найден');\n            }\n            \n            // Добавим логирование\n            logger.info('Updating notification:', {\n                notificationId,\n                newAmount\n            });\n\n            // Обновляем уведомление\n            const response = await LaravelService.updateWarehouseNotification(\n                notificationId,\n                { min_amount: newAmount }\n            );\n\n            logger.info('Update response:', response);\n\n            if (!response?.success) {\n                throw new Error(response?.message || 'Не удалось обновить уведомление');\n            }\n\n            // Получаем обновлённое уведомление\n            const updatedNotification = await LaravelService.getWarehouseNotification(notificationId);\n\n            if (!updatedNotification?.success) {\n                throw new Error('Не удалось получить обновленное уведомление');\n            }\n\n            // Возвращаем к просмотру уведомления\n            const keyboard = Markup.inlineKeyboard([\n                [Markup.button.callback('✏️ Изменить мин. кол-во', 'edit_amount')],\n                [Markup.button.callback('🗑 Удалить уведомление', 'delete_notification')],\n                [Markup.button.callback('👈 Назад', 'back_to_list')],\n                [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n            ]);\n\n            await ctx.reply(\n                `✅ Минимальное количество обновлено!\\n\\n` +\n                `[${updatedNotification.data.product.title}]\\n` +\n                `Фактическое кол-во на складе: ${updatedNotification.data.current_amount}\\n` +\n                `Мин. кол-во для уведомления: ${newAmount}`,\n                keyboard\n            );\n\n            // Сбрасываем флаг редактирования\n            ctx.session.isEditing = false;\n\n        } catch (error) {\n            logger.error('Error updating notification amount:', error);\n            await ctx.reply('Произошла ошибка при обновлении минимального количества: ' + error.message);\n            ctx.session.isEditing = false;\n        }\n    }\n});\n\nwarehouseNotificationsListScene.action('delete_notification', async (ctx) => {\n    await ctx.answerCbQuery();\n    // Показываем подтверждение удаления\n    const keyboard = Markup.inlineKeyboard([\n        [\n            Markup.button.callback('✅ Да, удалить', 'confirm_delete'),\n            Markup.button.callback('❌ Отмена', 'cancel_delete')\n        ]\n    ]);\n\n    await ctx.editMessageText(\n        'Вы уверены, что хотите удалить это уведомление?',\n        keyboard\n    );\n});\n\nwarehouseNotificationsListScene.action('confirm_delete', async (ctx) => {\n    try {\n        const notificationId = ctx.session.selectedNotificationId;\n        await LaravelService.deleteWarehouseNotification(notificationId);\n\n        await ctx.editMessageText(\n            'Товар удален из отслеживания.',\n            Markup.inlineKeyboard([\n                [Markup.button.callback('📋 Все уведомления', 'back_to_list')],\n                [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n            ])\n        );\n    } catch (error) {\n        logger.error('Error deleting notification:', error);\n        await ctx.reply('Произошла ошибка при удалении уведомления');\n    }\n});\n\nwarehouseNotificationsListScene.action('cancel_delete', async (ctx) => {\n    await ctx.answerCbQuery('Отменено');\n    return ctx.scene.reenter();\n});\n\nwarehouseNotificationsListScene.action('back_to_warehouse', async (ctx) => {\n    await ctx.answerCbQuery();\n    return ctx.scene.enter('warehouse');\n});\n\nwarehouseNotificationsListScene.action('back_to_list', async (ctx) => {\n    await ctx.answerCbQuery();\n    return ctx.scene.reenter();\n});\n\nwarehouseNotificationsListScene.action('mainmenu', async (ctx) => {\n    await ctx.answerCbQuery();\n    return ctx.scene.enter('admin_main');\n});\n\nexport default warehouseNotificationsListScene;","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\nimport logger from '../../../../utils/logger/loggerTelegram';\n\nexport const warehouseScene = new Scenes.BaseScene<MyContext>('warehouse');\n\nwarehouseScene.enter(async (ctx) => {\n    try {\n        const keyboard = Markup.inlineKeyboard([\n            [Markup.button.callback('📝 Уведомление на остаток', 'create_notification')],\n            [Markup.button.callback('📋 Работа с остатком', 'manage_notifications')],\n            [Markup.button.callback('🏠 Главное меню', 'mainmenu')]\n        ]);\n\n        const messageText = 'Выберите действие:';\n        \n        if (ctx.callbackQuery?.message) {\n            await ctx.editMessageText(messageText, keyboard);\n        } else {\n            await ctx.reply(messageText, keyboard);\n        }\n    } catch (error) {\n        logger.error('Error in warehouseScene.enter:', error);\n        await ctx.reply('Произошла ошибка при загрузке меню');\n    }\n});\n\n// Перенаправление на создание уведомления\nwarehouseScene.action('create_notification', async (ctx) => {\n    await ctx.answerCbQuery();\n    return ctx.scene.enter('select_branch_scene');\n});\n\n// Перенаправление на управление существующими уведомлениями\nwarehouseScene.action('manage_notifications', async (ctx) => {\n    await ctx.answerCbQuery();\n    return ctx.scene.enter('warehouse_notifications_list');\n});\n\nwarehouseScene.action('mainmenu', async (ctx) => {\n    await ctx.answerCbQuery();\n    return ctx.scene.enter('admin_main');\n});\n\nexport default warehouseScene;","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\nimport laravelService from '../../../../services/laravelService';\n\nexport interface AddServiceState {\n    recordId: string;\n    phone?: string;\n    password?: string;\n}\n\nexport const addServiceScene = new Scenes.BaseScene<MyContext>('add_service_scene');\n\n// Вход в сцену\naddServiceScene.enter(async (ctx: MyContext) => {\n    const state = ctx.scene.state as AddServiceState;\n\n    try {\n        if (!state?.recordId) {\n            return ctx.reply(\n                '❌ Ошибка: не выбрана запись',\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('« Назад к записям', 'back_to_records')\n                ]])\n            );\n        }\n\n        // Сохраняем состояние\n        ctx.session.addServiceState = {\n            recordId: state.recordId,\n            phone: state.phone || ctx.session.phone,\n            password: state.password || ctx.session.password\n        };\n\n        // Получаем список доступных услуг\n        const services = await laravelService.getMasterServices({\n            phone: ctx.session.addServiceState.phone!,\n            password: ctx.session.addServiceState.password!\n        });\n\n        if (!services?.success || !services.data?.length) {\n            return ctx.reply(\n                '❌ Нет доступных услуг для добавления',\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('« Назад к записи', 'back_to_record')\n                ]])\n            );\n        }\n\n        \n        // Создаем кнопки только с названиями услуг\nconst buttons = services.data.map(service => ([\n    Markup.button.callback(\n        service.title,\n        `add_service_${service.id}`\n    )\n]));\n\n        // Добавляем кнопку отмены\n        buttons.push([\n            Markup.button.callback('« Отмена', 'cancel_service_add')\n        ]);\n\n        await ctx.reply(\n            'Выберите услугу для добавления:',\n            Markup.inlineKeyboard(buttons)\n        );\n\n    } catch (error) {\n        console.error('Error in addServiceScene enter:', error);\n        await ctx.reply(\n            '❌ Произошла ошибка. Попробуйте позже.',\n            Markup.inlineKeyboard([[\n                Markup.button.callback('« Назад к записи', 'back_to_record')\n            ]])\n        );\n    }\n});\n\n// Обработка выбора услуги\naddServiceScene.action(/^add_service_(\\d+)$/, async (ctx) => {\n    const state = ctx.session.addServiceState;\n    const serviceId = parseInt(ctx.match[1]);\n\n    try {\n        if (!state?.recordId || !state.phone || !state.password) {\n            throw new Error('Отсутствуют необходимые данные');\n        }\n\n        await ctx.answerCbQuery();\n        const loadingMsg = await ctx.reply('🔄 Добавляем услугу...');\n\n        try {\n            // Получаем информацию об услуге\n            const services = await laravelService.getMasterServices({\n                phone: state.phone,\n                password: state.password\n            });\n\n            const selectedService = services.data.find(s => s.id === serviceId);\n            if (!selectedService) {\n                throw new Error('Услуга не найдена');\n            }\n\n            const result = await laravelService.updateMasterRecord({\n                phone: state.phone,\n                password: state.password,\n                recordId: state.recordId,\n                updateData: {\n                    services: {\n                        add: [{\n                            id: selectedService.id,\n                            cost: parseFloat(selectedService.price_min), // Добавляем цену\n                            first_cost: parseFloat(selectedService.price_min), // Добавляем начальную цену\n                            discount: 0\n                        }]\n                    }\n                }\n            });\n\n            await ctx.telegram.deleteMessage(ctx.chat!.id, loadingMsg.message_id).catch(() => {});\n\n            await ctx.reply(\n                '✅ Услуга успешно добавлена',\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('« К записи', 'back_to_record')\n                ]])\n            );\n\n        } catch (error: any) {\n            await ctx.telegram.deleteMessage(ctx.chat!.id, loadingMsg.message_id).catch(() => {});\n\n            await ctx.reply(\n                '❌ ' + (error.message || 'Не удалось добавить услугу'),\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('« Назад', 'cancel_service_add')\n                ]])\n            );\n        }\n\n    } catch (error) {\n        console.error('Error in service addition:', error);\n        await ctx.reply('❌ Произошла ошибка. Попробуйте позже.');\n    }\n});\n\n// Обработка отмены\naddServiceScene.action('cancel_service_add', async (ctx) => {\n    try {\n        await ctx.answerCbQuery();\n        const recordId = ctx.session.addServiceState?.recordId;\n        \n        delete ctx.session.addServiceState;\n        \n        return ctx.scene.enter('clients_management_scene', {\n            action: 'show_record',\n            recordId\n        });\n    } catch (error) {\n        console.error('Error in cancel_service_add:', error);\n        await ctx.reply('❌ Произошла ошибка. Попробуйте позже.');\n    }\n});\n\n// Возврат к записи\naddServiceScene.action('back_to_record', async (ctx) => {\n    try {\n        await ctx.answerCbQuery();\n        const recordId = ctx.session.addServiceState?.recordId;\n        \n        delete ctx.session.addServiceState;\n        \n        return ctx.scene.enter('clients_management_scene', {\n            action: 'show_record',\n            recordId\n        });\n    } catch (error) {\n        console.error('Error in back_to_record:', error);\n        await ctx.reply('❌ Произошла ошибка. Попробуйте позже.');\n    }\n});\n\nexport default addServiceScene;","import { Scenes, Markup } from 'telegraf';\nimport { MyContext, CancelBookingState } from '../../../types/MyContext';\nimport laravelService from '../../../../services/laravelService';\n\nexport const cancelBookingScene = new Scenes.BaseScene<MyContext>('cancel_booking_scene');\n\ncancelBookingScene.enter(async (ctx: MyContext) => {\n    const state = ctx.scene.state as CancelBookingState;\n\n    try {\n        if (!state?.recordId) {\n            return ctx.reply(\n                '❌ Ошибка: не выбрана запись для отмены',\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('« Назад к записям', 'back_to_records')\n                ]])\n            );\n        }\n\n        // Сохраняем состояние в сессии для использования в других обработчиках\n        ctx.session.cancelBookingState = {\n            recordId: state.recordId,\n            phone: state.phone || ctx.session.phone,\n            password: state.password || ctx.session.password\n        };\n\n        await ctx.reply(\n            'Вы уверены, что хотите отменить эту запись?\\n\\n' +\n            '⚠️ Это действие нельзя отменить!',\n            Markup.inlineKeyboard([\n                [\n                    Markup.button.callback('Да, отменить', 'confirm_cancel'),\n                    Markup.button.callback('Нет, вернуться', 'back_to_record')\n                ]\n            ])\n        );\n\n    } catch (error) {\n        console.error('Error in cancelBookingScene enter:', error);\n        await ctx.reply(\n            '❌ Произошла ошибка. Попробуйте позже.',\n            Markup.inlineKeyboard([[\n                Markup.button.callback('« Назад', 'back_to_records')\n            ]])\n        );\n    }\n});\n\n// Обработка подтверждения отмены\ncancelBookingScene.action('confirm_cancel', async (ctx) => {\n    const state = ctx.session.cancelBookingState;\n    \n    try {\n        if (!state?.recordId || !state.phone || !state.password) {\n            throw new Error('Отсутствуют необходимые данные для отмены записи');\n        }\n\n        await ctx.answerCbQuery();\n        const loadingMsg = await ctx.reply('🔄 Отменяем запись...');\n\n        try {\n            const result = await laravelService.cancelMasterRecord({\n                phone: state.phone,\n                password: state.password,\n                recordId: state.recordId\n            });\n\n            await ctx.telegram.deleteMessage(ctx.chat!.id, loadingMsg.message_id).catch(() => {});\n\n            await ctx.reply(\n                '✅ Запись успешно отменена',\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('« К списку записей', 'back_to_records')\n                ]])\n            );\n\n        } catch (error: any) {\n            await ctx.telegram.deleteMessage(ctx.chat!.id, loadingMsg.message_id).catch(() => {});\n\n            await ctx.reply(\n                '❌ ' + (error.message || 'Не удалось отменить запись'),\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('« Назад', 'back_to_record')\n                ]])\n            );\n        }\n\n    } catch (error) {\n        console.error('Error in confirm_cancel handler:', error);\n        await ctx.reply('❌ Произошла ошибка. Попробуйте позже.');\n    }\n});\n\n// Возврат к деталям записи\ncancelBookingScene.action('back_to_record', async (ctx) => {\n    await ctx.answerCbQuery();\n    return ctx.scene.enter('clients_management_scene', {\n        action: 'show_record',\n        recordId: ctx.session.cancelBookingState?.recordId\n    });\n});\n\n// Возврат к списку записей\ncancelBookingScene.action('back_to_records', async (ctx) => {\n    await ctx.answerCbQuery();\n    // Очищаем состояние\n    delete ctx.session.cancelBookingState;\n    return ctx.scene.enter('clients_management_scene');\n});\n\nexport default cancelBookingScene;","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\nimport laravelService from '../../../../services/laravelService';\nimport { openAIService } from '../../../../services/openaiService';\n\n\nexport const changeDescriptionScene = new Scenes.WizardScene<MyContext>(\n    'change_description_scene',\n    // Шаг 1: Запрос описания\n    async (ctx) => {\n        ctx.session.descriptionForm = {};\n        ctx.session.isEditing = false;\n\n        console.log('Session state at description start:', {\n            sessionPhone: ctx.session?.phone,\n            sessionPassword: ctx.session?.password ? '[PRESENT]' : '[MISSING]',\n            sessionUser: ctx.session?.user ? '[PRESENT]' : '[MISSING]'\n        });\n        \n        await ctx.reply(\n            'Давайте подготовим ваше описание! Напишите пожалуйста своё имя и пару слов про себя, а искусственный интеллект сделает магию!',\n            Markup.inlineKeyboard([[Markup.button.callback('❌ Отменить', 'cancel')]])\n        );\n        \n        return ctx.wizard.next();\n    },\n\n    // Шаг 2: Генерация и предварительный просмотр\n    async (ctx) => {\n        if (!ctx.message || !('text' in ctx.message)) {\n            await ctx.reply('Пожалуйста, отправьте текстовое сообщение.');\n            return;\n        }\n\n        try {\n            const userInput = ctx.message.text;\n            const processingMessage = await ctx.reply('⏳ Генерируем описание...');\n\n            if (!ctx.session.descriptionForm) {\n                ctx.session.descriptionForm = {};\n            }\n            ctx.session.descriptionForm.tempDescription = userInput;\n\n            const newDescription = await openAIService.generateDescription(\n                \n                userInput\n            );\n\n            ctx.session.descriptionForm.generatedDescription = newDescription;\n            await ctx.telegram.deleteMessage(ctx.chat!.id, processingMessage.message_id).catch(() => {});\n\n            await ctx.reply(\n                '✨ Вот ваше новое описание:\\n\\n' + \n                newDescription + '\\n\\n' +\n                'Что бы вы хотели сделать с этим описанием?',\n                Markup.inlineKeyboard([\n                    [Markup.button.callback('✅ Подтвердить и опубликовать', 'confirm_description')],\n                    [Markup.button.callback('✏️ Отредактировать', 'edit_description')],\n                    [Markup.button.callback('🔄 Сгенерировать заново', 'regenerate')],\n                    [Markup.button.callback('❌ Отменить', 'cancel')]\n                ])\n            );\n            \n            return ctx.wizard.next();\n        } catch (error: any) {\n            console.error('Error in description generation:', {\n                error: error.message,\n                sessionState: {\n                    phone: ctx.session?.phone,\n                    hasPassword: !!ctx.session?.password\n                }\n            });\n\n            await ctx.reply(\n                'Произошла ошибка при генерации описания. Пожалуйста, попробуйте позже.',\n                Markup.inlineKeyboard([\n                    [Markup.button.callback('🔄 Попробовать снова', 'retry_description')],\n                    [Markup.button.callback('👈 Вернуться в меню', 'back_to_menu')]\n                ])\n            );\n        }\n    },\n\n    // Шаг 3: Обработка редактирования\n    async (ctx) => {\n        console.log('Step 3: Processing message, isEditing:', ctx.session.isEditing);\n        \n        // Если это не режим редактирования, игнорируем сообщение\n        if (!ctx.session.isEditing) {\n            console.log('Step 3: Not in editing mode, skipping');\n            return;\n        }\n\n        if (!ctx.message || !('text' in ctx.message)) {\n            console.log('Step 3: No text in message');\n            await ctx.reply('Пожалуйста, отправьте текстовое сообщение.');\n            return;\n        }\n\n        try {\n            console.log('Step 3: Processing edited description');\n            const editedDescription = ctx.message.text;\n            \n            if (editedDescription.length > 300) {\n                console.log('Step 3: Description too long');\n                await ctx.reply(\n                    '❌ Описание не должно превышать 300 символов. Сейчас длина: ' + editedDescription.length + ' символов.\\n' +\n                    'Пожалуйста, сократите текст и отправьте снова.',\n                    Markup.inlineKeyboard([[Markup.button.callback('❌ Отменить', 'cancel')]])\n                );\n                return;\n            }\n            \n            if (!ctx.session.descriptionForm) {\n                ctx.session.descriptionForm = {};\n            }\n            ctx.session.descriptionForm.generatedDescription = editedDescription;\n            ctx.session.isEditing = false;\n            await ctx.reply(\n                '📝 Проверьте отредактированное описание:\\n\\n' +\n                editedDescription + '\\n\\n' +\n                'Что бы вы хотели сделать с этим описанием?',\n                Markup.inlineKeyboard([\n                    [Markup.button.callback('✅ Подтвердить и опубликовать', 'confirm_description')],\n                    [Markup.button.callback('✏️ Отредактировать ещё раз', 'edit_description')],\n                    [Markup.button.callback('🔄 Сгенерировать заново', 'regenerate')],\n                    [Markup.button.callback('❌ Отменить', 'cancel')]\n                ])\n            );\n\n            \n            console.log('Step 3: Description updated successfully');\n        } catch (error) {\n            console.error('Step 3: Error processing description:', error);\n            await ctx.reply(\n                '❌ Произошла ошибка при обработке описания.',\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('🔄 Попробовать снова', 'edit_description')\n                ]])\n            );\n        }\n    }\n);\n\n// Обработчики действий\nchangeDescriptionScene.action('confirm_description', async (ctx) => {\n    await ctx.answerCbQuery();\n    const description = ctx.session.descriptionForm?.generatedDescription;\n\n    if (!description) {\n        await ctx.reply('Ошибка: описание не найдено. Попробуйте начать заново.');\n        return ctx.scene.reenter();\n    }\n\n    const processingMessage = await ctx.reply('⏳ Обновляем ваш профиль...');\n\n    try {\n        const updated = await laravelService.updateMasterDescription(\n            ctx.session.phone!,\n            ctx.session.password!,\n            description\n        );\n\n        if (!updated) {\n            throw new Error('Не удалось обновить описание');\n        }\n        \n        try {\n            const masterInfo = await laravelService.getMasterByPhone(ctx.session.phone!);\n            \n            await laravelService.createTaskForMaster({\n                type: 'description_update',\n                masterPhone: ctx.session.phone!,\n                masterName: masterInfo?.name || ctx.session.phone!,\n                description: `Обновить описание мастера на сайте\\n\\nНовое описание:\\n\\n${description}`\n            });\n\n            \n        } catch (error) {\n            console.error('Error creating task:', error);\n        }\n        await ctx.reply(\n            '✅ Описание успешно обновлено!\\n\\n' +\n            '💫 Новое описание уже доступно в вашем профиле.',\n            Markup.inlineKeyboard([[Markup.button.callback('🏠 В главное меню', 'back_to_menu')]])\n        );\n    } catch (error) {\n        await ctx.telegram.deleteMessage(ctx.chat!.id, processingMessage.message_id).catch(() => {});\n        await ctx.reply(\n            '❌ Произошла ошибка при обновлении профиля.',\n            Markup.inlineKeyboard([\n                [Markup.button.callback('🔄 Попробовать снова', 'retry_description')],\n                [Markup.button.callback('👈 В меню', 'back_to_menu')]\n            ])\n        );\n    }\n});\n\nchangeDescriptionScene.action('edit_description', async (ctx) => {\n    console.log('Edit action triggered');\n    await ctx.answerCbQuery();\n    \n    // Устанавливаем флаг редактирования\n    ctx.session.isEditing = true;\n    console.log('Set editing mode, isEditing:', ctx.session.isEditing);\n    \n    await ctx.reply(\n        '✏️ Отправьте отредактированный вариант описания:\\n\\n' +\n        ctx.session.descriptionForm?.generatedDescription,\n        Markup.inlineKeyboard([[Markup.button.callback('❌ Отменить', 'cancel')]])\n    );\n});\n\n// Обработчик для \"Сгенерировать заново\"\nchangeDescriptionScene.action('regenerate', async (ctx) => {\n    await ctx.answerCbQuery();\n    \n    if (!ctx.session.descriptionForm?.tempDescription) {\n        await ctx.reply(\n            '❌ Не удалось найти исходный текст. Начнем заново.',\n            Markup.inlineKeyboard([[\n                Markup.button.callback('🔄 Начать заново', 'retry_description')\n            ]])\n        );\n        return;\n    }\n\n    try {\n        const processingMessage = await ctx.reply('🤖 Генерируем новое описание...');\n        \n        const newDescription = await openAIService.generateDescription(\n            ctx.session.descriptionForm.tempDescription\n        );\n\n        ctx.session.descriptionForm.generatedDescription = newDescription;\n        await ctx.telegram.deleteMessage(ctx.chat!.id, processingMessage.message_id).catch(() => {});\n\n        await ctx.reply(\n            '✨ Вот новый вариант описания:\\n\\n' + \n            newDescription + '\\n\\n' +\n            'Что бы вы хотели сделать с этим описанием?',\n            Markup.inlineKeyboard([\n                [Markup.button.callback('✅ Подтвердить и опубликовать', 'confirm_description')],\n                [Markup.button.callback('✏️ Отредактировать', 'edit_description')],\n                [Markup.button.callback('🔄 Сгенерировать заново', 'regenerate')],\n                [Markup.button.callback('❌ Отменить', 'cancel')]\n            ])\n        );\n    } catch (error) {\n        console.error('Error regenerating description:', error);\n        await ctx.reply(\n            '❌ Произошла ошибка при генерации нового описания.',\n            Markup.inlineKeyboard([\n                [Markup.button.callback('🔄 Попробовать снова', 'regenerate')],\n                [Markup.button.callback('👈 Вернуться в меню', 'back_to_menu')]\n            ])\n        );\n    }\n});\n\nchangeDescriptionScene.action('retry_description', async (ctx) => {\n    await ctx.answerCbQuery();\n    return ctx.scene.reenter();\n});\n\nchangeDescriptionScene.action('cancel', async (ctx) => {\n    await ctx.answerCbQuery();\n    await ctx.reply('Операция отменена');\n    return ctx.scene.enter('main');\n});\n\nchangeDescriptionScene.action('back_to_menu', async (ctx) => {\n    await ctx.answerCbQuery();\n    return ctx.scene.enter('main');\n});","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\nimport laravelService from '../../../../services/laravelService';\nimport * as fs from 'node:fs';\nimport * as path from 'path';\nimport axios from 'axios';\nimport logger from '../../../../utils/logger/loggerTelegram';\n\nexport const changePhotoScene = new Scenes.BaseScene<MyContext>('change_photo_scene');\n\nconst MIN_SIZE = 800; // Минимальный размер для ширины и высоты\nconst MAX_SIZE = 2000; // Максимальный размер для ширины и высоты\nconst MAX_FILE_SIZE = 5 * 1024 * 1024; // 5 МБ в байтах\n\n// Вход в сцену\nchangePhotoScene.enter(async (ctx: MyContext) => {\n    const message = `\n📸 *Загрузка новой фотографии профиля*\n\n⚠️ *Требования к фото:*\n• Квадратный формат (1:1)\n• Размер от ${MIN_SIZE}x${MIN_SIZE} до ${MAX_SIZE}x${MAX_SIZE} пикселей\n• Формат JPG/JPEG\n• Размер файла до 5 МБ\n• Чёткое изображение на светлом фоне\n• Без посторонних предметов и людей\n• В деловом стиле\n\n✨ *Рекомендации:*\n• Хорошее освещение\n• Нейтральное выражение лица\n• Профессиональный внешний вид\n• Четкий фокус на лице\n\n🔄 Отправьте фото прямо сейчас или выберите действие:`;\n\n    await ctx.replyWithMarkdown(message, \n        Markup.inlineKeyboard([\n            [Markup.button.callback('📱 Посмотреть пример фото', 'show_photo_example')],\n            [Markup.button.callback('❌ Отменить изменение фото', 'cancel_photo')],\n            [Markup.button.callback('ℹ️ Помощь по загрузке', 'photo_help')],\n            [Markup.button.callback('👈 Вернуться в главное меню', 'mainmenu')]\n        ])\n    );\n});\n\n// Обработка полученных фотографий\nchangePhotoScene.on('photo', async (ctx) => {\n    try {\n        if (!ctx.session?.phone) {\n            throw new Error('Не найден номер телефона в сессии');\n        }\n\n        const photo = ctx.message.photo[ctx.message.photo.length - 1];\n        const file = await ctx.telegram.getFile(photo.file_id);\n        \n        if (!file.file_path) {\n            throw new Error('Не удалось получить файл фотографии');\n        }\n\n        logger.info('Processing photo:', {\n            width: photo.width,\n            height: photo.height,\n            file_id: photo.file_id\n        });\n\n        // Проверка размеров фото\n        if (photo.width < MIN_SIZE || photo.height < MIN_SIZE) {\n            await ctx.reply(\n                `⚠️ Фото слишком маленькое. Минимальный размер ${MIN_SIZE}x${MIN_SIZE} пикселей.`,\n                Markup.inlineKeyboard([\n                    [Markup.button.callback('🔄 Загрузить другое фото', 'retry_photo')],\n                    [Markup.button.callback('❓ Помощь с размером', 'size_help')]\n                ])\n            );\n            return;\n        }\n\n        // Проверка квадратного формата\n        if (Math.abs(photo.width - photo.height) > 10) {\n            await ctx.reply(\n                '⚠️ Фото должно быть квадратным (соотношение сторон 1:1).',\n                Markup.inlineKeyboard([\n                    [Markup.button.callback('🔄 Загрузить другое фото', 'retry_photo')],\n                    [Markup.button.callback('✂️ Как обрезать фото?', 'crop_help')]\n                ])\n            );\n            return;\n        }\n\n        const processingMessage = await ctx.reply('⌛ Обрабатываем фотографию...');\n\n        // Получаем файл\n        const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN_MASTER}/${file.file_path}`;\n        \n        const response = await axios({\n            url: fileUrl,\n            method: 'GET',\n            responseType: 'arraybuffer'\n        });\n\n        // Проверка размера файла\n        if (response.data.length > MAX_FILE_SIZE) {\n            await ctx.telegram.deleteMessage(ctx.chat!.id, processingMessage.message_id).catch(() => {});\n            await ctx.reply(\n                '⚠️ Размер файла превышает 5 МБ. Пожалуйста, сожмите фото и попробуйте снова.',\n                Markup.inlineKeyboard([\n                    [Markup.button.callback('🔄 Загрузить другое фото', 'retry_photo')],\n                    [Markup.button.callback('📝 Как уменьшить размер?', 'size_reduce_help')]\n                ])\n            );\n            return;\n        }\n\n        // Создаем временную директорию\n        const tempDir = path.join(__dirname, '../../../../../temp');\n        if (!fs.existsSync(tempDir)) {\n            fs.mkdirSync(tempDir, { recursive: true });\n        }\n\n        // Сохраняем файл временно\n        const tempFilePath = path.join(tempDir, `${ctx.from.id}_${Date.now()}.jpg`);\n        fs.writeFileSync(tempFilePath, response.data);\n\n        logger.info('Temporary file saved:', { path: tempFilePath });\n\n        try {\n            const updateResult = await laravelService.updateMasterPhoto(\n                ctx.session.phone,\n                tempFilePath\n            );\n        \n            await ctx.telegram.deleteMessage(ctx.chat!.id, processingMessage.message_id).catch(() => {});\n        \n            // Проверяем именно поле success в ответе\n            if (updateResult && updateResult.success === true) {\n                try {\n                    const masterInfo = await laravelService.getMasterByPhone(ctx.session.phone!);\n                    \n                    await laravelService.createTaskForMaster({\n                        type: 'photo_update',\n                        masterPhone: ctx.session.phone!,\n                        masterName: masterInfo?.name || ctx.session.phone!,\n                        description: 'Обновить фото мастера на сайте - запросите у мастера новую фотографию, которую он поставил себе в профиль Yclients'\n                    });\n                } catch (error) {\n                    console.error('Error creating task:', error);\n                }\n            \n                \n            \n                await ctx.reply(\n                    '✅ Фотография успешно обновлена!\\n\\nВаш профиль теперь выглядит более профессионально.',\n                    Markup.inlineKeyboard([\n                        [Markup.button.callback('👈 Вернуться в главное меню', 'mainmenu')]\n                    ])\n                );\n            }  else {\n                logger.error('Update result unsuccessful:', updateResult);\n                throw new Error(updateResult?.message || 'Не удалось обновить фотографию');\n            }\n        } catch (error: any) {\n            logger.error('Error in photo update:', {\n                error: error.message,\n                phone: ctx.session.phone,\n                response: error.response?.data,\n                updateResult: error.updateResult // добавляем для отладки\n            });\n            \n            await ctx.reply(\n                '❌ Произошла ошибка при обновлении фотографии.\\n\\nПожалуйста, попробуйте позже или обратитесь в поддержку.',\n                Markup.inlineKeyboard([\n                    [Markup.button.callback('🔄 Попробовать снова', 'retry_photo')],\n                    [Markup.button.callback('👈 Вернуться в главное меню', 'mainmenu')]\n                ])\n            );\n        } finally {\n            // Удаляем временный файл\n            if (fs.existsSync(tempFilePath)) {\n                fs.unlinkSync(tempFilePath);\n                logger.info('Temporary file deleted:', { path: tempFilePath });\n            }\n        }\n\n    } catch (error: any) {\n        logger.error('Error processing photo:', {\n            error: error.message,\n            telegramId: ctx.from?.id,\n            sessionData: ctx.session\n        });\n        \n        await ctx.reply(\n            '❌ Произошла ошибка при обработке фотографии.\\n\\nПожалуйста, убедитесь, что фото соответствует требованиям и попробуйте снова.',\n            Markup.inlineKeyboard([\n                [Markup.button.callback('🔄 Попробовать снова', 'retry_photo')],\n                [Markup.button.callback('👈 Вернуться в главное меню', 'mainmenu')]\n            ])\n        );\n    }\n});\n\n// Обработчики действий\nchangePhotoScene.action('retry_photo', async (ctx) => {\n    await ctx.answerCbQuery('🔄 Загрузите новое фото');\n    return ctx.scene.reenter();\n});\n\nchangePhotoScene.action('cancel_photo', async (ctx) => {\n    await ctx.answerCbQuery('❌ Изменение фото отменено');\n    return ctx.scene.enter('main');\n});\n\nchangePhotoScene.action('photo_help', async (ctx) => {\n    await ctx.answerCbQuery();\n    await ctx.reply(\n        `📸 *Как сделать хорошее фото для профиля:*\n\n1. Используйте нейтральный светлый фон\n2. Обеспечьте хорошее освещение (желательно естественное)\n3. Расположитесь на расстоянии 1-1.5 метра от камеры\n4. Держите камеру на уровне глаз\n5. Используйте таймер для стабильного снимка\n6. Убедитесь, что фото четкое и не размытое\n7. Проверьте, что лицо занимает около 60% кадра\n\n*Как обрезать фото:*\n• На iPhone: используйте встроенный редактор\n• На Android: используйте Google Фото\n• Онлайн: squoosh.app или photopea.com`,\n        {\n            parse_mode: 'Markdown',\n            ...Markup.inlineKeyboard([\n                [Markup.button.callback('🔄 Загрузить фото', 'retry_photo')],\n                [Markup.button.callback('👈 Назад', 'back_to_main')]\n            ])\n        }\n    );\n});\n\nchangePhotoScene.action('size_help', async (ctx) => {\n    await ctx.answerCbQuery();\n    await ctx.reply(\n        `📏 *Как проверить размер фото:*\n\n1. На телефоне:\n• Откройте фото\n• В свойствах или информации найдите размеры\n• Убедитесь, что размер не менее ${MIN_SIZE}x${MIN_SIZE}\n\n2. Как увеличить размер:\n• Сделайте новое фото в высоком качестве\n• Используйте основную камеру, не фронтальную\n• Отключите компрессию в настройках камеры`,\n        {\n            parse_mode: 'Markdown',\n            ...Markup.inlineKeyboard([\n                [Markup.button.callback('🔄 Загрузить фото', 'retry_photo')],\n                [Markup.button.callback('👈 Назад', 'back_to_main')]\n            ])\n        }\n    );\n});\n\n// Добавляем обработчик для кнопки примера\nchangePhotoScene.action('show_photo_example', async (ctx) => {\n    await ctx.answerCbQuery();\n    \n    // Сначала отправляем фото\n    // Используем абсолютный путь\n    const photoPath = '/usr/src/app/dist/telegraf/services/bot-master/scenes/photoexample.jpg';\n\n    console.log('Current __dirname:', __dirname);\n        console.log('Trying to access photo at:', photoPath);\n        console.log('File exists:', require('fs').existsSync(photoPath));\n        \n        // Проверим содержимое директории\n        const dir = '/usr/src/app/dist/telegraf/services/bot-master/scenes/';\n        console.log('Directory contents:', require('fs').readdirSync(dir));\n        \n        await ctx.replyWithPhoto(\n            { source: photoPath },\n            {\n                caption: `📸 *Пример правильного фото для профиля*\n\n✅ *Что сделано верно:*\n- Квадратный формат\n- Четкое изображение лица\n- Нейтральный светлый фон\n- Профессиональное освещение\n- Деловой внешний вид\n- Легкая улыбка\n- Прямой взгляд в камеру\n\nВаше фото должно быть похожим по формату и стилю.`,\n            parse_mode: 'Markdown'\n        }\n    );\n    \n    // Затем отправляем кнопку для возврата\n    await ctx.reply(\n        'Отправьте ваше фото или выберите действие:',\n        Markup.inlineKeyboard([\n            [Markup.button.callback('🔄 Загрузить фото', 'retry_photo')],\n            [Markup.button.callback('❓ Помощь по загрузке', 'photo_help')],\n            [Markup.button.callback('👈 Вернуться в главное меню', 'mainmenu')]\n        ])\n    );\n});\n\nchangePhotoScene.action('crop_help', async (ctx) => {\n    await ctx.answerCbQuery();\n    await ctx.reply(\n        `✂️ *Как сделать фото квадратным:*\n\n1. На iPhone:\n• Откройте фото в приложении Фото\n• Нажмите Изменить\n• Выберите инструмент обрезки\n• Выберите квадратный формат\n\n2. На Android:\n• Откройте фото в Google Фото\n• Нажмите кнопку изменения\n• Выберите Обрезать\n• Выберите формат 1:1\n\n3. Онлайн-сервисы:\n• squoosh.app\n• photopea.com\n• canva.com`,\n        {\n            parse_mode: 'Markdown',\n            ...Markup.inlineKeyboard([\n                [Markup.button.callback('🔄 Загрузить фото', 'retry_photo')],\n                [Markup.button.callback('👈 Назад', 'back_to_main')]\n            ])\n        }\n    );\n});\n\nchangePhotoScene.action('size_reduce_help', async (ctx) => {\n    await ctx.answerCbQuery();\n    await ctx.reply(\n        `📉 *Как уменьшить размер фото:*\n\n1. На телефоне:\n• Используйте встроенный редактор\n• Выберите опцию \"Изменить размер\" или \"Сжать\"\n• Сохраните в среднем качестве\n\n2. Онлайн-сервисы:\n• squoosh.app (рекомендуется)\n• tinypng.com\n• compressjpeg.com\n\n3. Советы:\n• Уменьшите разрешение до 1500x1500\n• Используйте JPEG формат\n• Выберите качество 80-90%`,\n        {\n            parse_mode: 'Markdown',\n            ...Markup.inlineKeyboard([\n                [Markup.button.callback('🔄 Загрузить фото', 'retry_photo')],\n                [Markup.button.callback('👈 Назад', 'back_to_main')]\n            ])\n        }\n    );\n});\n\nchangePhotoScene.action('back_to_main', async (ctx) => {\n    await ctx.answerCbQuery();\n    return ctx.scene.reenter();\n});\n\nchangePhotoScene.action('mainmenu', async (ctx) => {\n    await ctx.answerCbQuery('👈 Возвращаемся в главное меню');\n    return ctx.scene.enter('main');\n});\n\n// Обработка всех остальных типов сообщений\nchangePhotoScene.on('message', async (ctx) => {\n    await ctx.reply(\n        '⚠️ Пожалуйста, отправьте фотографию или выберите действие из меню ниже:',\n        Markup.inlineKeyboard([\n            [Markup.button.callback('❓ Помощь по загрузке', 'photo_help')],\n            [Markup.button.callback('👈 Вернуться в главное меню', 'mainmenu')]\n        ])\n    );\n});","import { Scenes, Markup } from 'telegraf';\nimport { MyContext, ChangePhoneState } from '../../../types/MyContext';\nimport laravelService from '../../../../services/laravelService';\n\nexport const changePhoneScene = new Scenes.BaseScene<MyContext>('change_phone_scene');\n\n// Вход в сцену\nchangePhoneScene.enter(async (ctx: MyContext) => {\n    const state = ctx.scene.state as ChangePhoneState;\n\n    try {\n        if (!state?.recordId) {\n            return ctx.reply(\n                '❌ Ошибка: не выбрана запись',\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('« Назад к записям', 'back_to_records')\n                ]])\n            );\n        }\n\n        // Сохраняем состояние до удаления ctx.scene.state\n        const recordId = state.recordId;\n        \n        // Сохраняем состояние в сессии\n        ctx.session.changePhoneState = {\n            recordId,\n            phone: state.phone || ctx.session.phone,\n            password: state.password || ctx.session.password\n        };\n\n        await ctx.reply(\n            'Введите новый номер телефона клиента в формате 79XXXXXXXXX:',\n            Markup.inlineKeyboard([[\n                Markup.button.callback('« Отмена', 'cancel_phone_change')\n            ]])\n        );\n\n    } catch (error) {\n        console.error('Error in changePhoneScene enter:', error);\n        await ctx.reply(\n            '❌ Произошла ошибка. Попробуйте позже.',\n            Markup.inlineKeyboard([[\n                Markup.button.callback('« Назад к записям', 'back_to_records')\n            ]])\n        );\n    }\n});\n\n// Обработка введенного телефона\nchangePhoneScene.on('text', async (ctx) => {\n    const state = ctx.session.changePhoneState;\n    \n    try {\n        if (!state || !state.recordId || !state.phone || !state.password) {\n            return ctx.reply(\n                '❌ Ошибка: недостаточно данных. Попробуйте заново.',\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('« Назад к записям', 'back_to_records')\n                ]])\n            );\n        }\n\n        const newPhone = ctx.message.text.trim();\n\n        // Проверяем формат телефона\n        if (!/^7\\d{10}$/.test(newPhone)) {\n            return ctx.reply(\n                '❌ Неверный формат номера телефона. Введите номер в формате 79XXXXXXXXX:',\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('« Отмена', 'cancel_phone_change')\n                ]])\n            );\n        }\n\n        const loadingMsg = await ctx.reply('🔄 Обновляем номер телефона...');\n\n        try {\n            // Сохраняем recordId перед обновлением\n            const recordId = state.recordId;\n            \n            const result = await laravelService.updateMasterRecord({\n                phone: state.phone,\n                password: state.password,\n                recordId: state.recordId,\n                updateData: {\n                    client: {\n                        phone: newPhone\n                    }\n                }\n            });\n\n            // Удаляем сообщение о загрузке\n            await ctx.telegram.deleteMessage(ctx.chat!.id, loadingMsg.message_id).catch(() => {});\n\n            await ctx.reply(\n                '✅ Номер телефона успешно обновлен',\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('« К записи', 'back_to_record')\n                ]])\n            );\n\n            // Сохраняем обновленное состояние\n            ctx.session.changePhoneState = {\n                ...state,\n                newPhone\n            };\n\n        } catch (error: any) {\n            await ctx.telegram.deleteMessage(ctx.chat!.id, loadingMsg.message_id).catch(() => {});\n\n            await ctx.reply(\n                '❌ ' + (error.message || 'Не удалось обновить номер телефона'),\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('« Назад', 'cancel_phone_change')\n                ]])\n            );\n        }\n\n    } catch (error) {\n        console.error('Error handling phone number:', error);\n        await ctx.reply(\n            '❌ Произошла ошибка. Попробуйте позже.',\n            Markup.inlineKeyboard([[\n                Markup.button.callback('« Назад к записям', 'back_to_records')\n            ]])\n        );\n    }\n});\n\n// Отмена изменения телефона\nchangePhoneScene.action('cancel_phone_change', async (ctx) => {\n    try {\n        await ctx.answerCbQuery();\n        const recordId = ctx.session.changePhoneState?.recordId;\n        \n        // Очищаем состояние до перехода на другую сцену\n        delete ctx.session.changePhoneState;\n        \n        return ctx.scene.enter('clients_management_scene', {\n            action: 'show_record',\n            recordId\n        });\n    } catch (error) {\n        console.error('Error in cancel_phone_change:', error);\n        await ctx.reply('❌ Произошла ошибка. Попробуйте позже.');\n    }\n});\n\n// Возврат к записи\nchangePhoneScene.action('back_to_record', async (ctx) => {\n    try {\n        await ctx.answerCbQuery();\n        const recordId = ctx.session.changePhoneState?.recordId;\n        \n        // Очищаем состояние до перехода на другую сцену\n        delete ctx.session.changePhoneState;\n        \n        return ctx.scene.enter('clients_management_scene', {\n            action: 'show_record',\n            recordId\n        });\n    } catch (error) {\n        console.error('Error in back_to_record:', error);\n        await ctx.reply('❌ Произошла ошибка. Попробуйте позже.');\n    }\n});\n\nexport default changePhoneScene;","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\nimport laravelService from '../../../../services/laravelService';\n\n\nexport const clientsManagementScene = new Scenes.BaseScene<MyContext>('clients_management_scene');\n\ninterface RecordData {\n    id: string;\n    date: string;\n    client?: {\n        name?: string;\n        phone?: string;\n    };\n    services?: Array<{\n        id: number;\n        title: string;\n        cost: number;\n    }>;\n}\n\n// Вспомогательные функции для работы с датами\nconst formatDate = (date: Date, format: string = 'YYYY-MM-DD'): string => {\n    const pad = (n: number) => n.toString().padStart(2, '0');\n    \n    const year = date.getFullYear();\n    const month = pad(date.getMonth() + 1);\n    const day = pad(date.getDate());\n    \n    return format\n        .replace('YYYY', year.toString())\n        .replace('MM', month)\n        .replace('DD', day);\n};\n\nconst formatTime = (date: string) => {\n    const d = new Date(date);\n    return `${String(d.getHours()).padStart(2, '0')}:${String(d.getMinutes()).padStart(2, '0')}`;\n};\n\n// Вход в сцену\nclientsManagementScene.enter(async (ctx: MyContext) => {\n    try {\n        // Проверяем авторизацию\n        if (!ctx.session.phone || !ctx.session.password) {\n            await ctx.reply(\n                '⚠️ Необходимо авторизоваться для просмотра записей.',\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('Войти в аккаунт', 'start_login')\n                ]])\n            );\n            return;\n        }\n\n        const loadingMessage = await ctx.reply('🔄 Загружаем ваши записи...');\n\n        try {\n            // Получаем записи через Laravel Service\n            const response = await laravelService.getMasterRecords({\n                phone: ctx.session.phone,\n                password: ctx.session.password,\n                params: {\n                    start_date: formatDate(new Date()),\n                    end_date: formatDate(new Date(Date.now() + 30 * 24 * 60 * 60 * 1000))\n                }\n            }) as { success: boolean; data: RecordData[] };\n\n            // Удаляем сообщение о загрузке\n            await ctx.telegram.deleteMessage(ctx.chat!.id, loadingMessage.message_id).catch(() => {});\n\n            if (!response?.success || !response.data?.length) {\n                return await ctx.reply(\n                    '📅 У вас нет предстоящих записей на ближайший месяц.',\n                    Markup.inlineKeyboard([[\n                        Markup.button.callback('« Вернуться в меню', 'mainmenu')\n                    ]])\n                );\n            }\n\n            // Группируем записи по дням\n            const recordsByDate = response.data.reduce((acc, record) => {\n                const date = new Date(record.date);\n                const dateKey = formatDate(date, 'DD.MM.YYYY');\n                if (!acc[dateKey]) {\n                    acc[dateKey] = [];\n                }\n                acc[dateKey].push(record);\n                return acc;\n            }, {} as Record<string, any[]>);\n\n            // Создаем структурированные кнопки\n            const buttons: any[] = [];\n            Object.entries(recordsByDate).forEach(([date, records]) => {\n                // Добавляем заголовок даты\n                buttons.push([Markup.button.callback(`📅 ${date}`, 'noop')]);\n                \n                // Добавляем записи за этот день\n                records.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\n                    .forEach(record => {\n                        const time = formatTime(record.date);\n                        const clientName = record.client?.name || 'Клиент';\n                        const services = record.services\n                            ?.map(s => s.title)\n                            .slice(0, 2)\n                            .join(', ');\n                        \n                        const buttonText = `${time} | ${clientName}${services ? ` - ${services}` : ''}`;\n                        buttons.push([\n                            Markup.button.callback(\n                                buttonText.length > 60 ? buttonText.slice(0, 57) + '...' : buttonText,\n                                `record_${record.id}`\n                            )\n                        ]);\n                    });\n            });\n\n            // Добавляем кнопку возврата в меню\n            buttons.push([Markup.button.callback('« Вернуться в меню', 'mainmenu')]);\n\n            await ctx.reply(\n                'Выберите запись для управления:',\n                Markup.inlineKeyboard(buttons)\n            );\n\n        } catch (error: any) {\n            // Удаляем сообщение о загрузке\n            await ctx.telegram.deleteMessage(ctx.chat!.id, loadingMessage.message_id).catch(() => {});\n\n            console.error('Error loading records:', error);\n\n            let errorMessage = '❌ Произошла ошибка при загрузке записей.';\n            \n            if (error?.response?.status === 401) {\n                errorMessage = '🔒 Ошибка авторизации. Пожалуйста, войдите в систему заново.';\n                return ctx.scene.enter('login_wizard');\n            }\n            \n            await ctx.reply(\n                errorMessage,\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('« Вернуться в меню', 'mainmenu')\n                ]])\n            );\n        }\n\n    } catch (error) {\n        console.error('Error in clientsManagementScene:', error);\n        await ctx.reply(\n            '❌ Произошла непредвиденная ошибка. Пожалуйста, попробуйте позже.',\n            Markup.inlineKeyboard([[\n                Markup.button.callback('« Вернуться в меню', 'mainmenu')\n            ]])\n        );\n    }\n});\n\n// Заглушка для кнопок-заголовков дат\nclientsManagementScene.action('noop', async (ctx) => {\n    await ctx.answerCbQuery('Это заголовок даты').catch(() => {});\n});\n\n// Обработка выбора конкретной записи\nclientsManagementScene.action(/^record_(\\d+)$/, async (ctx: MyContext) => {\n    try {\n        const recordId = ctx.match[1];\n        \n        // Сохраняем ID записи в сессии\n        ctx.scene.session.selectedRecordId = recordId;\n        \n        // Получаем детали записи\n        const response = await laravelService.getMasterRecordDetails({\n            phone: ctx.session.phone!,\n            password: ctx.session.password!,\n            recordId: recordId\n        });\n\n        if (!response?.success) {\n            throw new Error('Не удалось получить информацию о записи');\n        }\n\n        const record = response.data;\n        const date = new Date(record.date);\n        \n        // Формируем детальную информацию о записи\n        const recordInfo = [\n            `📅 Дата: ${formatDate(date, 'DD.MM.YYYY')}`,\n            `🕒 Время: ${formatTime(record.date)}`,\n            `👤 Клиент: ${record.client?.name || 'Не указан'}`,\n            `📱 Телефон: ${record.client?.phone || 'Не указан'}`,\n            `💅 Услуги:\\n${record.services?.map(s => `• ${s.title}`).join('\\n') || 'Нет услуг'}`\n        ].join('\\n');\n\n        const managementKeyboard = Markup.inlineKeyboard([\n            [\n                Markup.button.callback('⏱ Изменить время', 'change_service_time'),\n                Markup.button.callback('❌ Удалить услугу', 'delete_service_from_order'),\n            ],\n            [\n                Markup.button.callback('➕ Добавить услугу', 'add_service_to_order'),\n            ],\n            [\n                Markup.button.callback('📞 Изменить телефон', 'change_phone_number'),\n            ],\n            [\n                Markup.button.callback('🚫 Отменить запись', 'cancel_client_booking'),\n            ],\n            [\n                Markup.button.callback('« К списку записей', 'back_to_records'),\n                Markup.button.callback('« В меню', 'mainmenu'),\n            ]\n        ]);\n\n        await ctx.editMessageText(recordInfo, managementKeyboard);\n\n    } catch (error) {\n        console.error('Error in record selection:', error);\n        await ctx.answerCbQuery('❌ Ошибка при загрузке информации о записи').catch(() => {});\n        \n        await ctx.reply(\n            'Не удалось загрузить информацию о записи. Попробуйте позже.',\n            Markup.inlineKeyboard([[\n                Markup.button.callback('« Назад к записям', 'back_to_records')\n            ]])\n        );\n    }\n});\n\n// Возврат к списку записей\nclientsManagementScene.action('back_to_records', async (ctx) => {\n    await ctx.answerCbQuery();\n    // Очищаем выбранную запись\n    delete ctx.scene.session.selectedRecordId;\n    return ctx.scene.reenter();\n});\n\n// Обработчики действий с записью\nclientsManagementScene.action('change_service_time', async (ctx) => {\n    if (!ctx.scene.session.selectedRecordId) {\n        await ctx.answerCbQuery('❌ Ошибка: запись не выбрана');\n        return ctx.scene.reenter();\n    }\n    \n    await ctx.answerCbQuery();\n    return ctx.scene.enter('change_service_time_scene', {\n        recordId: ctx.scene.session.selectedRecordId,\n        phone: ctx.session.phone,\n        password: ctx.session.password\n    });\n});\n\nclientsManagementScene.action('delete_service_from_order', async (ctx) => {\n    if (!ctx.scene.session.selectedRecordId) {\n        await ctx.answerCbQuery('❌ Ошибка: запись не выбрана');\n        return ctx.scene.reenter();\n    }\n\n    await ctx.answerCbQuery();\n    return ctx.scene.enter('delete_service_scene', {\n        recordId: ctx.scene.session.selectedRecordId,\n        phone: ctx.session.phone,\n        password: ctx.session.password\n    });\n});\n\nclientsManagementScene.action('add_service_to_order', async (ctx) => {\n    if (!ctx.scene.session.selectedRecordId) {\n        await ctx.answerCbQuery('❌ Ошибка: запись не выбрана');\n        return ctx.scene.reenter();\n    }\n\n    await ctx.answerCbQuery();\n    return ctx.scene.enter('add_service_scene', {\n        recordId: ctx.scene.session.selectedRecordId,\n        phone: ctx.session.phone,\n        password: ctx.session.password\n    });\n});\n\nclientsManagementScene.action('change_phone_number', async (ctx) => {\n    if (!ctx.scene.session.selectedRecordId) {\n        await ctx.answerCbQuery('❌ Ошибка: запись не выбрана');\n        return ctx.scene.reenter();\n    }\n\n    await ctx.answerCbQuery();\n    return ctx.scene.enter('change_phone_scene', {\n        recordId: ctx.scene.session.selectedRecordId,\n        phone: ctx.session.phone,\n        password: ctx.session.password\n    });\n});\n\n\n\nclientsManagementScene.action('cancel_client_booking', async (ctx) => {\n    if (!ctx.scene.session.selectedRecordId) {\n        await ctx.answerCbQuery('❌ Ошибка: запись не выбрана');\n        return ctx.scene.reenter();\n    }\n\n    await ctx.answerCbQuery();\n    return ctx.scene.enter('cancel_booking_scene', {\n        recordId: ctx.scene.session.selectedRecordId,\n        phone: ctx.session.phone,\n        password: ctx.session.password\n    });\n});\n\n// Возврат в главное меню\nclientsManagementScene.action('mainmenu', async (ctx) => {\n    await ctx.answerCbQuery();\n    // Очищаем данные сцены\n    delete ctx.scene.session.selectedRecordId;\n    return ctx.scene.enter('main');\n});\n\nexport default clientsManagementScene;","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\nimport laravelService from '../../../../services/laravelService';\n\nexport interface DeleteServiceState {\n    recordId: string;\n    phone?: string;\n    password?: string;\n}\n\nexport const deleteServiceScene = new Scenes.BaseScene<MyContext>('delete_service_scene');\n\n// Вход в сцену\ndeleteServiceScene.enter(async (ctx: MyContext) => {\n    const state = ctx.scene.state as DeleteServiceState;\n\n    try {\n        if (!state?.recordId) {\n            return ctx.reply(\n                '❌ Ошибка: не выбрана запись',\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('« Назад к записям', 'back_to_records')\n                ]])\n            );\n        }\n\n        // Сохраняем состояние\n        ctx.session.deleteServiceState = {\n            recordId: state.recordId,\n            phone: state.phone || ctx.session.phone,\n            password: state.password || ctx.session.password\n        };\n\n        // Получаем детали записи для отображения списка услуг\n        const record = await laravelService.getMasterRecordDetails({\n            phone: ctx.session.deleteServiceState.phone!,\n            password: ctx.session.deleteServiceState.password!,\n            recordId: state.recordId\n        });\n\n        if (!record?.success || !record.data?.services?.length) {\n            return ctx.reply(\n                '❌ В записи нет услуг для удаления',\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('« Назад к записи', 'back_to_record')\n                ]])\n            );\n        }\n\n        // Создаем кнопки с услугами\n        const buttons = record.data.services.map(service => ([\n            Markup.button.callback(\n                `${service.title} (${service.cost}₽)`,\n                `delete_service_${service.id}`\n            )\n        ]));\n\n        // Добавляем кнопку отмены\n        buttons.push([\n            Markup.button.callback('« Отмена', 'cancel_service_delete')\n        ]);\n\n        await ctx.reply(\n            'Выберите услугу для удаления:',\n            Markup.inlineKeyboard(buttons)\n        );\n\n    } catch (error) {\n        console.error('Error in deleteServiceScene enter:', error);\n        await ctx.reply(\n            '❌ Произошла ошибка. Попробуйте позже.',\n            Markup.inlineKeyboard([[\n                Markup.button.callback('« Назад к записи', 'back_to_record')\n            ]])\n        );\n    }\n});\n\n// Обработка выбора услуги\ndeleteServiceScene.action(/^delete_service_(\\d+)$/, async (ctx) => {\n    const state = ctx.session.deleteServiceState;\n    const serviceId = ctx.match[1];\n\n    try {\n        if (!state?.recordId || !state.phone || !state.password) {\n            throw new Error('Отсутствуют необходимые данные');\n        }\n\n        await ctx.answerCbQuery();\n        const loadingMsg = await ctx.reply('🔄 Удаляем услугу...');\n\n        try {\n            const result = await laravelService.updateMasterRecord({\n                phone: state.phone,\n                password: state.password,\n                recordId: state.recordId,\n                updateData: {\n                    services: {\n                        remove: [parseInt(serviceId)]\n                    }\n                }\n            });\n\n            await ctx.telegram.deleteMessage(ctx.chat!.id, loadingMsg.message_id).catch(() => {});\n\n            await ctx.reply(\n                '✅ Услуга успешно удалена',\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('« К записи', 'back_to_record')\n                ]])\n            );\n\n        } catch (error: any) {\n            await ctx.telegram.deleteMessage(ctx.chat!.id, loadingMsg.message_id).catch(() => {});\n\n            await ctx.reply(\n                '❌ ' + (error.message || 'Не удалось удалить услугу'),\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('« Назад', 'cancel_service_delete')\n                ]])\n            );\n        }\n\n    } catch (error) {\n        console.error('Error in service deletion:', error);\n        await ctx.reply('❌ Произошла ошибка. Попробуйте позже.');\n    }\n});\n\n// Обработка отмены\ndeleteServiceScene.action('cancel_service_delete', async (ctx) => {\n    try {\n        await ctx.answerCbQuery();\n        const recordId = ctx.session.deleteServiceState?.recordId;\n        \n        // Очищаем состояние\n        delete ctx.session.deleteServiceState;\n        \n        return ctx.scene.enter('clients_management_scene', {\n            action: 'show_record',\n            recordId\n        });\n    } catch (error) {\n        console.error('Error in cancel_service_delete:', error);\n        await ctx.reply('❌ Произошла ошибка. Попробуйте позже.');\n    }\n});\n\n// Возврат к записи\ndeleteServiceScene.action('back_to_record', async (ctx) => {\n    try {\n        await ctx.answerCbQuery();\n        const recordId = ctx.session.deleteServiceState?.recordId;\n        \n        // Очищаем состояние\n        delete ctx.session.deleteServiceState;\n        \n        return ctx.scene.enter('clients_management_scene', {\n            action: 'show_record',\n            recordId\n        });\n    } catch (error) {\n        console.error('Error in back_to_record:', error);\n        await ctx.reply('❌ Произошла ошибка. Попробуйте позже.');\n    }\n});\n\nexport default deleteServiceScene;","import { Scenes, Markup, Composer } from 'telegraf';\nimport { MyContext, MySession } from '../../../types/MyContext';\nimport laravelService from \"../../../../services/laravelService\";\n\ninterface SessionData {\n    phone?: string;\n    password?: string;\n    apiToken?: string;\n    user?: any;\n    }\n\n// Утилиты для работы с телефоном\nconst formatPhone = (phone: string): string => {\n    let cleaned = phone.replace(/\\D/g, '');\n    if (cleaned.startsWith('8')) {\n        cleaned = '7' + cleaned.slice(1);\n    }\n    if (!cleaned.startsWith('7')) {\n        cleaned = '7' + cleaned;\n    }\n    return cleaned;\n};\n\nconst isValidPhone = (phone: string): boolean => {\n    const cleaned = phone.replace(/\\D/g, '');\n    return /^[78]\\d{10}$/.test(cleaned);\n};\n\n// Шаг 1: Начальное меню\nconst showMainMenu = async (ctx: MyContext) => {\n    const messageText = `Добро пожаловать в CherryTown! Выберите действие:`;\n\n    const mainMenuKeyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Трудоустройство', 'registration')],\n        [Markup.button.callback('Авторизация', 'authorization')],\n    ]);\n\n    if (ctx.callbackQuery?.message) {\n        try {\n            await ctx.editMessageText(messageText, mainMenuKeyboard);\n        } catch (error) {\n            await ctx.reply(messageText, mainMenuKeyboard);\n        }\n    } else {\n        await ctx.reply(messageText, mainMenuKeyboard);\n    }\n\n    return ctx.wizard.next();\n};\n\n// Шаг 2: Обработка регистрации\nconst handleRegistration = new Composer<MyContext>();\nhandleRegistration.action('registration', async (ctx) => {\n    await ctx.answerCbQuery();\n    await ctx.scene.enter('registration_wizard');\n    return;\n});\n\n// Шаг 3: Обработка авторизации и ввода телефона\nconst handleAuthorization = new Composer<MyContext>();\nhandleAuthorization.action('authorization', async (ctx) => {\n    await ctx.answerCbQuery();\n    const message = `Введите ваш номер телефона в формате:\\n+7XXXXXXXXXX`;\n\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('👈 Назад', 'back_to_menu')],\n    ]);\n\n    await ctx.editMessageText(message, keyboard);\n    return ctx.wizard.next();\n});\n\n// Обработка ввода телефона\nconst handlePhoneInput = new Composer<MyContext>();\nhandlePhoneInput.action('back_to_menu', async (ctx) => {\n    await ctx.answerCbQuery();\n    return ctx.scene.reenter();\n});\n\nhandlePhoneInput.on('text', async (ctx) => {\n    const phone = formatPhone(ctx.message.text);\n\n    if (!isValidPhone(phone)) {\n        await ctx.reply(\n            'Неверный формат номера. Пожалуйста, введите номер в формате:\\n+7XXXXXXXXXX',\n            Markup.inlineKeyboard([\n                [Markup.button.callback('👈 Назад', 'back_to_menu')]\n            ])\n        );\n        return;\n    }\n\n    ctx.scene.session.phone = phone;\n\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('👈 Назад', 'back_to_phone')]\n    ]);\n\n    await ctx.reply('Введите пароль от личного кабинета YClients:', keyboard);\n    return ctx.wizard.next();\n});\n\n// Обработка ввода пароля\nconst handlePasswordInput = new Composer<MyContext>();\n\nhandlePasswordInput.action('back_to_phone', async (ctx) => {\n    await ctx.answerCbQuery();\n    const message = `Введите ваш номер телефона в формате:\\n+7XXXXXXXXXX`;\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('👈 Назад', 'back_to_menu')],\n    ]);\n    await ctx.editMessageText(message, keyboard);\n    return ctx.wizard.back();\n});\n\n\n\n// Утилита для задержки\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\nhandlePasswordInput.on('text', async (ctx) => {\n    const password = ctx.message.text;\n    const phone = ctx.scene.session.phone;\n\n    try {\n        await ctx.reply('⏳ Проверяем данные...');\n        const response = await laravelService.auth(phone, password, ctx.from.id);\n        \n        if (response?.success) {\n            if (ctx.session) {\n                // Инициализируем сессию с правильной структурой\n                const sessionData: SessionData = {\n                    phone,\n                    password,\n                    apiToken: response.token,\n                    user: response.user\n                };\n                \n                Object.assign(ctx.session, sessionData);\n            }\n\n            try {\n                const messagesToDelete = ctx.message.message_id;\n                for (let i = 0; i < 3; i++) {\n                    try {\n                        await ctx.deleteMessage(messagesToDelete - i);\n                    } catch (e) {\n                        // Игнорируем ошибки удаления\n                    }\n                }\n            } catch (e) {\n                console.log('Could not delete messages:', e);\n            }\n\n            // Очищаем временные данные из сцены\n            delete ctx.scene.session.phone;\n            delete ctx.scene.session.password;\n\n            const successMsg = await ctx.reply('🔄 Авторизация...');\n            await delay(700);\n            await ctx.telegram.editMessageText(\n                ctx.chat.id,\n                successMsg.message_id,\n                undefined,\n                '✨ Проверяем данные...'\n            );\n            await delay(700);\n            await ctx.telegram.editMessageText(\n                ctx.chat.id,\n                successMsg.message_id,\n                undefined,\n                '🎉 Успешно! Добро пожаловать в личный кабинет.'\n            );\n            \n            // Проверяем сохранение данных\n            console.log('Session after auth:', {\n                phone: ctx.session.phone,\n                hasPassword: !!ctx.session.password,\n                hasUser: !!ctx.session.user\n            });\n\n            await delay(1000);\n            return ctx.scene.enter('main');\n        }\n\n        const errorMsg = response?.message || 'Ошибка авторизации';\n        const errorMessage = await ctx.reply('❌ ' + errorMsg);\n        await delay(500);\n\n        const errorKeyboard = Markup.inlineKeyboard([\n            [Markup.button.callback('🔄 Попробовать снова', 'retry_auth')],\n            [Markup.button.callback('👈 Вернуться в меню', 'back_to_menu')]\n        ]);\n\n        await ctx.telegram.editMessageText(\n            ctx.chat.id,\n            errorMessage.message_id,\n            undefined,\n            '❌ ' + errorMsg,\n            { reply_markup: errorKeyboard.reply_markup }\n        );\n\n    } catch (error) {\n        console.error('Ошибка авторизации:', error);\n        \n        let errorMessage = 'Ошибка авторизации. ';\n        if (error.response?.data?.message) {\n            errorMessage += error.response.data.message;\n        } else {\n            errorMessage += 'Проверьте введенные данные и попробуйте снова.';\n        }\n\n        const errorMsg = await ctx.reply('⚠️ Обработка...');\n        await delay(500);\n\n        const errorKeyboard = Markup.inlineKeyboard([\n            [Markup.button.callback('🔄 Попробовать снова', 'retry_auth')],\n            [Markup.button.callback('👈 Вернуться в меню', 'back_to_menu')]\n        ]);\n\n        await ctx.telegram.editMessageText(\n            ctx.chat.id,\n            errorMsg.message_id,\n            undefined,\n            '❌ ' + errorMessage,\n            { reply_markup: errorKeyboard.reply_markup }\n        );\n    }\n});\n\n// Обработчики кнопок\nhandlePasswordInput.action('retry_auth', async (ctx) => {\n    await ctx.answerCbQuery();\n    const message = 'Введите ваш номер телефона в формате:\\n+7XXXXXXXXXX';\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('👈 Назад', 'back_to_menu')]\n    ]);\n    await ctx.editMessageText(message, keyboard);\n    return ctx.wizard.selectStep(2); // Возврат к вводу телефона\n});\n\nconst getInitialSession = (): Partial<MySession> => ({\n    user: { token: undefined, data: undefined },\n    notifications: [],\n    notificationForm: {\n        name: '',\n        dateTime: ''\n    },\n    notificationId: '',\n    searchRequestsType: '',\n    autobookingForm: {\n        warehouseId: '',\n        coefficient: '',\n        checkUntilDate: '',\n        boxTypeId: ''\n    },\n    page: 1,\n    selectedTariff: '',\n    count: null,\n    userPreferences: { notifications: 0 },\n    mySessionProp: 0,\n    searchRequestsPage: 0,\n    phone: '',\n    password: '',\n    isEditing: false\n});\n\nhandlePasswordInput.action('back_to_menu', async (ctx) => {\n    await ctx.answerCbQuery();\n    \n    if (ctx.session) {\n        Object.assign(ctx.session, getInitialSession());\n    }\n    \n    if (ctx.scene.session) {\n        Object.assign(ctx.scene.session, {});\n    }\n    \n    return ctx.scene.enter('login_wizard');\n});\n\n// Финальный шаг после успешной авторизации\nconst handlePostLogin = new Composer<MyContext>();\nhandlePostLogin.action('goto_master_menu', async (ctx) => {\n    await ctx.answerCbQuery();\n    return ctx.scene.enter('master_menu_scene');\n});\n\nhandlePostLogin.action('retry_auth', async (ctx) => {\n    await ctx.answerCbQuery();\n    return ctx.scene.reenter();\n});\n\nhandlePostLogin.action('back_to_menu', async (ctx) => {\n    await ctx.answerCbQuery();\n    return ctx.scene.reenter();\n});\n\n// Объединяем обработчики действий\nconst handleAction = new Composer<MyContext>();\nhandleAction.use(handleRegistration);\nhandleAction.use(handleAuthorization);\n\n// Создаем сцену wizard\nexport const loginWizard = new Scenes.WizardScene<MyContext>(\n    'login_wizard',\n    showMainMenu,\n    handleAction,\n    handlePhoneInput,\n    handlePasswordInput,\n    handlePostLogin\n);\n\n// Добавляем middleware для обработки ошибок\nloginWizard.use(async (ctx, next) => {\n    try {\n        await next();\n    } catch (error) {\n        console.error('Ошибка в login wizard:', error);\n        await ctx.reply(\n            'Произошла ошибка. Пожалуйста, попробуйте позже или обратитесь к администратору.',\n            Markup.inlineKeyboard([\n                [Markup.button.callback('👈 Вернуться в меню', 'back_to_menu')]\n            ])\n        );\n    }\n});","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\nimport { cabinetGate } from \"../../../utils/cabinetGate\";\nimport laravelService from \"../../../../services/laravelService\";\nimport { changeDescriptionScene } from './changeDescriptionScene';\nimport * as fs from 'fs';\n\nexport const mainScene = new Scenes.BaseScene<MyContext>('main');\n\nmainScene.enter(async (ctx: MyContext) => {\n    const messageText = `[главный экран для мастеров]`;\n\n    const mainMenuKeyboard = Markup.inlineKeyboard([\n        [\n            Markup.button.callback('обучение', 'education'),\n        ],\n        [\n            Markup.button.callback('мои документы', 'documents'),\n            Markup.button.callback('работа с клиентами', 'clients_management'),\n        ],\n        [\n            Markup.button.callback('изменить описание', 'change_description'),\n        ],\n        [\n            Markup.button.callback('изменить фотографию', 'change_photo'),\n            Markup.button.callback('изменить график работы', 'change_schedule'),\n        ],\n        [\n            Markup.button.callback('🚪 Выйти из аккаунта', 'logout')  // Добавляем кнопку выхода\n        ]\n    ]);\n\n    if (ctx.callbackQuery?.message) {\n        try {\n            await ctx.editMessageText(messageText, mainMenuKeyboard);\n        }\n        catch (error) {\n            await ctx.reply(messageText, mainMenuKeyboard);\n        }\n    } else {\n        await ctx.reply(messageText, mainMenuKeyboard);\n    }\n});\n\n// Обработчик выхода\nmainScene.action('logout', async (ctx: MyContext) => {\n    try {\n        await ctx.answerCbQuery('Выходим из аккаунта...');\n        \n        // Сначала спрашиваем подтверждение\n        const confirmKeyboard = Markup.inlineKeyboard([\n            [\n                Markup.button.callback('✅ Да, выйти', 'confirm_logout'),\n                Markup.button.callback('❌ Отмена', 'cancel_logout')\n            ]\n        ]);\n\n        await ctx.editMessageText(\n            'Вы уверены, что хотите выйти из аккаунта?',\n            confirmKeyboard\n        );\n    } catch (error) {\n        console.error('Ошибка при выходе:', error);\n        await ctx.reply('Произошла ошибка. Попробуйте позже.');\n    }\n});\n\n// Подтверждение выхода\nmainScene.action('confirm_logout', async (ctx: MyContext) => {\n    try {\n        await ctx.answerCbQuery();\n        \n        // Очищаем данные на бэкенде\n        const telegramId = ctx.from?.id;\n        if (telegramId) {\n            try {\n                await laravelService.logout(telegramId);\n            } catch (error) {\n                // Логируем ошибку, но продолжаем процесс выхода\n                console.error('Ошибка при очистке данных на бэкенде:', error);\n            }\n        }\n\n        // Показываем сообщение об успешном выходе в любом случае\n        await ctx.editMessageText(\n            'Вы успешно вышли из аккаунта.',\n            Markup.inlineKeyboard([\n                [Markup.button.callback('Войти снова', 'start_login')]\n            ])\n        );\n\n        // Переходим на сцену логина\n        \n        return ctx.scene.enter('login_wizard');\n\n    } catch (error) {\n        console.error('Ошибка при выходе:', error);\n        await ctx.reply('Произошла ошибка. Попробуйте еще раз через несколько секунд.');\n        \n        // В случае ошибки всё равно пытаемся вернуться к логину\n        return ctx.scene.enter('login_wizard');\n    }\n});\n\n// Отмена выхода\nmainScene.action('cancel_logout', async (ctx: MyContext) => {\n    try {\n        await ctx.answerCbQuery('Отменено');\n        return ctx.scene.reenter(); // Возвращаемся в главное меню\n    } catch (error) {\n        console.error('Ошибка при отмене выхода:', error);\n        await ctx.reply('Произошла ошибка. Попробуйте позже.');\n    }\n});\n\nmainScene.action('mainmenu', async (ctx) => {\n    await ctx.answerCbQuery();\n    const messageText = `[главный экран для мастеров]`;\n\n    const mainMenuKeyboard = Markup.inlineKeyboard([\n        [\n            Markup.button.callback('обучение', 'education'),\n        ],\n        [\n            Markup.button.callback('мои документы', 'documents'),\n            Markup.button.callback('работа с клиентами', 'clients_management'),\n        ],\n        [\n            Markup.button.callback('изменить описание', 'change_description'),\n        ],\n        [\n            Markup.button.callback('изменить фотографию', 'change_photo'),\n            Markup.button.callback('изменить график работы', 'change_schedule'),\n        ],\n        [\n            Markup.button.callback('🚪 Выйти из аккаунта', 'logout')  // Добавляем кнопку выхода\n        ]\n    ]);\n\n    await ctx.editMessageText(messageText, mainMenuKeyboard);\n});\n\n// Остальные обработчики остаются без изменений\nmainScene.action('education', async (ctx) => {\n    const message = `[модуль обучения]\\n\\nссылка на обучение`;\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.url('перейти к обучению', 'https://t.me/dmitrynovikov21')],\n        [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n    ]);\n    await ctx.editMessageText(message, keyboard);\n});\n\nmainScene.action('documents', async (ctx) => {\n    const message = `[Мои документы]\\n\\nНажмите кнопку для получения ваших документов`;\n    const documentsKeyboard = Markup.inlineKeyboard([\n        [\n            Markup.button.callback('📄 Получить документы', 'get_documents'),\n        ],\n        [\n            Markup.button.callback('👌 Главное меню', 'mainmenu'),\n        ]\n    ]);\n    await ctx.editMessageText(message, documentsKeyboard);\n});\n\nmainScene.action('get_documents', async (ctx) => {\n    try {\n        // Получаем номер телефона из сессии или ctx\n        const phone = ctx.session?.phone;\n        \n        if (!phone) {\n            await ctx.reply('Ошибка: не найден номер телефона. Попробуйте перелогиниться.',\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('👌 Главное меню', 'mainmenu')\n                ]])\n            );\n            return;\n        }\n\n        // Получаем документы\n        const documents = await laravelService.getMasterDocumentsByPhone(phone);\n        \n        if (documents && documents.length > 0) {\n            await ctx.reply('Отправляю ваши документы...');\n            \n            for (const doc of documents) {\n                try {\n                    const fileBuffer = await fs.promises.readFile(doc.path);\n                    await ctx.replyWithDocument({ \n                        source: fileBuffer,\n                        filename: doc.original_name \n                    });\n                    // Небольшая задержка между отправкой документов\n                    await new Promise(resolve => setTimeout(resolve, 1000));\n                } catch (docError) {\n                    console.error('Error sending document:', {\n                        error: docError,\n                        document: doc\n                    });\n                    await ctx.reply(`Ошибка при отправке документа ${doc.original_name}`);\n                }\n            }\n\n            await ctx.reply('Все документы отправлены', \n                Markup.inlineKeyboard([[\n                    Markup.button.callback('👌 Главное меню', 'mainmenu')\n                ]])\n            );\n        } else {\n            await ctx.reply('Документы не найдены.',\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('👌 Главное меню', 'mainmenu')\n                ]])\n            );\n        }\n    } catch (error) {\n        console.error('Error in get_documents handler:', error);\n        await ctx.reply('Произошла ошибка при получении документов.',\n            Markup.inlineKeyboard([[\n                Markup.button.callback('👌 Главное меню', 'mainmenu')\n            ]])\n        );\n    }\n});\n\nmainScene.action('clients_management', async (ctx) => {\n    await ctx.answerCbQuery();\n    return ctx.scene.enter('clients_management_scene');\n});\n\nmainScene.action('change_description', async (ctx: MyContext) => {\n    await ctx.answerCbQuery();\n    // Просто переходим в сцену без отправки сообщения\n    return ctx.scene.enter('change_description_scene');\n});\n\nmainScene.action('change_photo', async (ctx) => {\n    await ctx.answerCbQuery();\n    return ctx.scene.enter('change_photo_scene');\n});\n\nmainScene.action('change_schedule', async (ctx) => {\n    await ctx.answerCbQuery();\n    return ctx.scene.enter('schedule_management');\n});","import { Scenes, Markup, Composer } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\nimport laravelService from \"../../../../services/laravelService\";\nimport { CallbackQuery } from 'telegraf/types';\n\n// Session interface to store user data\ninterface RegistrationSession {\n    fullName?: string;\n    birthDate?: string;\n    passport?: string;\n    issuedBy?: string;\n    issueDate?: string;\n    divisionCode?: string;\n    registrationAddress?: string;\n    inn?: string;\n    accountNumber?: string;\n    bankName?: string;\n    bik?: string;\n    corrAccount?: string;\n    bankInn?: string;\n    bankKpp?: string;\n    phone?: string;\n    email?: string;\n    hasMedBook?: boolean;\n    medBookExpiry?: string;\n    hasEducationCert?: boolean;\n    educationCertPhoto?: string;\n    isSelfEmployed?: boolean;\n    selectedBranch?: Branch;\n    masterPrice: number;  // Убираем ? чтобы сделать поле обязательным\n    branch_yclients_id?: number; // добавляем новое поле\n}\n\n// Добавляем новый интерфейс для филиалов\ninterface Branch {\n    id: string;\n    name: string;\n    address: string;\n}\n\n// Добавляем список филиалов\nconst BRANCHES: Branch[] = [\n    {\n        id: 'vdnh',\n        name: 'Cherry Town ВДНХ',\n        address: 'Москва, Звёздный бульвар, дом 10, строение 1, офис 20'\n    },\n    {\n        id: 'semenovskaya',\n        name: 'Cherry Town Семёновская',\n        address: 'Москва, площадь Семёновская, дом 7, корпус 17а, кабинет 9'\n    },\n    {\n        id: 'sportivnaya',\n        name: 'Cherry Town Спортивная',\n        address: 'Москва, улица Доватора, дом 6/6, корпус 8'\n    },\n    {\n        id: 'pushkinskaya',\n        name: 'Cherry Town Пушкинская',\n        address: 'Москва, Малый Палашёвский переулок, дом 6'\n    },\n    {\n        id: 'nekrasovka',\n        name: 'Cherry Town Некрасовка',\n        address: 'Москва, улица Покровская, дом 16'\n    }\n];\n\n// Validation formats\nconst ValidationFormats = {\n    FULL_NAME: /^[А-ЯЁ][а-яё]+(?:-[А-ЯЁ][а-яё]+)?\\s[А-ЯЁ][а-яё]+(?:\\s[А-ЯЁ][а-яё]+)?$/,\n    BIRTH_DATE: /^(0[1-9]|[12][0-9]|3[01])\\.(0[1-9]|1[0-2])\\.\\d{4}$/,\n    PASSPORT: /^\\d{4}\\s\\d{6}$/,\n    DIVISION_CODE: /^\\d{3}-\\d{3}$/,\n    INN: /^\\d{12}$/,\n    ACCOUNT_NUMBER: /^\\d{20}$/,\n    BIK: /^\\d{9}$/,\n    CORR_ACCOUNT: /^\\d{20}$/,\n    BANK_INN: /^\\d{10}$/,\n    BANK_KPP: /^\\d{9}$/,\n    PHONE: /^\\+7\\d{10}$/,\n    EMAIL: /^[a-zA-Z0-9](?:[a-zA-Z0-9._-]{0,61}[a-zA-Z0-9])?@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z]{2,})+$/,\n    ISSUE_DATE: /^(0[1-9]|[12][0-9]|3[01])\\.(0[1-9]|1[0-2])\\.\\d{4}$/,\n    MED_BOOK_EXPIRY: /^(0[1-9]|[12][0-9]|3[01])\\.(0[1-9]|1[0-2])\\.\\d{4}$/\n};\n\n// Validation messages\nconst ValidationMessages = {\n    FULL_NAME: {\n        prompt: 'Напишите, пожалуйста, свое ФИО\\n\\nПример: Иванов Иван Иванович',\n        error: 'Неверный формат ФИО. ФИО должно содержать только русские буквы, пробелы и дефис.\\n\\nВведите, пожалуйста, корректное ФИО\\nПример: Иванов Иван Иванович'\n    },\n    BIRTH_DATE: {\n        prompt: 'Напишите, пожалуйста, дату рождения\\n\\nФормат: ДД.ММ.ГГГГ\\nПример: 01.01.1990',\n        error: 'Неверный формат даты рождения.\\n\\nВведите дату в правильном формате\\nФормат: ДД.ММ.ГГГГ\\nПример: 01.01.1990'\n    },\n    PASSPORT: {\n        prompt: 'Введите серию и номер паспорта\\n\\nФормат: СССС НННННН\\nПример: 4444 555666',\n        error: 'Неверный формат паспортных данных.\\n\\nВведите серию и номер паспорта в правильном формате\\nФормат: СССС НННННН\\nПример: 4444 555666'\n    },\n    ISSUED_BY: {\n        prompt: 'Кем выдан паспорт?\\n\\nПример: ГУ МВД РОССИИ ПО МОСКОВСКОЙ ОБЛАСТИ',\n        error: 'Слишком короткое или длинное название органа.\\n\\nВведите корректное название органа, выдавшего паспорт\\nПример: ГУ МВД РОССИИ ПО МОСКОВСКОЙ ОБЛАСТИ'\n    },\n    ISSUE_DATE: {\n        prompt: 'Дата выдачи паспорта\\n\\nФормат: ДД.ММ.ГГГГ\\nПример: 01.01.2020',\n        error: 'Неверный формат даты выдачи.\\n\\nВведите дату в правильном формате\\nФормат: ДД.ММ.ГГГГ\\nПример: 01.01.2020'\n    },\n    DIVISION_CODE: {\n        prompt: 'Код подразделения\\n\\nФормат: XXX-XXX\\nПример: 770-001',\n        error: 'Неверный формат кода подразделения.\\n\\nВведите код в правильном формате\\nФормат: XXX-XXX\\nПример: 770-001'\n    },\n    ADDRESS: {\n        prompt: 'Адрес регистрации\\n\\nПример: г. Москва, ул. Ленина, д. 1, кв. 1',\n        error: 'Слишком короткий или длинный адрес.\\n\\nВведите корректный адрес регистрации\\nПример: г. Москва, ул. Ленина, д. 1, кв. 1'\n    },\n    INN: {\n        prompt: 'ИНН\\n\\nПример: 123456789012 (12 цифр)',\n        error: 'Неверный формат ИНН.\\n\\nВведите ИНН в правильном формате\\nПример: 123456789012 (12 цифр)'\n    },\n    ACCOUNT_NUMBER: {\n        prompt: 'Номер счета\\n\\nПример: 40817810099910004312 (20 цифр)',\n        error: 'Неверный формат номера счета.\\n\\nВведите правильный номер счета\\nПример: 40817810099910004312 (20 цифр)'\n    },\n    BANK_NAME: {\n        prompt: 'Банк получателя\\n\\nПример: ПАО СБЕРБАНК',\n        error: 'Некорректное название банка.\\n\\nВведите правильное название банка\\nПример: ПАО СБЕРБАНК'\n    },\n    BIK: {\n        prompt: 'БИК\\n\\nПример: 044525225 (9 цифр)',\n        error: 'Неверный формат БИК.\\n\\nВведите БИК в правильном формате\\nПример: 044525225 (9 цифр)'\n    },\n    CORR_ACCOUNT: {\n        prompt: 'Корреспондентский счет\\n\\nПример: 30101810400000000225 (20 цифр)',\n        error: 'Неверный формат корр. счета.\\n\\nВведите правильный Корреспондентский счет\\nПример: 30101810400000000225 (20 цифр)'\n    },\n    BANK_INN: {\n        prompt: 'ИНН банка\\n\\nПример: 7707083893 (10 цифр)',\n        error: 'Неверный формат ИНН банка.\\n\\nВведите правильный ИНН банка\\nПример: 7707083893 (10 цифр)'\n    },\n    BANK_KPP: {\n        prompt: 'КПП банка\\n\\nПример: 773601001 (9 цифр)',\n        error: 'Неверный формат КПП банка.\\n\\nВведите правильный КПП банка\\nПример: 773601001 (9 цифр)'\n    },\n    PHONE: {\n        prompt: 'Ваш номер телефона\\n\\nФормат: +7XXXXXXXXXX\\nПример: +79001234567',\n        error: 'Неверный формат номера телефона.\\n\\nВведите номер в правильном формате\\nФормат: +7XXXXXXXXXX\\nПример: +79001234567'\n    },\n    EMAIL: {\n        prompt: 'Ваша электронная почта\\n\\nПример: example@mail.ru',\n        error: 'Неверный формат email.\\n\\nВведите корректный email адрес\\nПример: example@mail.ru'\n    },\n    MED_BOOK_EXPIRY: {\n        prompt: 'Дата окончания действия медицинской книжки\\n\\nФормат: ДД.ММ.ГГГГ\\nПример: 01.01.2025',\n        error: 'Неверный формат даты.\\n\\nВведите дату окончания медицинской книжки\\nФормат: ДД.ММ.ГГГГ\\nПример: 01.01.2025'\n    },\n    MASTER_PRICE: {\n        prompt: '📝 Укажите процент ставки, согласованный с управляющим\\n\\n⚠️ Максимальная ставка 50%\\n\\nВведите число от 1 до 50',\n        error: '❌ Некорректный процент ставки\\n\\nПожалуйста, введите число от 1 до 50'\n    }\n};\n\n// Validation helper functions\nconst validateField = (value: string, type: keyof typeof ValidationFormats): boolean => {\n    const pattern = ValidationFormats[type];\n    return pattern.test(value);\n};\n\nconst validateIssuedBy = (value: string): boolean => {\n    return value.length >= 5 && value.length <= 150;\n};\n\nconst validateAddress = (value: string): boolean => {\n    return value.length >= 10 && value.length <= 200;\n};\n\nconst validateBankName = (value: string): boolean => {\n    return value.length >= 3 && value.length <= 100;\n};\n\n// Helper function to create back button\nconst getBackButton = () => {\n    return Markup.inlineKeyboard([\n        [Markup.button.callback('« Назад', 'back')]\n    ]);\n};\n\n// Initial welcome message\nconst showWelcome = async (ctx: MyContext) => {\n    const registrationForm: RegistrationSession = {\n        fullName: '',\n        birthDate: '',\n        passport: '',\n        issuedBy: '',\n        issueDate: '',\n        divisionCode: '',\n        registrationAddress: '',\n        inn: '',\n        accountNumber: '',\n        bankName: '',\n        bik: '',\n        corrAccount: '',\n        bankInn: '',\n        bankKpp: '',\n        phone: '',\n        email: '',\n        hasMedBook: false,\n        medBookExpiry: '',\n        hasEducationCert: false,\n        educationCertPhoto: '',\n        isSelfEmployed: false,\n        masterPrice: 0  // Ставим начальное значение вместо undefined\n    };\n    ctx.scene.session.registrationForm = registrationForm;\n\n    const messageText = 'Давайте вместе устроимся на работу!';\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Давайте', 'start_registration')]\n    ]);\n\n    if (ctx.callbackQuery?.message) {\n        await ctx.editMessageText(messageText, keyboard);\n    } else {\n        await ctx.reply(messageText, keyboard);\n    }\n    return ctx.wizard.next();\n};\n\n// Check self-employment status\n// Type guard для проверки типа callback query\nfunction isDataCallbackQuery(query: CallbackQuery): query is CallbackQuery.DataQuery {\n    return 'data' in query;\n}\n\nconst checkSelfEmployment = async (ctx: MyContext) => {\n    // Проверяем наличие callback query и его тип\n    if (ctx.callbackQuery && isDataCallbackQuery(ctx.callbackQuery)) {\n        // Теперь TypeScript знает, что data существует\n        if (ctx.callbackQuery.data === 'start_registration') {\n            const messageText = 'Вы являетесь самозанятым?';\n            const keyboard = Markup.inlineKeyboard([\n                [\n                    Markup.button.callback('Да', 'self_employed_yes'),\n                    Markup.button.callback('Нет', 'self_employed_no')\n                ]\n            ]);\n            await ctx.editMessageText(messageText, keyboard);\n            // Отвечаем на callback query чтобы убрать \"часики\"\n            await ctx.answerCbQuery();\n        }\n    }\n    return ctx.wizard.next();\n};\n\n// Handle self-employment response\nconst handleSelfEmployment = new Composer<MyContext>();\nhandleSelfEmployment.action('self_employed_no', async (ctx) => {\n    ctx.scene.session.registrationForm.isSelfEmployed = false;\n    const messageText = 'Оформитесь как СМЗ и продолжите трудоустройство';\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.url('Оформиться', 'https://npd.nalog.ru/')],\n        [Markup.button.callback('Продолжить', 'continue_registration')]\n    ]);\n    await ctx.editMessageText(messageText, keyboard);\n});\n\nhandleSelfEmployment.action('self_employed_yes', async (ctx) => {\n    ctx.scene.session.registrationForm.isSelfEmployed = true;\n    return requestFullName(ctx);\n});\n\nhandleSelfEmployment.action('continue_registration', async (ctx) => {\n    return requestFullName(ctx);\n});\n\n// Request full name\nconst requestFullName = async (ctx: MyContext) => {\n    await ctx.reply(ValidationMessages.FULL_NAME.prompt);\n    return ctx.wizard.next();\n};\n\n// Handle full name input\nconst handleFullName = new Composer<MyContext>();\nhandleFullName.on('text', async (ctx) => {\n    const fullName = ctx.message.text;\n    \n    if (!validateField(fullName, 'FULL_NAME')) {\n        await ctx.reply(ValidationMessages.FULL_NAME.error);\n        \n        return;\n    }\n    \n    ctx.scene.session.registrationForm.fullName = fullName;\n    await ctx.reply(ValidationMessages.BIRTH_DATE.prompt);\n    return ctx.wizard.next();\n});\n\n// Handle birth date\n// Обновляем обработчик даты рождения\nconst handleBirthDate = new Composer<MyContext>();\nhandleBirthDate.on('text', async (ctx) => {\n    const birthDate = ctx.message.text.trim();\n    \n    if (!validateField(birthDate, 'BIRTH_DATE')) {\n        await ctx.reply(ValidationMessages.BIRTH_DATE.error);\n        return;\n    }\n    \n    // Добавляем проверку на разумный возраст\n    const [day, month, year] = birthDate.split('.').map(Number);\n    const birthTimestamp = new Date(year, month - 1, day).getTime();\n    const now = new Date().getTime();\n    const age = (now - birthTimestamp) / (365.25 * 24 * 60 * 60 * 1000);\n    \n    if (age < 18 || age > 100) {\n        await ctx.reply('Пожалуйста, проверьте правильность введенной даты. Возраст должен быть от 18 до 100 лет.');\n        return;\n    }\n    \n    ctx.scene.session.registrationForm.birthDate = birthDate;\n    await ctx.reply(ValidationMessages.PASSPORT.prompt);\n    return ctx.wizard.next();\n});\n\n// Handle passport\nconst handlePassport = new Composer<MyContext>();\nhandlePassport.on('text', async (ctx) => {\n    const passport = ctx.message.text;\n    \n    if (!validateField(passport, 'PASSPORT')) {\n        await ctx.reply(ValidationMessages.PASSPORT.error);\n        \n        return;\n    }\n    \n    ctx.scene.session.registrationForm.passport = passport;\n    await ctx.reply(ValidationMessages.ISSUED_BY.prompt);\n    return ctx.wizard.next();\n});\n\n// Handle issued by\nconst handleIssuedBy = new Composer<MyContext>();\nhandleIssuedBy.on('text', async (ctx) => {\n    const issuedBy = ctx.message.text;\n    \n    if (!validateIssuedBy(issuedBy)) {\n        await ctx.reply(ValidationMessages.ISSUED_BY.error);\n        \n        return;\n    }\n    \n    ctx.scene.session.registrationForm.issuedBy = issuedBy;\n    await ctx.reply(ValidationMessages.ISSUE_DATE.prompt);\n    return ctx.wizard.next();\n});\n\n// Handle issue date\nconst handleIssueDate = new Composer<MyContext>();\nhandleIssueDate.on('text', async (ctx) => {\n    const issueDate = ctx.message.text;\n    \n    if (!validateField(issueDate, 'ISSUE_DATE')) {\n        await ctx.reply(ValidationMessages.ISSUE_DATE.error);\n        \n        return;\n    }\n    \n    ctx.scene.session.registrationForm.issueDate = issueDate;\n    await ctx.reply(ValidationMessages.DIVISION_CODE.prompt);\n    return ctx.wizard.next();\n});\n\n// Handle division code\nconst handleDivisionCode = new Composer<MyContext>();\nhandleDivisionCode.on('text', async (ctx) => {\n    const divisionCode = ctx.message.text;\n    \n    if (!validateField(divisionCode, 'DIVISION_CODE')) {\n        await ctx.reply(ValidationMessages.DIVISION_CODE.error);\n       \n        return;\n    }\n    \n    ctx.scene.session.registrationForm.divisionCode = divisionCode;\n    await ctx.reply(ValidationMessages.ADDRESS.prompt);\n    return ctx.wizard.next();\n});\n\n// Handle address\nconst handleAddress = new Composer<MyContext>();\nhandleAddress.on('text', async (ctx) => {\n    const address = ctx.message.text;\n    \n    if (!validateAddress(address)) {\n        await ctx.reply(ValidationMessages.ADDRESS.error);\n        \n        return;\n    }\n    \n    ctx.scene.session.registrationForm.registrationAddress = address;\n    await ctx.reply(ValidationMessages.INN.prompt);\n    return ctx.wizard.next();\n});\n\n// Handle INN\nconst handleInn = new Composer<MyContext>();\nhandleInn.on('text', async (ctx) => {\n    const inn = ctx.message.text;\n    \n    if (!validateField(inn, 'INN')) {\n        await ctx.reply(ValidationMessages.INN.error);\n        \n        return;\n    }\n    \n    ctx.scene.session.registrationForm.inn = inn;\n    await ctx.reply(ValidationMessages.ACCOUNT_NUMBER.prompt);\n    return ctx.wizard.next();\n});\n\n// Handle account number\nconst handleAccountNumber = new Composer<MyContext>();\nhandleAccountNumber.on('text', async (ctx) => {\n    const accountNumber = ctx.message.text;\n    \n    if (!validateField(accountNumber, 'ACCOUNT_NUMBER')) {\n        await ctx.reply(ValidationMessages.ACCOUNT_NUMBER.error);\n        \n        return;\n    }\n    \n    ctx.scene.session.registrationForm.accountNumber = accountNumber;\n    await ctx.reply(ValidationMessages.BANK_NAME.prompt);\n    return ctx.wizard.next();\n});\n\n// Handle bank name\nconst handleBankName = new Composer<MyContext>();\nhandleBankName.on('text', async (ctx) => {\n    const bankName = ctx.message.text;\n    \n    if (!validateBankName(bankName)) {\n        await ctx.reply(ValidationMessages.BANK_NAME.error);\n       \n        return;\n    }\n    \n    ctx.scene.session.registrationForm.bankName = bankName;\n    await ctx.reply(ValidationMessages.BIK.prompt);\n    return ctx.wizard.next();\n});\n\n// Handle BIK\nconst handleBik = new Composer<MyContext>();\nhandleBik.on('text', async (ctx) => {\n    const bik = ctx.message.text;\n    \n    if (!validateField(bik, 'BIK')) {\n        await ctx.reply(ValidationMessages.BIK.error);\n        \n        return;\n    }\n    \n    ctx.scene.session.registrationForm.bik = bik;\n    await ctx.reply(ValidationMessages.CORR_ACCOUNT.prompt);\n    return ctx.wizard.next();\n});\n\n// Handle correspondent account\nconst handleCorrAccount = new Composer<MyContext>();\nhandleCorrAccount.on('text', async (ctx) => {\n    const corrAccount = ctx.message.text;\n    \n    if (!validateField(corrAccount, 'CORR_ACCOUNT')) {\n        await ctx.reply(ValidationMessages.CORR_ACCOUNT.error);\n        \n        return;\n    }\n    \n    ctx.scene.session.registrationForm.corrAccount = corrAccount;\n    await ctx.reply(ValidationMessages.BANK_INN.prompt);\n    return ctx.wizard.next();\n});\n\n// Handle bank INN\nconst handleBankInn = new Composer<MyContext>();\nhandleBankInn.on('text', async (ctx) => {\n    const bankInn = ctx.message.text;\n    \n    if (!validateField(bankInn, 'BANK_INN')) {\n        await ctx.reply(ValidationMessages.BANK_INN.error);\n        \n        return;\n    }\n    \n    ctx.scene.session.registrationForm.bankInn = bankInn;\n    await ctx.reply(ValidationMessages.BANK_KPP.prompt);\n    return ctx.wizard.next();\n});\n\n// Handle bank KPP\nconst handleBankKpp = new Composer<MyContext>();\nhandleBankKpp.on('text', async (ctx) => {\n    const bankKpp = ctx.message.text;\n    \n    if (!validateField(bankKpp, 'BANK_KPP')) {\n        await ctx.reply(ValidationMessages.BANK_KPP.error);\n        \n        return;\n    }\n    \n    ctx.scene.session.registrationForm.bankKpp = bankKpp;\n    await ctx.reply(ValidationMessages.PHONE.prompt);\n    return ctx.wizard.next();\n});\n\n// Handle phone\nconst handlePhone = new Composer<MyContext>();\nhandlePhone.on('text', async (ctx) => {\n    const phone = ctx.message.text;\n    \n    if (!validateField(phone, 'PHONE')) {\n        await ctx.reply(ValidationMessages.PHONE.error);\n        \n        return;\n    }\n    \n    ctx.scene.session.registrationForm.phone = phone;\n    await ctx.reply(ValidationMessages.EMAIL.prompt);\n    return ctx.wizard.next();\n});\n\n// Handle email\nconst handleEmail = new Composer<MyContext>();\nhandleEmail.on('text', async (ctx) => {\n    const email = ctx.message.text;\n    \n    if (!validateField(email, 'EMAIL')) {\n        await ctx.reply(ValidationMessages.EMAIL.error);\n        \n        return;\n    }\n    \n    ctx.scene.session.registrationForm.email = email;\n    await ctx.reply('У вас есть мед книжка?', Markup.inlineKeyboard([\n        [\n            Markup.button.callback('Да', 'med_book_yes'),\n            Markup.button.callback('Нет', 'med_book_no')\n        ]\n    ]));\n    return ctx.wizard.next();\n});\n\n// Handle med book response\nconst handleMedBook = new Composer<MyContext>();\nhandleMedBook.action('med_book_yes', async (ctx) => {\n    ctx.scene.session.registrationForm.hasMedBook = true;\n    await ctx.reply(ValidationMessages.MED_BOOK_EXPIRY.prompt);\n    return ctx.wizard.next();\n});\nhandleMedBook.action('med_book_no', async (ctx) => {\n    ctx.scene.session.registrationForm.hasMedBook = false;\n    return handleEducationCertQuestion(ctx);\n});\n\n// Handle med book expiry\nconst handleMedBookExpiry = new Composer<MyContext>();\nhandleMedBookExpiry.on('text', async (ctx) => {\n    const medBookExpiry = ctx.message.text;\n    \n    if (!validateField(medBookExpiry, 'MED_BOOK_EXPIRY')) {\n        await ctx.reply(ValidationMessages.MED_BOOK_EXPIRY.error);\n        \n        return;\n    }\n    \n    ctx.scene.session.registrationForm.medBookExpiry = medBookExpiry;\n    return handleEducationCertQuestion(ctx);\n});\n\n// Handle education certificate question\nconst handleEducationCertQuestion = async (ctx: MyContext) => {\n    await ctx.reply('У вас есть сертификат об образовании?', Markup.inlineKeyboard([\n        [\n            Markup.button.callback('Да', 'education_cert_yes'),\n            Markup.button.callback('Нет', 'education_cert_no')\n        ]\n    ]));\n    return ctx.wizard.next();\n};\n\n// Handle education certificate response\nconst handleEducationCert = new Composer<MyContext>();\nhandleEducationCert.action('education_cert_yes', async (ctx) => {\n    ctx.scene.session.registrationForm.hasEducationCert = true;\n    await ctx.reply('Отправьте, пожалуйста, фото сертификата');\n    return ctx.wizard.next();\n});\n\nhandleEducationCert.action('education_cert_no', async (ctx) => {\n    ctx.scene.session.registrationForm.hasEducationCert = false;\n    await ctx.reply(ValidationMessages.MASTER_PRICE.prompt);\n    // Пропускаем шаг handleEducationCertPhoto\n    ctx.wizard.selectStep(ctx.wizard.cursor + 2);\n    return;\n});\n\n// Handle education certificate photo\nconst handleEducationCertPhoto = new Composer<MyContext>();\nhandleEducationCertPhoto.on('photo', async (ctx) => {\n    // Сначала показываем, что фото получено\n    await ctx.reply('✅ Фото сертификата получено');\n    \n    const photo = ctx.message.photo[ctx.message.photo.length - 1];\n    ctx.scene.session.registrationForm.educationCertPhoto = photo.file_id;\n\n    // Делаем небольшую паузу перед следующим шагом\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    // Запрашиваем ставку\n    await ctx.reply(ValidationMessages.MASTER_PRICE.prompt);\n    return ctx.wizard.next();\n});\n\n// Добавляем обработку пропуска фото для тех, у кого нет сертификата\nhandleEducationCertPhoto.action('skip_photo', async (ctx) => {\n    await ctx.reply(ValidationMessages.MASTER_PRICE.prompt);\n    return ctx.wizard.next();\n});\n\n\nconst handleMasterPrice = new Composer<MyContext>();\nhandleMasterPrice.on('text', async (ctx) => {\n    const price = parseInt(ctx.message.text);\n    console.log('Received master price:', price);\n    \n    if (isNaN(price)) {\n        await ctx.reply(ValidationMessages.MASTER_PRICE.error);\n        return;\n    }\n\n    if (price <= 0 || price > 50) {\n        await ctx.reply(ValidationMessages.MASTER_PRICE.error);\n        return;\n    }\n\n    try {\n        ctx.scene.session.registrationForm.masterPrice = price;\n        console.log('Saved master price:', ctx.scene.session.registrationForm);\n\n        await ctx.reply(`✅ Установлена ставка: ${price}%`);\n\n        // Показываем выбор филиала\n        const keyboard = Markup.inlineKeyboard(\n            BRANCHES.map(branch => [\n                Markup.button.callback(branch.name, `select_branch_${branch.id}`)\n            ])\n        );\n\n        await ctx.reply('Выберите филиал, в котором будете работать:', keyboard);\n        return ctx.wizard.next();\n    } catch (error) {\n        console.error('Error in handleMasterPrice:', error);\n        await ctx.reply('Произошла ошибка. Пожалуйста, попробуйте ввести ставку снова.');\n    }\n});\n\n// Добавляем новый обработчик выбора филиала\nconst handleBranchSelection = new Composer<MyContext>();\nhandleBranchSelection.action(/select_branch_(.+)/, async (ctx) => {\n    const branchId = ctx.match[1];\n    const selectedBranch = BRANCHES.find(b => b.id === branchId);\n    \n    if (!selectedBranch) {\n        await ctx.reply('Ошибка выбора филиала. Пожалуйста, попробуйте снова.');\n        return;\n    }\n\n    try {\n        // Получаем Yclients ID филиала\n        const response = await laravelService.getBranchYclientsId(branchId);\n        \n        if (!response?.success || !response?.data?.yclients_id) {\n            throw new Error('Не удалось получить ID филиала');\n        }\n\n        ctx.scene.session.registrationForm.selectedBranch = selectedBranch;\n        ctx.scene.session.registrationForm.branch_yclients_id = response.data.yclients_id;\n        \n        await ctx.reply(\n            `✅ Выбран филиал: ${selectedBranch.name}\\n` +\n            `📍 Адрес: ${selectedBranch.address}\\n\\n` +\n            `Переходим к подготовке документов...`\n        );\n\n        // Переходим к генерации документов\n        await handleFinalStep(ctx);\n    } catch (error) {\n        console.error('Error getting branch yclients_id:', error);\n        await ctx.reply('Произошла ошибка при выборе филиала. Пожалуйста, попробуйте снова.');\n    }\n});\n\n// Обрабатываем другие типы сообщений\nhandleMasterPrice.on('message', async (ctx) => {\n    console.log('Received non-text message in master price handler');\n    await ctx.reply(ValidationMessages.MASTER_PRICE.error);\n});\n\n\n\n// Создаем улучшенное хранилище для групп документов\nconst documentGroups = new Map<string, {\n    files: Array<{file_id: string, file_name: string}>,\n    timer?: NodeJS.Timeout,\n    processed: boolean\n}>();\n\n// Функция логирования\nfunction logDebug(message: string, data?: any) {\n    console.log(`[${new Date().toISOString()}] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n}\n\nconst handleSignedDocuments = new Composer<MyContext>();\n\nhandleSignedDocuments.on('document', async (ctx) => {\n    console.log('DEBUG: Document handler triggered', {\n        sessionData: ctx.scene?.session,\n        registrationId: ctx.scene?.session?.registrationId\n    });\n    const message = ctx.message;\n    const mediaGroupId = message.media_group_id;\n    const document = message.document;\n\n    logDebug('Получен новый документ:', {\n        mediaGroupId,\n        fileName: document.file_name,\n        fileId: document.file_id,\n        fileSize: document.file_size,\n        registrationId: ctx.scene.session.registrationId\n    });\n\n    // Проверяем формат файла\n    const fileName = document.file_name?.toLowerCase();\n    if (!fileName?.endsWith('.pdf') && !fileName?.endsWith('.docx')) {\n        logDebug('Некорректный формат файла:', { fileName });\n        await ctx.reply('Пожалуйста, отправляйте документы только в форматах PDF или DOCX');\n        return;\n    }\n\n    if (!mediaGroupId) {\n        logDebug('Документ отправлен не в группе');\n        await ctx.reply('Пожалуйста, отправьте все документы одним сообщением, выбрав их все сразу.');\n        return;\n    }\n\n    // Получаем или создаем группу документов\n    let group = documentGroups.get(mediaGroupId);\n    if (!group) {\n        logDebug('Создаем новую группу документов:', { mediaGroupId });\n        group = {\n            files: [],\n            processed: false\n        };\n        documentGroups.set(mediaGroupId, group);\n    }\n\n    // Добавляем документ в группу\n    group.files.push({\n        file_id: document.file_id,\n        file_name: document.file_name\n    });\n    logDebug('Добавлен документ в группу:', {\n        mediaGroupId,\n        totalFiles: group.files.length,\n        currentFile: document.file_name\n    });\n\n    // Очищаем предыдущий таймер если он есть\n    if (group.timer) {\n        clearTimeout(group.timer);\n    }\n\n    // Устанавливаем новый таймер для обработки группы\n    group.timer = setTimeout(async () => {\n        logDebug('Запуск обработки группы документов:', {\n            mediaGroupId,\n            filesCount: group.files.length\n        });\n\n        if (group.processed) {\n            logDebug('Группа уже была обработана:', { mediaGroupId });\n            return;\n        }\n\n        try {\n            group.processed = true;\n\n            // Проверяем наличие registrationId\n            const registrationId = ctx.scene.session.registrationId;\n            if (!registrationId) {\n                throw new Error('Отсутствует registrationId в сессии');\n            }\n\n            logDebug('Начинаем загрузку файлов:', {\n                mediaGroupId,\n                registrationId,\n                filesCount: group.files.length\n            });\n\n            // Загружаем и подготавливаем все документы\n            const uploadPromises = group.files.map(async (doc) => {\n                logDebug('Получаем информацию о файле от Telegram:', {\n                    fileId: doc.file_id,\n                    fileName: doc.file_name\n                });\n\n                const file = await ctx.telegram.getFile(doc.file_id);\n                const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN_MASTER}/${file.file_path}`;\n\n                logDebug('Получен URL файла:', {\n                    fileName: doc.file_name,\n                    fileUrl: fileUrl\n                });\n\n                return {\n                    url: fileUrl,\n                    name: doc.file_name\n                };\n            });\n\n            const uploadedFiles = await Promise.all(uploadPromises);\n            logDebug('Все файлы подготовлены к загрузке:', {\n                filesCount: uploadedFiles.length,\n                files: uploadedFiles.map(f => f.name)\n            });\n\n            // Отправляем документы в API\n            logDebug('Отправляем документы в API:', {\n                registrationId,\n                filesCount: uploadedFiles.length\n            });\n\n            const response = await laravelService.uploadSignedDocuments(\n                registrationId,\n                uploadedFiles\n            );\n\n            logDebug('Получен ответ от API:', { response });\n\n            await ctx.reply(\n                '✅ Документы успешно загружены!\\n\\n' +\n                'Теперь вы можете начать процесс трудоустройства.\\n' +\n                'Нажмите кнопку ниже:',\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('🚀 Устроиться на работу', `start_employment_${registrationId}`)\n                ]])\n            );\n            \n            // Очищаем группу\n            documentGroups.delete(mediaGroupId);\n            logDebug('Группа документов успешно обработана и удалена:', { mediaGroupId });\n            \n            return ctx.scene.leave();\n        } catch (error) {\n            logDebug('Ошибка при обработке группы документов:', {\n                mediaGroupId,\n                error: error.message,\n                stack: error.stack\n            });\n\n            await ctx.reply('Произошла ошибка при обработке документов. Пожалуйста, попробуйте еще раз или обратитесь в поддержку.');\n            \n            // Очищаем группу в случае ошибки\n            documentGroups.delete(mediaGroupId);\n        }\n    }, 2000); // Увеличиваем время ожидания до 2 секунд\n});\n\n// Handle final step\n// В handleFinalStep добавим:\nconst handleFinalStep = async (ctx: MyContext) => {\n    try {\n        const selectedBranch = ctx.scene.session.registrationForm.selectedBranch;\n        if (!selectedBranch) {\n            throw new Error('Не выбран филиал');\n        }\n\n        const userId = ctx.from?.id;\n        console.log('Getting user ID from context:', userId);\n\n        if (!userId) {\n            console.error('No user ID found in context');\n            return;\n        }\n\n        const registrationData = {\n            ...ctx.scene.session.registrationForm,\n            work_address: selectedBranch.address,\n            telegram_id: userId.toString(),\n            branch_name: selectedBranch.name,\n            branch_id: selectedBranch.id,\n            branch_yclients_id: ctx.scene.session.registrationForm.branch_yclients_id\n        };\n\n        console.log('Full registration data being sent:', registrationData);\n        \n        const registrationResponse = await laravelService.submitRegistration(registrationData);\n        console.log('Registration submitted successfully:', registrationResponse);\n        \n        const registrationId = registrationResponse.data.id;\n        ctx.scene.session.registrationId = registrationId;\n        \n        if (!registrationId) {\n            throw new Error('Registration ID not found in response');\n        }\n\n        await ctx.reply(\n            '✅ Ваша заявка успешно создана!\\n\\n' +\n            'Она будет рассмотрена в ближайшее время.\\n' +\n            'После одобрения вам придут документы для подписания.\\n\\n' +\n            'Пожалуйста, ожидайте.'\n        );\n\n        \n\n    } catch (error) {\n        console.error('Error in handleFinalStep:', error);\n        \n        let errorMessage = 'Произошла ошибка при обработке данных. ';\n        \n        if (error.response?.status === 422) {\n            const validationErrors = error.response.data.errors;\n            if (validationErrors.email) {\n                errorMessage += 'Этот email уже зарегистрирован в системе. Пожалуйста, используйте другой email.';\n            } else {\n                errorMessage += 'Пожалуйста, проверьте правильность введенных данных.';\n            }\n        } else {\n            errorMessage += 'Пожалуйста, попробуйте позже.';\n        }\n        \n        await ctx.reply(errorMessage);\n    }\n};\n\n\nexport const registrationWizard = new Scenes.WizardScene<MyContext>(\n    'registration_wizard',\n    showWelcome,\n    checkSelfEmployment,\n    handleSelfEmployment,\n    handleFullName,\n    handleBirthDate,\n    handlePassport,\n    handleIssuedBy,\n    handleIssueDate,\n    handleDivisionCode,\n    handleAddress,\n    handleInn,\n    handleAccountNumber,\n    handleBankName,\n    handleBik,\n    handleCorrAccount,\n    handleBankInn,\n    handleBankKpp,\n    handlePhone,\n    handleEmail,\n    handleMedBook,\n    handleMedBookExpiry,\n    handleEducationCert,\n    handleEducationCertPhoto,\n    handleMasterPrice, // Новый шаг\n    handleBranchSelection,\n    handleFinalStep,\n    // Исправляем этап ожидания документов\n    async (ctx) => {\n        // Явно возвращаем Promise<void>\n        await ctx.reply('Ожидаю подписанные документы...');\n        return;\n    }\n);\n\nregistrationWizard.action('cancel', async (ctx) => {\n    await ctx.reply(\n        '❌ Регистрация отменена\\n\\n' +\n        'Вы можете начать заново, когда будете готовы',\n        Markup.inlineKeyboard([[\n            Markup.button.callback('Начать заново', 'start_registration')\n        ]])\n    );\n    return ctx.scene.leave();\n});\n\n// Добавляем обработчик документов через middleware\nregistrationWizard.command('restart', async (ctx) => {\n    await ctx.scene.leave();\n    await ctx.scene.enter('registration_wizard');\n});\n\n// Регистрируем обработчик документов на уровне сцены\nregistrationWizard.on('document', handleSignedDocuments);\n\n// Добавляем отладочный middleware\nregistrationWizard.use(async (ctx, next) => {\n    console.log('Scene middleware triggered:', {\n        step: ctx.wizard?.cursor,\n        sessionData: ctx.scene?.session,\n        updateType: ctx.updateType\n    });\n    return next();\n});\n\n// В registration_wizard добавляем обработчик:\n\nregistrationWizard.action(/start_employment_(\\d+)/, async (ctx) => {\n    try {\n        await ctx.answerCbQuery('⏳ Отправляем приглашение...');\n        const registrationId = ctx.match[1]; // Получаем ID из callback_data\n\n        const result = await laravelService.sendEmploymentInvite(registrationId);\n        \n        if (result.success) {\n            await ctx.editMessageText(\n                \"📱 Вам отправлено СМС-приглашение для регистрации в системе.\\n\\n\" +\n                \"❗️ Пожалуйста:\\n\" +\n                \"1. Проверьте SMS\\n\" +\n                \"2. Перейдите по ссылке\\n\" +\n                \"3. Завершите регистрацию в системе\\n\\n\" +\n                \"После регистрации нажмите кнопку ниже:\",\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('✅ Я зарегистрировался', `complete_registration_${registrationId}`)\n                ]])\n            );\n        } else {\n            throw new Error(result.message || 'Failed to send invite');\n        }\n    } catch (error) {\n        console.error('Error starting employment:', error);\n        await ctx.reply(\n            '❌ Произошла ошибка при отправке приглашения.\\n' +\n            'Пожалуйста, попробуйте позже или обратитесь к администратору.'\n        );\n    }\n});\n\nregistrationWizard.action(/^complete_registration_(\\d+)$/, async (ctx) => {\n    try {\n        const regId = ctx.match[1];\n        await ctx.answerCbQuery('⏳ Создаем профиль мастера...');\n\n        const result = await laravelService.createStaffProfile(regId); // Здесь regId уже string\n        \n        if (result.success) {\n            await ctx.editMessageText(\n                \"🎉 Поздравляем!\\n\\n\" +\n                \"Ваш профиль мастера успешно создан.\\n\" +\n                \"Добро пожаловать в команду CherryTown! ✨\\n\\n\" +\n                \"Теперь вы можете приступать к работе.\",\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('📱 В главное меню', 'mainmenu')\n                ]])\n            );\n        } else {\n            throw new Error(result.message || 'Failed to create profile');\n        }\n    } catch (error) {\n        console.error('Error completing registration:', error);\n        const currentRegId = ctx.match ? ctx.match[1] : ''; // Безопасное получение ID\n        await ctx.reply(\n            '❌ Произошла ошибка при создании профиля.\\n' +\n            'Пожалуйста, попробуйте позже или обратитесь к администратору.',\n            Markup.inlineKeyboard([[\n                Markup.button.callback('🔄 Попробовать снова', `complete_registration_${currentRegId}`)\n            ]])\n        );\n    }\n});","import { Scenes, Markup } from 'telegraf';\nimport { MyContext, ScheduleUpdateData } from '../../../types/MyContext';\nimport { StaffMemberWithSchedule } from '../../../types/MyContext';\nimport laravelService from '../../../../services/laravelService';\n\nexport const scheduleManagementScene = new Scenes.BaseScene<MyContext>('schedule_management');\n\n// Форматирование даты для API\nconst formatDateForApi = (date: string): string => {\n    const [day, month, year] = date.split('.');\n    return `${year}-${month}-${day}`;\n};\n\n// Форматирование даты для отображения\nconst formatDateForDisplay = (date: string): string => {\n    const [year, month, day] = date.split('-');\n    const dateObj = new Date(Number(year), Number(month) - 1, Number(day));\n    const days = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'];\n    return `${day}.${month} (${days[dateObj.getDay()]})`;\n};\n\n// Проверка формата даты\nconst isValidDateFormat = (date: string): boolean => {\n    const dateRegex = /^\\d{2}\\.\\d{2}\\.\\d{4}$/;\n    return dateRegex.test(date);\n};\n\n// Проверка корректности даты\nconst isValidDate = (dateStr: string): boolean => {\n    if (!isValidDateFormat(dateStr)) return false;\n    \n    const [day, month, year] = dateStr.split('.').map(Number);\n    const date = new Date(year, month - 1, day);\n    \n    return date.getDate() === day && \n           date.getMonth() === month - 1 && \n           date.getFullYear() === year;\n};\n\n// Проверка что дата не в прошлом\nconst isDateInFuture = (dateStr: string): boolean => {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    const [day, month, year] = dateStr.split('.').map(Number);\n    const date = new Date(year, month - 1, day);\n    \n    return date >= today;\n};\n\n// Вход в сцену\nscheduleManagementScene.enter(async (ctx: MyContext) => {\n    try {\n        ctx.session.scheduleState = {\n            step: 'select_period'\n        };\n\n        await ctx.reply(\n            'Для изменения графика работы сначала выберите период:\\n\\n' +\n            '⚠️ Убедитесь, что замена согласована с заменяющим мастером.',\n            Markup.inlineKeyboard([\n                [Markup.button.callback('Один день', 'period_single')],\n                [Markup.button.callback('Период дат', 'period_range')],\n                [Markup.button.callback('👈 Вернуться в главное меню', 'mainmenu')]\n            ])\n        );\n    } catch (error) {\n        console.error('Error in scheduleManagementScene.enter:', error);\n        await ctx.reply('Произошла ошибка. Попробуйте позже.');\n    }\n});\n\n// Обработка выбора периода\nscheduleManagementScene.action(/^period_(single|range)$/, async (ctx) => {\n    try {\n        await ctx.answerCbQuery();\n        const periodType = ctx.match[1] as 'single' | 'range';\n        \n        ctx.session.scheduleState = {\n            step: 'enter_date',\n            periodType\n        };\n\n        if (periodType === 'single') {\n            await ctx.editMessageText(\n                'Введите дату для замены в формате ДД.ММ.ГГГГ (например, 25.03.2024):',\n                Markup.inlineKeyboard([[Markup.button.callback('👈 Назад', 'back_to_period')]])\n            );\n        } else {\n            await ctx.editMessageText(\n                'Введите начальную дату периода в формате ДД.ММ.ГГГГ:',\n                Markup.inlineKeyboard([[Markup.button.callback('👈 Назад', 'back_to_period')]])\n            );\n        }\n    } catch (error) {\n        console.error('Error in period selection:', error);\n        await ctx.reply('Произошла ошибка. Попробуйте позже.');\n    }\n});\n\n// Обработка ввода даты/дат\nscheduleManagementScene.on('text', async (ctx) => {\n    try {\n        if (!ctx.session.scheduleState) return;\n        const state = ctx.session.scheduleState;\n        const text = ctx.message.text;\n\n        if (state.step === 'enter_date') {\n            if (!isValidDate(text)) {\n                await ctx.reply(\n                    'Неверный формат даты. Пожалуйста, используйте формат ДД.ММ.ГГГГ:',\n                    Markup.inlineKeyboard([[Markup.button.callback('👈 Назад', 'back_to_period')]])\n                );\n                return;\n            }\n\n            if (!isDateInFuture(text)) {\n                await ctx.reply(\n                    'Нельзя выбрать дату в прошлом. Пожалуйста, введите будущую дату:',\n                    Markup.inlineKeyboard([[Markup.button.callback('👈 Назад', 'back_to_period')]])\n                );\n                return;\n            }\n\n            if (state.periodType === 'single') {\n                state.startDate = formatDateForApi(text);\n                state.endDate = state.startDate;\n                await showMastersList(ctx);\n            } else {\n                if (!state.startDate) {\n                    state.startDate = formatDateForApi(text);\n                    await ctx.reply(\n                        'Теперь введите конечную дату периода в формате ДД.ММ.ГГГГ:',\n                        Markup.inlineKeyboard([[Markup.button.callback('👈 Назад', 'back_to_period')]])\n                    );\n                } else {\n                    const endDate = formatDateForApi(text);\n                    if (endDate < state.startDate) {\n                        await ctx.reply(\n                            'Конечная дата не может быть раньше начальной. Введите конечную дату снова:',\n                            Markup.inlineKeyboard([[Markup.button.callback('👈 Назад', 'back_to_period')]])\n                        );\n                        return;\n                    }\n                    state.endDate = endDate;\n                    await showMastersList(ctx);\n                }\n            }\n        }\n    } catch (error) {\n        console.error('Error in text handler:', error);\n        await ctx.reply('Произошла ошибка. Попробуйте позже.');\n    }\n});\n\n\n\nasync function showMastersList(ctx: MyContext) {\n    try {\n        if (!ctx.session.scheduleState?.startDate || !ctx.session.scheduleState?.endDate) {\n            await ctx.reply('Ошибка: не выбраны даты');\n            return;\n        }\n\n        // Показываем начало загрузки\n        const loadingMessage = await ctx.reply(\n            '⌛ Подбираем доступных мастеров...',\n            Markup.inlineKeyboard([[\n                Markup.button.callback('Отменить', 'back_to_period')\n            ]])\n        );\n\n        // Получаем данные текущего мастера\n        const masterInfo = await laravelService.getStaffSchedule(\n            ctx.from.id,\n            ctx.session.scheduleState.startDate,\n            ctx.session.scheduleState.endDate,\n            true\n        );\n\n        if (!masterInfo?.data?.[0]) {\n            await ctx.telegram.deleteMessage(ctx.chat!.id, loadingMessage.message_id);\n            await ctx.reply('Не удалось получить информацию о мастере');\n            return;\n        }\n\n        // Получаем список мастеров филиала\n        const allMastersResponse = await laravelService.getFilialStaff(\n            ctx.from.id,\n            ctx.session.scheduleState.startDate,\n            ctx.session.scheduleState.endDate,\n            true\n        );\n\n        // Удаляем сообщение о загрузке\n        await ctx.telegram.deleteMessage(ctx.chat!.id, loadingMessage.message_id);\n\n        if (!allMastersResponse?.success || !allMastersResponse.data) {\n            await ctx.reply(\n                'Не удалось получить список мастеров',\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('👈 Назад', 'back_to_period')\n                ]])\n            );\n            return;\n        }\n\n        const currentMasterId = masterInfo.data[0].staff_id;\n\n        // Фильтруем список - исключаем текущего мастера\n        const availableMasters = allMastersResponse.data.filter(master => \n            master.id !== currentMasterId\n        );\n\n        if (!availableMasters.length) {\n            await ctx.reply('Нет доступных мастеров для замены в филиале');\n            return;\n        }\n\n        // Создаем кнопки выбора мастеров\n        const buttons = availableMasters.map(master => {\n            const buttonText = master.name \n                ? `${master.name}${master.specialization ? ` (${master.specialization})` : ''}`\n                : `Мастер ${master.id}`;\n\n            return [\n                Markup.button.callback(\n                    buttonText,\n                    `select_master_${master.id}`\n                )\n            ];\n        });\n\n        buttons.push([Markup.button.callback('👈 Назад', 'back_to_period')]);\n\n        const dateRange = ctx.session.scheduleState.periodType === 'single'\n            ? formatDateForDisplay(ctx.session.scheduleState.startDate)\n            : `${formatDateForDisplay(ctx.session.scheduleState.startDate)} - ${formatDateForDisplay(ctx.session.scheduleState.endDate)}`;\n\n        ctx.session.scheduleState = {\n            ...ctx.session.scheduleState,\n            step: 'select_master',\n            masters: availableMasters,\n            currentMasterId: currentMasterId\n        };\n\n        await ctx.reply(\n            `Выберите мастера для замены на ${dateRange}:`,\n            Markup.inlineKeyboard(buttons)\n        );\n\n    } catch (error) {\n        console.error('Error in showMastersList:', error);\n        await ctx.reply(\n            '😕 Что-то пошло не так, попробуйте еще раз',\n            Markup.inlineKeyboard([[\n                Markup.button.callback('👈 Назад', 'back_to_period')\n            ]])\n        );\n    }\n}\n\n// Обработка выбора мастера\nscheduleManagementScene.action(/^select_master_(\\d+)$/, async (ctx) => {\n    try {\n        await ctx.answerCbQuery();\n        \n        if (!ctx.session.scheduleState?.startDate || \n            !ctx.session.scheduleState?.endDate || \n            !ctx.session.scheduleState?.currentMasterId) {\n            await ctx.reply('Ошибка: недостаточно данных для замены');\n            return;\n        }\n \n        const replacementMasterId = parseInt(ctx.match[1]);\n        const currentMasterId = ctx.session.scheduleState.currentMasterId;\n \n        // Показываем начало процесса\n        await ctx.editMessageText(\n            '⌛ Подготавливаем данные для замены...',\n            Markup.inlineKeyboard([[\n                Markup.button.callback('Отменить', 'back_to_period')\n            ]])\n        );\n \n        // Получаем расписание текущего мастера для текущего дня\n        const currentMasterSchedule = await laravelService.getStaffSchedule(\n            ctx.from.id,\n            ctx.session.scheduleState.startDate,\n            ctx.session.scheduleState.startDate,\n            true\n        );\n        \n        let masterScheduleData = null;\n        if (currentMasterSchedule?.data) {\n            masterScheduleData = currentMasterSchedule.data.find(\n                schedule => schedule.staff_id === currentMasterId\n            );\n        }\n \n        // Проверяем существование slots\n        if (!masterScheduleData?.slots || !Array.isArray(masterScheduleData.slots) || masterScheduleData.slots.length === 0) {\n            await ctx.editMessageText(\n                '🤔 Не нашли график работы на выбранную дату',\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('👈 Назад', 'back_to_period')\n                ]])\n            );\n            return;\n        }\n \n        // Готовим данные для обновления\n        const scheduleData: ScheduleUpdateData = {\n            schedules_to_set: [],\n            schedules_to_delete: []\n        };\n \n        // Создаем массив всех дат диапазона\n        const start = new Date(ctx.session.scheduleState.startDate);\n        const end = new Date(ctx.session.scheduleState.endDate);\n \n        // Обновляем статус для периода дат\n        if (start.getTime() !== end.getTime()) {\n            await ctx.editMessageText(\n                '⌛ Проверяем графики за выбранный период...',\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('Отменить', 'back_to_period')\n                ]])\n            );\n        }\n \n        for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {\n            const date = d.toISOString().split('T')[0];\n            \n            const daySchedule = await laravelService.getStaffSchedule(\n                ctx.from.id,\n                date,\n                date,\n                true\n            );\n \n            const masterDaySchedule = daySchedule?.data?.find(\n                schedule => schedule.staff_id === currentMasterId\n            );\n \n            if (masterDaySchedule?.slots?.length) {\n                scheduleData.schedules_to_set.push({\n                    staff_id: replacementMasterId,\n                    date,\n                    slots: masterDaySchedule.slots\n                });\n                \n                scheduleData.schedules_to_delete.push({\n                    staff_id: currentMasterId,\n                    date\n                });\n            }\n        }\n \n        // Проверяем наличие слотов в готовых данных\n        if (!scheduleData.schedules_to_set[0]?.slots?.length) {\n            await ctx.editMessageText(\n                '😕 Не нашли рабочих смен в выбранные дни',\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('👈 Назад', 'back_to_period')\n                ]])\n            );\n            return;\n        }\n \n        const selectedMaster = ctx.session.scheduleState.masters?.find(\n            m => m.id === replacementMasterId\n        );\n        \n        if (!selectedMaster?.name) {\n            await ctx.editMessageText(\n                '😕 Не удалось найти информацию о выбранном мастере',\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('👈 Назад', 'back_to_period')\n                ]])\n            );\n            return;\n        }\n \n        const dateRange = ctx.session.scheduleState.periodType === 'single'\n            ? formatDateForDisplay(ctx.session.scheduleState.startDate)\n            : `${formatDateForDisplay(ctx.session.scheduleState.startDate)} - ${formatDateForDisplay(ctx.session.scheduleState.endDate)}`;\n \n        ctx.session.scheduleState = {\n            ...ctx.session.scheduleState,\n            updateData: scheduleData\n        };\n \n        await ctx.editMessageText(\n            `📋 Подтвердите замену:\\n\\n` +\n            `🗓 Период: ${dateRange}\\n` +\n            `👤 Заменяющий мастер: ${selectedMaster.name}\\n\\n` +\n            `⚠️ Вы действительно хотите передать свой график работы этому мастеру?`,\n            Markup.inlineKeyboard([\n                [Markup.button.callback('✅ Да, подтверждаю', `confirm_replacement_${replacementMasterId}`)],\n                [Markup.button.callback('❌ Отмена', 'back_to_period')]\n            ])\n        );\n \n    } catch (error) {\n        console.error('Error in master selection:', error);\n        await ctx.editMessageText(\n            '😕 Что-то пошло не так\\n' +\n            'Попробуйте выбрать другой период или мастера',\n            Markup.inlineKeyboard([[\n                Markup.button.callback('👈 Назад', 'back_to_period')\n            ]])\n        );\n    }\n });\n\n// Обработчик подтверждения замены\nscheduleManagementScene.action(/^confirm_replacement_(\\d+)$/, async (ctx) => {\n    try {\n        await ctx.answerCbQuery();\n \n        const scheduleState = ctx.session.scheduleState;\n        if (!scheduleState?.updateData) {\n            await ctx.editMessageText(\n                '😕 Что-то пошло не так, попробуйте начать сначала',\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('👈 Назад', 'back_to_period')\n                ]])\n            );\n            return;\n        }\n \n        // Показываем статус обновления\n        await ctx.editMessageText(\n            '⌛ Обновляем график работы...',\n            Markup.inlineKeyboard([[\n                Markup.button.callback('Отменить', 'back_to_period')\n            ]])\n        );\n \n        // Форматируем данные для API\n        const formattedData = {\n            schedules_to_set: scheduleState.updateData.schedules_to_set.map(schedule => {\n                if ('dates' in schedule) {\n                    const dates = (schedule as any).dates;\n                    return {\n                        staff_id: schedule.staff_id,\n                        date: dates[0].date,\n                        slots: dates[0].slots\n                    };\n                }\n                return schedule;\n            }),\n            schedules_to_delete: scheduleState.updateData.schedules_to_delete.map(schedule => {\n                if ('dates' in schedule) {\n                    const dates = (schedule as any).dates;\n                    return {\n                        staff_id: schedule.staff_id,\n                        date: dates[0]\n                    };\n                }\n                return schedule;\n            })\n        };\n \n        // Отправляем запрос на обновление\n        const result = await laravelService.updateStaffSchedule(\n            ctx.from.id,\n            scheduleState.startDate!,\n            formattedData,\n            true\n        );\n \n        if (result?.success) {\n            const dateRange = ctx.session.scheduleState.periodType === 'single'\n                ? formatDateForDisplay(ctx.session.scheduleState.startDate)\n                : `${formatDateForDisplay(ctx.session.scheduleState.startDate)} - ${formatDateForDisplay(ctx.session.scheduleState.endDate)}`;\n \n            // Показываем успешное завершение\n            await ctx.editMessageText(\n                `✨ Отлично! Замена оформлена\\n\\n` +\n                `🗓 Период: ${dateRange}\\n\\n` +\n                `График работы успешно передан заменяющему мастеру`,\n                Markup.inlineKeyboard([[\n                    Markup.button.callback('👈 Вернуться в меню', 'mainmenu')\n                ]])\n            );\n        } else {\n            throw new Error('Failed to update schedule');\n        }\n    } catch (error) {\n        console.error('Error in replacement confirmation:', error);\n        await ctx.editMessageText(\n            '😕 Не удалось обновить график\\n' +\n            'Возможно, выбранный мастер уже работает в это время',\n            Markup.inlineKeyboard([[\n                Markup.button.callback('👈 Попробовать снова', 'back_to_period')\n            ]])\n        );\n    }\n });\n\n// Обработка кнопки \"Назад\"\nscheduleManagementScene.action('back_to_period', async (ctx) => {\n    try {\n        await ctx.answerCbQuery();\n        \n        ctx.session.scheduleState = {\n            step: 'select_period'\n        };\n\n        await ctx.editMessageText(\n            'Для изменения графика работы сначала выберите период:\\n\\n' +\n            '⚠️ Убедитесь, что замена согласована с заменяющим мастером.',\n            Markup.inlineKeyboard([\n                [Markup.button.callback('Один день', 'period_single')],\n                [Markup.button.callback('Период дат', 'period_range')],\n                [Markup.button.callback('👈 Вернуться в главное меню', 'mainmenu')]\n            ])\n        );\n    } catch (error) {\n        console.error('Error in back_to_period:', error);\n        await ctx.reply('Произошла ошибка. Попробуйте позже.');\n    }\n});\n\n// Возврат в главное меню\nscheduleManagementScene.action('mainmenu', async (ctx) => {\n    try {\n        await ctx.answerCbQuery('🏠 Главное меню');\n        return ctx.scene.enter('main');\n    } catch (error) {\n        console.error('Error in mainmenu:', error);\n        await ctx.reply('Произошла ошибка. Попробуйте позже.');\n    }\n});\n\nexport default scheduleManagementScene;","import {Markup} from \"telegraf\";\nimport {MyContext} from \"../../../types/MyContext\";\nimport {code, fmt} from \"telegraf/format\";\nimport logger from \"../../../../utils/logger/loggerTelegram\";\nimport LaravelService from \"../../../../services/laravelService\";\n\nconst defaultButtons = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nconst defaultButtonsMenuOnly = [\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nexport const enterHandler = async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n    const message = fmt`Создать уведомление\n\nВведите данные по уведомлению: \n${code('Название уведомления')}`;\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Введите название уведомления');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n    return ctx.wizard.next();\n}\n\nexport const promptForSum = async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Пропустить', 'notification_skip_sum')],\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`Какая сумма для оплаты?\n(если суммы нет, то пропустите это поле)`;\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Введите сумму для оплаты');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n    return ctx.wizard.next();\n}\n\nexport const promptForDateTime = async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`Введите дату и время уведомления в формате:\ndd.mm.yyyy hh:mm`;\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Введите дату и время уведомления');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n    return ctx.wizard.next();\n}\n\nexport const promptForNotificationType = async (ctx: MyContext) => {\n    //keyboard one time or constant notification\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Одноразовое уведомление', 'notification_one_time')],\n        [Markup.button.callback('Постоянное уведомление', 'notification_constant')],\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`Уведомление разовое или постоянное?`;\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Выберите тип уведомления');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n    return ctx.wizard.next();\n}\n\nexport const sendSuccessMessage = async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Создать еще', 'create_notification')],\n        [Markup.button.callback('Все уведомления', 'active_notifications')],\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`Уведомление создано\n${code('Название уведомления')}: ${ctx.scene.session.notificationForm.name}\n${code('Сумма для оплаты')}: ${ctx.scene.session.notificationForm.sum}\n${code('Дата и время уведомления')}: ${ctx.scene.session.notificationForm.dateTime}\n${code('Тип уведомления')}: ${ctx.scene.session.notificationForm.type}`;\n\n    try {\n        await LaravelService.createNotificationByTelegramId(ctx.from.id, ctx.scene.session.notificationForm);\n    } catch (error) {\n        logger.error('Error creating notification:', error);\n        await ctx.reply('Произошла ошибка при создании уведомления. Пожалуйста, попробуйте позже.', Markup.inlineKeyboard(defaultButtonsMenuOnly));\n    }\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Уведомление создано');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n}","import {Composer, Markup, Scenes} from 'telegraf';\nimport {MyContext} from '../../../types/MyContext';\n\nimport {\n    enterHandler,\n    promptForDateTime,\n    promptForNotificationType,\n    promptForSum,\n    sendSuccessMessage\n} from \"./createNotificationActions\";\nimport {fmt} from \"telegraf/format\";\nimport {sendOrderConfirmation} from \"../actions/autoBookingActions\";\n\nconst noKeyboard = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nconst handleNameInput = new Composer<MyContext>();\n\nhandleNameInput.on('text', async (ctx) => {\n    const name = ctx.message.text;\n    ctx.scene.session.notificationForm.name = name;\n\n    await promptForSum(ctx);\n});\n\nconst handleSumInput = new Composer<MyContext>();\n\nhandleSumInput.on('text', async (ctx) => {\n    const sum = ctx.message.text;\n    ctx.scene.session.notificationForm.sum = sum;\n    await promptForDateTime(ctx);\n});\n\nhandleSumInput.action('notification_skip_sum', async (ctx) => {\n    ctx.scene.session.notificationForm.sum = null;\n    await promptForDateTime(ctx);\n});\n\nconst handleDateTimeInput = new Composer<MyContext>();\n\nhandleDateTimeInput.on('text', async (ctx) => {\n    //date in format dd.mm.yyyy hh:mm\n    const input = ctx.message.text;\n\n    // Regular expression to match dd.mm.yyyy hh:mm\n    const dateRegex = /^(\\d{2})\\.(\\d{2})\\.(\\d{4}) (\\d{2}):(\\d{2})$/;\n\n    // Find dates that do not match the regex\n    const invalidFormatDate = !dateRegex.test(input);\n\n    if (invalidFormatDate) {\n        const errorMessage = fmt`❌ Некорректный формат даты: ${invalidFormatDate}.\nПожалуйста, введите дату в формате ГГГГ.ММ.ДД. Например:\n• 2025.08.10 12:00`;\n\n        // Send the error message with the default navigation buttons\n        await ctx.reply(errorMessage, {\n            ...Markup.inlineKeyboard(noKeyboard),\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n\n        return; // Stay on the current step\n    }\n\n    // If all dates are valid, save them to the session\n    ctx.scene.session.notificationForm.dateTime = ctx.message.text;\n    await promptForNotificationType(ctx);\n});\n\n\nconst handleNotificationTypeInput = new Composer<MyContext>();\nhandleNotificationTypeInput.action('notification_one_time', async (ctx) => {\n    ctx.scene.session.notificationForm.type = 'one_time';\n    await sendSuccessMessage(ctx);\n});\nhandleNotificationTypeInput.action('notification_constant', async (ctx) => {\n    ctx.scene.session.notificationForm.type = 'constant';\n    await sendSuccessMessage(ctx);\n});\n\nexport const createNotifictationScene = new Scenes.WizardScene<MyContext>(\n    'create_notification',\n    // Step 1: Prompt to enter name\n    async (ctx) => {\n        ctx.scene.session.notificationForm = {\n            name: null,\n            sum: null,\n            dateTime: null,\n            type: null,\n        }\n       await enterHandler(ctx);\n    },\n    // Step 2: Save name and prompt to enter sum\n    handleNameInput,\n    // Step 3: Save sum and prompt to enter date\n    handleSumInput,\n    // Step 4: Save date and prompt to enter type\n    handleDateTimeInput,\n    // Step 5: Save type and sucecss\n    handleNotificationTypeInput,\n);\n\ncreateNotifictationScene.command('start', async (ctx) => {\n    await ctx.scene.enter('admin_main');\n});\ncreateNotifictationScene.action('mainmenu', async (ctx) => {\n    await ctx.scene.enter('admin_main');\n});\n","import {Markup} from \"telegraf\";\nimport {MyContext} from \"../../../types/MyContext\";\nimport {bold, code, fmt} from \"telegraf/format\";\nimport logger from \"../../../../utils/logger/loggerTelegram\";\nimport LaravelService from \"../../../../services/laravelService\";\n\nconst defaultButtons = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nconst defaultButtonsMenuOnly = [\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nexport const enterHandler = async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Пропустить', 'notification_skip_name')],\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n\n    ctx.scene.session.notificationForm = ctx.session.notificationForm\n\n    const message = fmt`Редактировать уведомление\n\n${bold('Текущее название уведомления: ')} ${code(ctx.session.notificationForm.name)}\n\nВведите новое название уведомления или нажмите пропустить\n`;\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Введите название уведомления');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n    return ctx.wizard.next();\n}\n\nexport const promptForSum = async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Пропустить', 'notification_skip_sum')],\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`Какая сумма для оплаты?\n\n${bold('Текущая сумма оплаты: ')} ${code(ctx.session.notificationForm.sum)}\n\nВведите новую сумму для оплаты или нажмите пропустить\n`;\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Введите сумму для оплаты');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n    return ctx.wizard.next();\n}\n\nexport const promptForDateTime = async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Пропустить', 'notification_skip_date')],\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`Введите дату и время уведомления в формате:\ndd.mm.yyyy hh:mm\n\n ${bold('Текущая дата и время: ')} ${code(ctx.session.notificationForm.dateTime)}\n \n Введите новую дату и время или нажмите пропустить\n`;\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Введите дату и время уведомления');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n    return ctx.wizard.next();\n}\n\nexport const promptForNotificationType = async (ctx: MyContext) => {\n    //keyboard one time or constant notification\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Пропустить', 'notification_skip_type')],\n        [Markup.button.callback('Одноразовое уведомление', 'notification_one_time')],\n        [Markup.button.callback('Постоянное уведомление', 'notification_constant')],\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`Уведомление разовое или постоянное?\n    \n    ${bold('Текущий тип уведомления: ')} ${code(ctx.session.notificationForm.type)}\n    \n    Выберите тип уведомления или нажмите пропустить\n    `;\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Выберите тип уведомления');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n    return ctx.wizard.next();\n}\n\nexport const sendSuccessMessage = async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Все уведомления', 'active_notifications')],\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`Уведомление обновлено: \n${code('Название уведомления')}: ${ctx.scene.session.notificationForm.name}\n${code('Сумма для оплаты')}: ${ctx.scene.session.notificationForm.sum}\n${code('Дата и время уведомления')}: ${ctx.scene.session.notificationForm.dateTime}\n${code('Тип уведомления')}: ${ctx.scene.session.notificationForm.type}`;\n\n    try {\n        await LaravelService.updateNotificationById(ctx.session.notificationForm.id, ctx.scene.session.notificationForm);\n    } catch (error) {\n        logger.error('Error creating notification:', error);\n        await ctx.reply('Произошла ошибка при создании уведомления. Пожалуйста, попробуйте позже.', Markup.inlineKeyboard(defaultButtonsMenuOnly));\n    }\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Уведомление создано');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n}","import {Composer, Markup, Scenes} from 'telegraf';\nimport {MyContext} from '../../../types/MyContext';\n\nimport {\n    enterHandler,\n    promptForDateTime,\n    promptForNotificationType,\n    promptForSum,\n    sendSuccessMessage\n} from \"./editNotificationActions\";\n\nconst noKeyboard = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nconst handleNameInput = new Composer<MyContext>();\n\nhandleNameInput.on('text', async (ctx) => {\n    const name = ctx.message.text;\n    ctx.scene.session.notificationForm.name = name;\n\n    await promptForSum(ctx);\n});\n\nconst handleSumInput = new Composer<MyContext>();\n\nhandleSumInput.on('text', async (ctx) => {\n    const sum = ctx.message.text;\n    ctx.scene.session.notificationForm.sum = sum;\n    await promptForDateTime(ctx);\n});\n\n\n//notification_skip_name\nhandleNameInput.action('notification_skip_name', async (ctx) => {\n    await promptForSum(ctx);\n});\n\nhandleSumInput.action('notification_skip_sum', async (ctx) => {\n    await promptForDateTime(ctx);\n});\n\n\n\n\n\nconst handleDateTimeInput = new Composer<MyContext>();\nhandleDateTimeInput.on('text', async (ctx) => {\n    ctx.scene.session.notificationForm.dateTime = ctx.message.text;\n    await promptForNotificationType(ctx);\n});\n\n//notification_skip_date\nhandleDateTimeInput.action('notification_skip_date', async (ctx) => {\n    await promptForNotificationType(ctx);\n});\n\n\n\nconst handleNotificationTypeInput = new Composer<MyContext>();\nhandleNotificationTypeInput.action('notification_one_time', async (ctx) => {\n    ctx.scene.session.notificationForm.type = 'one_time';\n    await sendSuccessMessage(ctx);\n});\n\n//notification_skip_type\nhandleNotificationTypeInput.action('notification_skip_type', async (ctx) => {\n    await sendSuccessMessage(ctx);\n});\n\n\nhandleNotificationTypeInput.action('notification_constant', async (ctx) => {\n    ctx.scene.session.notificationForm.type = 'constant';\n    await sendSuccessMessage(ctx);\n});\n\nexport const editNotificationScene = new Scenes.WizardScene<MyContext>(\n    'edit_notification',\n    // Step 1: Prompt to enter name\n    async (ctx) => {\n        ctx.scene.session.notificationForm = {\n            name: null,\n            sum: null,\n            dateTime: null,\n            type: null,\n        }\n       await enterHandler(ctx);\n    },\n    // Step 2: Save name and prompt to enter sum\n    handleNameInput,\n    // Step 3: Save sum and prompt to enter date\n    handleSumInput,\n    // Step 4: Save date and prompt to enter type\n    handleDateTimeInput,\n    // Step 5: Save type and sucecss\n    handleNotificationTypeInput,\n);\n\neditNotificationScene.command('start', async (ctx) => {\n    await ctx.scene.enter('admin_main');\n});\neditNotificationScene.action('mainmenu', async (ctx) => {\n    await ctx.scene.enter('admin_main');\n});\n","import {Markup} from \"telegraf\";\nimport {MyContext} from \"../../../types/MyContext\";\nimport {fmt} from \"telegraf/format\";\nimport logger from \"../../../../utils/logger/loggerTelegram\";\n\nconst defaultButtons = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nconst defaultButtonsMenuOnly = [\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nexport const enterHandler = async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Создать уведомление', 'create_notification')],\n        [Markup.button.callback('Активные уведомления', 'active_notifications')],\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`что хотите сделать?`\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Уведомления');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n}\n\nexport const notificationListHandler = async (ctx: MyContext) => {\n\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('👈 Назад', 'reenter')],\n        [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`Активные уведомления:`\n\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Активные уведомления');\n    } catch (error) {\n        logger.error('Error sending notification list message:', error);\n        await ctx.reply(message, keyboard);\n    }\n}","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\n\nimport {enterHandler, notificationListHandler} from \"./notificationActions\";\nimport {fmt} from \"telegraf/format\";\nimport logger from \"../../../../utils/logger/loggerTelegram\";\nimport cabinetWizzard from \"../createCabinetScene\";\n\n\nexport const notifictationsScene = new Scenes.BaseScene<MyContext>('notifications');\n\n// Define the enter handler\nnotifictationsScene.enter(async (ctx: MyContext) => {\n    await enterHandler(ctx);\n});\n\n\nconst noKeyboard = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\n\nnotifictationsScene.command('start', async (ctx) => {\n    await ctx.scene.enter('admin_main');\n});\nnotifictationsScene.action('mainmenu', async (ctx) => {\n    await ctx.scene.enter('admin_main');\n});\n\nnotifictationsScene.action('create_notification', async (ctx) => {\n    await ctx.scene.enter('create_notification');\n});\n\nnotifictationsScene.action('active_notifications', async (ctx) => {\n    await ctx.scene.enter('active_notifications');\n});","import {Markup} from \"telegraf\";\nimport {MyContext} from \"../../../types/MyContext\";\nimport LaravelService from \"../../../../services/laravelService\";\nimport logger from \"../../../../utils/logger/loggerTelegram\";\n\nconst defaultButtons = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nconst defaultButtonsMenuOnly = [\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nexport const enterHandler = async (ctx: MyContext) => {\n\n    const page = ctx.session.page || 1; // Store page in session for navigation\n    const perPage = 10; // Adjust perPage if needed\n\n    try {\n        const productData = await LaravelService.getUsersByTelegramId(ctx.from.id, page, perPage);\n\n        console.log('productData', productData);\n\n        if (!productData || productData.tasks.length === 0) {\n            await ctx.reply('Нет доступных сотрудников', Markup.inlineKeyboard([\n                [Markup.button.callback('Главное меню', 'mainmenu')]\n            ]));\n            return ctx.wizard.next();\n        }\n\n        const { tasks, currentPage, totalPages } = productData;\n\n\n        // Generate buttons for products\n        const buttons = tasks.map(task => {\n            return [\n                Markup.button.callback(task.name, `user_${task.id}`)\n            ]\n        });\n\n        // Add navigation buttons\n        const navigationButtons = [];\n        if (currentPage > 1) {\n            navigationButtons.push(Markup.button.callback('← Назад', `tasks_page_${currentPage - 1}`));\n        }\n        if (currentPage < totalPages) {\n            navigationButtons.push(Markup.button.callback('Вперед →', `tasks_page_${currentPage + 1}`));\n        }\n        if (navigationButtons.length) {\n            buttons.push(navigationButtons);\n        }\n\n        buttons.push(...defaultButtonsMenuOnly);\n\n        const message = `[управление персоналом]\nВ этом блоке вы можете увидеть всех мастеров\n\n[списком в кнопках выводи карточки персонала]`;\n        const keyboard = Markup.inlineKeyboard(buttons);\n\n        try {\n            await ctx.editMessageText(message, {\n                ...keyboard, // Spread the keyboard markup\n                link_preview_options: {\n                    is_disabled: true\n                },\n            });\n            await ctx.answerCbQuery('Персонал');\n        } catch (error) {\n            logger.error('Error sending autobooking message:', error);\n            await ctx.reply(message, keyboard);\n        }\n\n        await ctx.answerCbQuery();\n    } catch (error) {\n        logger.error('Error fetching products:', error);\n        await ctx.reply('Произошла ошибка при загрузке персонала', Markup.inlineKeyboard([\n            [Markup.button.callback('Главное меню', 'mainmenu')]\n        ]));\n    }\n}\n\nexport const userBlockHandler = async (ctx: MyContext) => {\n    const user_id = ctx.scene.session.user_id;\n    const userOne = await LaravelService.getUserById(ctx.from.id, user_id);\n    const user = userOne[0];\n    const message = `[карточка персонала]\n    \nИмя: ${user.name}\nТелефон: ${user.phone}\nEmail: ${user.email}\n`;\n\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('👈 Назад', 'reenter')],\n        [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n    ]);\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Персонал');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n}","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\n\nimport {enterHandler, userBlockHandler} from \"./staffActions\";\n\n\n\nexport const staffScene = new Scenes.BaseScene<MyContext>('staff');\n\nconst noKeyboard = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\n// Define the enter handler\nstaffScene.enter(async (ctx: MyContext) => {\n    await enterHandler(ctx);\n});\n\nstaffScene.action('reenter', async (ctx: MyContext) => {\n    await ctx.scene.reenter();\n});\n\nstaffScene.action(/^user_(\\d+)$/, async (ctx) => {\n    const user_id = parseInt(ctx.match[1], 10);\n    ctx.scene.session.user_id = user_id;\n    return userBlockHandler(ctx);\n});","import LaravelService from \"../../services/laravelService\";\nimport logger from \"../../utils/logger/loggerTelegram\";\nimport {MyContext} from \"../types/MyContext\";\nimport {Scenes} from \"telegraf\";\nimport {SceneSession} from \"telegraf/typings/scenes\";\n\nexport const cabinetGate = async (ctx: MyContext, scene: string) => {\n    let user = null;\n    try{\n        user = await LaravelService.getUserByTelegramId(ctx.from.id, 10);\n    } catch (error) {\n        logger.error('Error getting user:', error);\n        await ctx.reply('Произошла ошибка при получении данных пользователя. Попробуйте позже');\n    }\n\n    if (!user) {\n        await ctx.reply('Пользователь не найден. Пожалуйста, зарегистрируйтесь');\n        return;\n    }\n\n    // if no phone then auth\n    if (!user.phone_number) {\n        await ctx.scene.enter('login_wizard');\n        return;\n    }\n\n    ctx.session.user = user;\n\n    console.log('user', user);\n\n\n    await ctx.scene.enter(scene, {user});\n}","// nodejs-server/utils/clusterManager.ts\n\nimport { Cluster } from 'playwright-cluster';\n\nlet cluster: Cluster | undefined;\n\nconst initializeCluster = async (): Promise<Cluster> => {\n    if (cluster) {\n        return cluster;\n    }\n\n    cluster = await Cluster.launch({\n        concurrency: Cluster.CONCURRENCY_CONTEXT,\n        maxConcurrency: 5,\n        timeout: 120000,\n        playwrightOptions: {\n            headless: true,\n        },\n    });\n\n    cluster.on('taskerror', (err: Error, data: any, willRetry: boolean) => {\n        if (willRetry) {\n            console.warn(`Error processing ${data}: ${err.message}. Retrying...`);\n        } else {\n            console.error(`Failed to process ${data}: ${err.message}`);\n        }\n    });\n\n    cluster.on('active', () => {\n        console.log('A new task has started. Active tasks:', cluster!.idle);\n    });\n\n    cluster.on('idle', () => {\n        console.log('All tasks are complete. Cluster is idle.');\n    });\n\n    return cluster;\n};\n\nconst shutdownCluster = async (): Promise<void> => {\n    if (cluster) {\n        await cluster.close();\n        console.log('Cluster has been shut down.');\n        cluster = undefined;\n    }\n};\n\nprocess.on('SIGINT', async () => {\n    console.log('Received SIGINT. Shutting down cluster...');\n    await shutdownCluster();\n    process.exit(0);\n});\n\nprocess.on('SIGTERM', async () => {\n    console.log('Received SIGTERM. Shutting down cluster...');\n    await shutdownCluster();\n    process.exit(0);\n});\n\nexport {\n    initializeCluster,\n    shutdownCluster,\n};\n","import { createLogger, format, transports, Logger } from 'winston';\n\nconst loggerTelegram: Logger = createLogger({\n    level: 'info',\n    format: format.json(),\n    defaultMeta: { service: 'nodejs-server' },\n    transports: [\n        new transports.Console({\n            format: format.combine(\n                format.timestamp(),\n                format.simple()\n            ),\n        }),\n        new transports.File({\n            filename: 'telegram.log',\n            format: format.json(),\n        }),\n    ],\n});\n\nexport default loggerTelegram;\n","// src/utils/pow/solveTask.ts\n\nimport path from 'path';\nimport fs from 'fs';\nimport vm from 'vm';\n\n// Step 1: Load wasm_exec.js (adjust the path to where you store the wasm_exec.js file)\nconst wasmExecPath = path.join(__dirname, 'wasm_exec.js');\nconst wasmExecCode = fs.readFileSync(wasmExecPath, 'utf8');\nvm.runInThisContext(wasmExecCode); // This defines `global.Go`\n\ndeclare var Go: any;\n\nexport interface TaskInput {\n    // Your TaskInput interface definition\n}\n\n// Step 2: Create a function to run WebAssembly in Node.js\nasync function solveTaskInNode(wasmPath: string, taskInput: TaskInput): Promise<any> {\n    const go = new Go();\n\n    // Load the WebAssembly file from the file system\n    const wasmBuffer = fs.readFileSync(wasmPath);\n\n    // Instantiate WebAssembly with the Go import object\n    const { instance } = await WebAssembly.instantiate(wasmBuffer, go.importObject);\n    go.run(instance);\n\n    // Now call solveTask\n    try {\n        const solveTaskResult = (global as any).solveTask(taskInput);\n        return solveTaskResult;\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Step 3: Define the wasmPath and taskInput\nconst wasmPath = path.join(__dirname, 'solve.wasm'); // Path to your solve.wasm file\n\n// Export the function\nexport {\n    solveTaskInNode,\n    wasmPath,\n};\n","// src/cache/Cache.ts\n\nimport redisClient from '../redisClient';\nimport { serialize, unserialize } from 'php-serialize';\nimport axios from 'axios';\n\n// Define an interface for the user data returned by the API\ninterface User {\n    id: number;\n    telegramId: string;\n    name: string;\n    // Add other user properties as needed\n}\n\ninterface ScanResult {\n    cursor: number;\n    keys: string[];\n}\n\nclass Cache {\n    private prefix: string;\n\n    constructor() {\n        this.prefix = 'beauty_database_';\n    }\n\n    /**\n     * Sets a value in the Redis cache.\n     * @param key - The key under which the value is stored.\n     * @param value - The value to store; can be any serializable type.\n     * @param expirationInSeconds - Time in seconds before the key expires. Defaults to 3600 seconds (1 hour).\n     */\n    async set(key: string, value: any, expirationInSeconds: number = 3600): Promise<void> {\n        const fullKey = `${this.prefix}${key}`;\n        try {\n            const serializedValue = serialize(value);\n            await redisClient.set(fullKey, serializedValue, {\n                EX: expirationInSeconds, // Expiration time in seconds\n            });\n            console.log(`Value set for key: ${fullKey}`);\n        } catch (err) {\n            console.error(`Error setting cache value for key ${fullKey}:`, err);\n        }\n    }\n\n    /**\n     * Retrieves a value from the Redis cache.\n     * @param key - The key of the value to retrieve.\n     * @returns The deserialized value if found, raw value if deserialization fails, or null if not found.\n     */\n    async get(key: string): Promise<any | null> {\n        const fullKey = `${this.prefix}${key}`;\n        try {\n            const value = await redisClient.get(fullKey);\n            if (value !== null) {\n                try {\n                    const deserializedValue = unserialize(value);\n                    // console.log(`Value retrieved for key ${fullKey}:`, deserializedValue);\n                    return deserializedValue;\n                } catch (error) {\n                    console.warn(`Failed to deserialize value for key ${fullKey}. Returning raw value.`);\n                    return value;\n                }\n            } else {\n                console.log(`Key ${fullKey} not found in cache.`);\n                return null;\n            }\n        } catch (err) {\n            console.error(`Error getting cache value for key ${fullKey}:`, err);\n            return null;\n        }\n    }\n\n    /**\n     * Retrieves a value from the cache. If it doesn't exist, computes it using the provided function,\n     * stores it in the cache, and then returns it.\n     *\n     * @param key - The cache key.\n     * @param computeFn - An asynchronous function to compute the value if it's not cached.\n     * @param expirationInSeconds - Cache expiration time in seconds. Defaults to 3600 (1 hour).\n     * @returns A promise that resolves with the cached or computed value.\n     */\n    async rememberCacheValue<T>(\n        key: string,\n        computeFn: () => Promise<T>,\n        expirationInSeconds: number = 3600\n    ): Promise<T> {\n        try {\n            // Attempt to retrieve the cached value\n            const cachedValue = await this.get(key);\n\n            if (cachedValue !== null) {\n                console.log(`Cache hit for key: ${key}`);\n                return cachedValue as T;\n            }\n\n            console.log(`Cache miss for key: ${key}. Computing value...`);\n\n            // Compute the value using the provided function\n            const computedValue = await computeFn();\n\n            // Store the computed value in the cache\n            await this.set(key, computedValue, expirationInSeconds);\n            console.log(`Computed and cached value for key: ${key}`);\n\n            return computedValue;\n        } catch (err) {\n            console.error(`Error in rememberCacheValue for key ${key}:`, err);\n            throw err; // Rethrow the error after logging\n        }\n    }\n\n\n    /**\n     * Retrieves a user by their Telegram ID, first checking the cache before making an API call.\n     * @param telegramId - The Telegram ID of the user.\n     * @returns The user data if found, or null otherwise.\n     */\n    async getUserByTelegramId(telegramId: number): Promise<User | null> {\n        const cacheKey = `user_telegram_id_${telegramId}`;\n        try {\n            let user: User | null = await this.get(cacheKey);\n            console.log('User retrieved from cache:', user);\n            if (user) {\n                return user;\n            }\n\n            const laravelApiUrl = process.env.LARAVEL_API_URL;\n            if (!laravelApiUrl) {\n                console.error('LARAVEL_API_URL is not defined in environment variables.');\n                return null;\n            }\n\n            const response = await axios.get<User>(`${laravelApiUrl}/users/telegram/${telegramId}`);\n            user = response.data;\n            console.log('User retrieved from API:', user);\n\n            // Optionally, cache the user data after fetching from the API\n            await this.set(cacheKey, user, 3600); // Cache for 1 hour\n\n            return user;\n        } catch (error) {\n            console.error('Error fetching user:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Deletes a key from the Redis cache.\n     * @param key - The key to delete.\n     * @returns True if the key was deleted, false otherwise.\n     */\n    async forget(key: string): Promise<boolean> {\n        const fullKey = `${this.prefix}${key}`;\n        try {\n            const result = await redisClient.del(fullKey);\n            if (result === 1) {\n                console.log(`Successfully deleted key: ${fullKey}`);\n                return true;\n            } else {\n                console.log(`Key ${fullKey} does not exist or could not be deleted.`);\n                return false;\n            }\n        } catch (err) {\n            console.error(`Error deleting cache value for key ${fullKey}:`, err);\n            return false;\n        }\n    }\n\n    async forgetByPattern(pattern: string): Promise<boolean> {\n        const fullPattern = `${this.prefix}${pattern}`;\n        console.log(`Deleting keys matching pattern: ${fullPattern}`);\n        try {\n            let cursor = 0;\n            do {\n                const result:ScanResult = await redisClient.scan(cursor, {\n                    MATCH: fullPattern,\n                    COUNT: 100\n                });\n                console.log('Scan result:', result);\n\n                // Adjusted to match the actual response structure\n                const nextCursor = result.cursor;\n                const keys = result.keys;\n                cursor = nextCursor;\n\n                if (keys && keys.length > 0) {  // Added a check to ensure keys is defined\n                    await redisClient.del(keys);\n                    console.log(`Successfully deleted keys matching pattern: ${fullPattern}`);\n                }\n            } while (cursor !== 0);\n\n            return true;\n        } catch (err) {\n            console.error(`Error deleting cache values for pattern ${fullPattern}:`, err);\n            return false;\n        }\n    }\n\n    /**\n     * Publishes a message to a Redis channel.\n     * @param channel - The channel to publish the message to.\n     * @param message - The message to publish.\n     */\n    async pushToChannel(channel: string, message: string): Promise<void> {\n        const fullChannel = `${this.prefix}${channel}`;\n\n        try {\n            await redisClient.publish(fullChannel, message);\n            console.log(`Message published to channel ${channel}: ${message}`);\n        } catch (err) {\n            console.error(`Error publishing message to channel ${channel}:`, err);\n        }\n    }\n\n}\n\nexport default new Cache();\n","// utils/redisClient.ts\n\nimport { createClient, RedisClientType } from 'redis';\n\n/**\n * Configuration options for the Redis client.\n */\nconst redisConfig = {\n    url: 'redis://redis:6379/1', // Use Redis container name as host\n};\n\n/**\n * Create a Redis client instance.\n */\nconst redisClient: RedisClientType = createClient(redisConfig);\n\n/**\n * Connect to Redis.\n */\nconst connectRedis = async (): Promise<void> => {\n    try {\n        await redisClient.connect();\n        console.log('Connected to Redis');\n    } catch (error) {\n        console.error('Redis connection error:', error);\n        // Optionally, handle reconnection logic or exit the process\n        process.exit(1);\n    }\n};\n\n// Initiate the connection\nconnectRedis();\n\n/**\n * Gracefully handle application termination signals to disconnect Redis client.\n */\nconst gracefulShutdown = async () => {\n    try {\n        await redisClient.disconnect();\n        console.log('Disconnected from Redis');\n        process.exit(0);\n    } catch (error) {\n        console.error('Error during Redis disconnection:', error);\n        process.exit(1);\n    }\n};\n\n// Listen for termination signals\nprocess.on('SIGINT', gracefulShutdown);\nprocess.on('SIGTERM', gracefulShutdown);\n\nexport default redisClient;\n","module.exports = require(\"@telegraf/session/redis\");","module.exports = require(\"axios\");","module.exports = require(\"body-parser\");","module.exports = require(\"date-fns-tz\");","module.exports = require(\"express\");","module.exports = require(\"form-data\");","module.exports = require(\"moment\");","module.exports = require(\"moment-timezone\");","module.exports = require(\"openai\");","module.exports = require(\"php-serialize\");","module.exports = require(\"playwright-cluster\");","module.exports = require(\"redis\");","module.exports = require(\"telegraf\");","module.exports = require(\"telegraf/format\");","module.exports = require(\"winston\");","module.exports = require(\"fs\");","module.exports = require(\"node:fs\");","module.exports = require(\"path\");","module.exports = require(\"vm\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import express, { Application, Request, Response } from 'express';\nimport bodyParser from 'body-parser';\nimport winston from 'winston'; // For logging\nimport { initializeCluster, shutdownCluster } from './utils/clusterManager';\n\nimport bot from './telegraf/controllers/telegramController';\n// Import Routes\nimport draftsRoutes from './routes/drafts';\nimport ordersRoutes from './routes/orders';\nimport acceptanceRoutes from './routes/acceptance';\nimport yclientsRoutes from \"./routes/yclientsRoutes\";\nimport botMaster from \"./telegraf/controllers/telegramBotMasterController\";\n\n\n\n// Перед настройкой маршрутов добавляем установку webhook URL для каждого бота\nconst WEBHOOK_DOMAIN = 'https://albacore-famous-opossum.ngrok-free.app';\nconst app: Application = express();\nconst PORT: number | string = process.env.PORT || 3000;\n\n// Configure Winston (optional)\nexport const logger = winston.createLogger({\n    level: 'info',\n    format: winston.format.json(),\n    defaultMeta: { service: 'nodejs-server' },\n    transports: [\n        new winston.transports.Console({\n            format: winston.format.simple(),\n        }),\n        new winston.transports.File({\n            filename: 'combined.log', // Log file name\n            format: winston.format.json(), // Optional: Can also use format like simple or custom formats\n        }),\n        // Add more transports like File if needed\n\n    ],\n});\n\n// Middleware\napp.use(bodyParser.json());\n\n// Основной бот\nbot.telegram.setWebhook(`${WEBHOOK_DOMAIN}/webhook/main`)\n    .then(() => logger.info('Main bot webhook set'))\n    .catch(err => logger.error('Failed to set main bot webhook:', err));\n\n// Мастер бот\nbotMaster.telegram.setWebhook(`${WEBHOOK_DOMAIN}/webhook/master`)\n    .then(() => logger.info('Master bot webhook set'))\n    .catch(err => logger.error('Failed to set master bot webhook:', err));\n\n// Routes\n// Webhook route\napp.use(bot.webhookCallback('/webhook/main'));\napp.use(botMaster.webhookCallback('/webhook/master'));\n\n\napp.use('/api/drafts', draftsRoutes);\napp.use('/api/orders', ordersRoutes);\napp.use('/api/acceptance', acceptanceRoutes);\n\napp.use('/api/yclients', yclientsRoutes);\n\n// Health Check Endpoint\napp.get('/health', (req: Request, res: Response) => {\n    res.status(200).send({ status: 'OK' });\n});\n\n// Start Server After Initializing Cluster\nconst startServer = async (): Promise<void> => {\n    try {\n        await initializeCluster(); // Initialize Playwright Cluster\n        app.listen(PORT, () => {\n            console.log(`Node.js server is running on port ${PORT}`);\n        });\n    } catch (error: any) {\n        console.error('Failed to initialize Playwright cluster:', error.message);\n        process.exit(1); // Exit process with failure\n    }\n};\n\nstartServer();\n\n// Handle graceful shutdown\nprocess.on('SIGINT', async () => {\n    console.log('Shutting down server...');\n    await shutdownCluster();\n    process.exit(0);\n});\n\nprocess.on('SIGTERM', async () => {\n    console.log('Shutting down server...');\n    await shutdownCluster();\n    process.exit(0);\n});\n"],"names":[],"sourceRoot":""}