{"version":3,"file":"worker.js","mappings":"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","sources":["webpack://nodejs-server/./src/controllers/acceptanceController.ts","webpack://nodejs-server/./src/services/jobQueue.ts","webpack://nodejs-server/./src/services/laravelService.ts","webpack://nodejs-server/./src/telegraf/controllers/telegramController.ts","webpack://nodejs-server/./src/telegraf/services/scenes/employment/employmentActions.ts","webpack://nodejs-server/./src/telegraf/services/scenes/employment/employmentScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/mainScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/notifications/createNotificationActions.ts","webpack://nodejs-server/./src/telegraf/services/scenes/notifications/createNotificationScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/notifications/editNotificationActions.ts","webpack://nodejs-server/./src/telegraf/services/scenes/notifications/editNotificationScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/notifications/notificationActions.ts","webpack://nodejs-server/./src/telegraf/services/scenes/notifications/notificationsListScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/notifications/notificationsScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/salary/salaryActions.ts","webpack://nodejs-server/./src/telegraf/services/scenes/salary/salaryScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/staff/staffActions.ts","webpack://nodejs-server/./src/telegraf/services/scenes/staff/staffScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/tasks/tasksActions.ts","webpack://nodejs-server/./src/telegraf/services/scenes/tasks/tasksScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/warehouse/createNotificationActions.ts","webpack://nodejs-server/./src/telegraf/services/scenes/warehouse/createNotificationScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/warehouse/editNotificationActions.ts","webpack://nodejs-server/./src/telegraf/services/scenes/warehouse/editNotificationScene.ts","webpack://nodejs-server/./src/telegraf/services/scenes/warehouse/warehouseActions.ts","webpack://nodejs-server/./src/telegraf/services/scenes/warehouse/warehouseScene.ts","webpack://nodejs-server/./src/telegraf/services/warehouseBot.ts","webpack://nodejs-server/./src/telegraf/utils/cabinetGate.ts","webpack://nodejs-server/./src/utils/clusterManager.ts","webpack://nodejs-server/./src/utils/logger/loggerTelegram.ts","webpack://nodejs-server/./src/utils/pow/solveTask.ts","webpack://nodejs-server/./src/utils/redis/Cache/Cache.ts","webpack://nodejs-server/./src/utils/redis/cacheHelper.ts","webpack://nodejs-server/./src/utils/redis/redisClient.ts","webpack://nodejs-server/./src/utils/redis/redisHelper.ts","webpack://nodejs-server/./src/utils/redis/redisSubscriber.ts","webpack://nodejs-server/external commonjs \"@telegraf/session/redis\"","webpack://nodejs-server/external commonjs \"axios\"","webpack://nodejs-server/external commonjs \"bull\"","webpack://nodejs-server/external commonjs \"php-serialize\"","webpack://nodejs-server/external commonjs \"playwright-cluster\"","webpack://nodejs-server/external commonjs \"redis\"","webpack://nodejs-server/external commonjs \"telegraf\"","webpack://nodejs-server/external commonjs \"telegraf/format\"","webpack://nodejs-server/external commonjs \"winston\"","webpack://nodejs-server/external node-commonjs \"fs\"","webpack://nodejs-server/external node-commonjs \"path\"","webpack://nodejs-server/external node-commonjs \"vm\"","webpack://nodejs-server/webpack/bootstrap","webpack://nodejs-server/webpack/runtime/compat get default export","webpack://nodejs-server/webpack/runtime/define property getters","webpack://nodejs-server/webpack/runtime/hasOwnProperty shorthand","webpack://nodejs-server/webpack/runtime/make namespace object","webpack://nodejs-server/./src/workers/authWorker.ts"],"sourcesContent":["// src/controllers/acceptanceController.ts\n\nimport fs from 'fs';\nimport path from 'path';\nimport axios, { AxiosResponse } from 'axios';\nimport {Request, RequestHandler, Response} from 'express';\nimport {solveTaskInNode, TaskInput, wasmPath} from '../utils/pow/solveTask';\n\n// Define Interfaces for Storage State\ninterface Cookie {\n    name: string;\n    value: string;\n}\n\ninterface LocalStorageItem {\n    name: string;\n    value: string;\n}\n\ninterface OriginData {\n    origin: string;\n    localStorage: LocalStorageItem[];\n}\n\ninterface StorageState {\n    cookies: Cookie[];\n    origins: OriginData[];\n}\n\n// Define Interfaces for Acceptance Costs Response\ninterface Coefficient {\n    coefficient: number;\n    // Add other properties if necessary\n}\n\ninterface AcceptanceCostsResult {\n    costs: Coefficient[];\n    // Add other properties if necessary\n}\n\ninterface AcceptanceCostsResponse {\n    result?: AcceptanceCostsResult;\n    // Add other properties if necessary\n}\n\n// Define Interfaces for Book Timeslot Response\ninterface BookTimeslotResult {\n    // Define the structure based on actual response\n    [key: string]: any;\n}\n\n// Define Interfaces for POW Task\ninterface PowTask {\n    // Define based on actual task structure\n    [key: string]: any;\n}\n\ninterface PowAnswer {\n    // Define based on actual answer structure\n    [key: string]: any;\n}\n\n// Helper function to wait\nconst wait = (ms: number): Promise<void> => new Promise(resolve => setTimeout(resolve, ms));\n\n// Ensure the functions are typed as RequestHandler\nexport const fetchTimeslots: RequestHandler = async (req: Request, res: Response): Promise<void> => {\n    const { userId, preorderId } = req.query;\n\n    if (!userId || !preorderId) {\n        res.status(400).json({ error: 'Missing userId or preorderId parameter.' });\n        return;\n    }\n\n    try {\n        // Path to the user's state.json\n        const statePath = path.join('/var/www/wb-back/storage/state', `${userId}.json`);\n\n        if (!fs.existsSync(statePath)) {\n            res.status(404).json({ error: 'User state not found.' });\n            return;\n        }\n\n        const storageState: StorageState = JSON.parse(fs.readFileSync(statePath, 'utf-8'));\n\n        // Extract cookies and WBTokenV3\n        const { cookies, origins } = storageState;\n        let cookieHeader = cookies.map(cookie => `${cookie.name}=${cookie.value}`).join('; ');\n\n        const originData = origins.find(origin => origin.origin === 'https://seller.wildberries.ru');\n        if (!originData) {\n            res.status(400).json({ error: 'Origin data not found in state.' });\n            return;\n        }\n\n        const wbTokenEntry = originData.localStorage.find(item => item.name === 'wb-eu-passport-v2.access-token');\n        const wbTokenValue = wbTokenEntry ? wbTokenEntry.value : null;\n\n        if (!wbTokenValue) {\n            res.status(400).json({ error: 'WBTokenV3 token not found in localStorage.' });\n            return;\n        }\n\n        // Add WBTokenV3 to cookies\n        cookieHeader += `; WBTokenV3=${wbTokenValue}`;\n\n        // Define headers\n        const headers = {\n            'Content-Type': 'application/json',\n            'Cookie': cookieHeader,\n            'Accept': '*/*',\n            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',\n            'Origin': 'https://seller.wildberries.ru',\n            'Referer': 'https://seller.wildberries.ru/',\n            'Accept-Language': 'ru,en-GB;q=0.9,en-US;q=0.8,en;q=0.7',\n            'sec-ch-ua': '\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\"',\n            'sec-ch-ua-mobile': '?0',\n            'sec-ch-ua-platform': '\"macOS\"',\n            'sec-fetch-dest': 'empty',\n            'sec-fetch-mode': 'cors',\n            'sec-fetch-site': 'same-site',\n        };\n\n        // **a. Get Acceptance Costs**\n        const acceptanceCostsUrl = 'https://seller-supply.wildberries.ru/ns/sm-supply/supply-manager/api/v1/supply/getAcceptanceCosts';\n        const dateFrom = new Date().toISOString();\n        const dateTo = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(); // 30 days from now\n        const acceptanceCostsData = {\n            \"params\": {\n                \"dateFrom\": dateFrom,\n                \"dateTo\": dateTo,\n                \"preorderID\": Number(preorderId)\n            },\n            \"jsonrpc\": \"2.0\",\n            \"id\": \"json-rpc_35\"\n        };\n\n        const acceptanceCostsResponse: AxiosResponse<AcceptanceCostsResponse> = await axios.post(acceptanceCostsUrl, acceptanceCostsData, { headers });\n        const acceptanceCostsResult = acceptanceCostsResponse.data?.result;\n\n        if (!acceptanceCostsResult) {\n            res.status(500).json({ error: 'Failed to retrieve acceptance costs.' });\n            return;\n        }\n\n        // Filter coefficients > -1\n        acceptanceCostsResult.costs = acceptanceCostsResult.costs.filter(coefficient => coefficient.coefficient > -1);\n\n        res.status(200).json({\n            message: 'Fetched acceptance costs and delivery date successfully.',\n            data: {\n                acceptanceCosts: acceptanceCostsResult,\n            }\n        });\n    } catch (error: any) {\n        console.error('Error fetching acceptance costs:', error.response ? error.response.data : error.message);\n        res.status(500).json({ error: 'Internal Server Error.' });\n    }\n};\n\nexport const bookTimeslot: RequestHandler = async (req: Request, res: Response): Promise<void> => {\n    const { userId, preorderId, deliveryDate, warehouseId, monopalletCount } = req.body;\n\n    if (!userId || !preorderId || !deliveryDate || !warehouseId) {\n        res.status(400).json({ error: 'Missing required parameters.' });\n        return;\n    }\n\n    try {\n        // Path to the user's state.json\n        const statePath = path.join('/var/www/wb-back/storage/state', `${userId}.json`);\n\n        if (!fs.existsSync(statePath)) {\n            res.status(404).json({ error: 'User state not found.' });\n            return;\n        }\n\n        const storageState: StorageState = JSON.parse(fs.readFileSync(statePath, 'utf-8'));\n\n        // Extract cookies and WBTokenV3\n        const { cookies, origins } = storageState;\n        let cookieHeader = cookies.map(cookie => `${cookie.name}=${cookie.value}`).join('; ');\n\n        const originData = origins.find(origin => origin.origin === 'https://seller.wildberries.ru');\n        if (!originData) {\n            res.status(400).json({ error: 'Origin data not found in state.' });\n            return;\n        }\n\n        const wbTokenEntry = originData.localStorage.find(item => item.name === 'wb-eu-passport-v2.access-token');\n        const wbTokenValue = wbTokenEntry ? wbTokenEntry.value : null;\n\n        if (!wbTokenValue) {\n            res.status(400).json({ error: 'WBTokenV3 token not found in localStorage.' });\n            return;\n        }\n\n        // Add WBTokenV3 to cookies\n        cookieHeader += `; WBTokenV3=${wbTokenValue}`;\n\n        // Define headers\n        const headers = {\n            'Content-Type': 'application/json',\n            'Cookie': cookieHeader,\n            'Accept': '*/*',\n            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',\n            'Origin': 'https://seller.wildberries.ru',\n            'Referer': 'https://seller.wildberries.ru/',\n            'Accept-Language': 'ru,en-GB;q=0.9,en-US;q=0.8,en;q=0.7',\n            'sec-ch-ua': '\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\"',\n            'sec-ch-ua-mobile': '?0',\n            'sec-ch-ua-platform': '\"macOS\"',\n            'sec-fetch-dest': 'empty',\n            'sec-fetch-mode': 'cors',\n            'sec-fetch-site': 'same-site',\n        };\n\n        // **d. Book Timeslot**\n        const bookTimeslotUrl = 'https://seller-supply.wildberries.ru/ns/sm/supply-manager/api/v1/plan/add';\n\n        const bookTimeslotData = {\n            \"params\": {\n                \"preOrderId\": Number(preorderId),\n                \"deliveryDate\": deliveryDate,\n                \"warehouseId\": warehouseId,\n                ...(monopalletCount !== undefined && { monopalletCount })  // Add monopalletCount if provided\n            },\n            \"jsonrpc\": \"2.0\",\n            \"id\": \"json-rpc_36\"\n        };\n\n        // **Perform CAPTCHA Solving**\n        const task: TaskInput = await getPowTask();\n\n        const startTime = Date.now();\n        const answers: PowAnswer[] = await solvePowTask(task);\n        const latency = (Date.now() - startTime).toFixed(3); // Latency in milliseconds\n\n        console.log('answers', answers);\n\n        const captchaToken: string = await verifyPowAnswer(task, answers);\n        console.log('captchaToken', captchaToken);\n\n        // Include the CAPTCHA token and latency in headers\n        const bookTimeslotHeaders = {\n            ...headers,\n            'x-wb-captcha-token': captchaToken,\n            'x-wb-captcha-latency': latency,\n        };\n\n        // Make the plan/add request with CAPTCHA headers\n        const bookTimeslotResponse: AxiosResponse<{ result: BookTimeslotResult }> = await axios.post(bookTimeslotUrl, bookTimeslotData, { headers: bookTimeslotHeaders });\n        const bookTimeslotResult = bookTimeslotResponse.data.result;\n\n        console.log('Book Timeslot Result:', bookTimeslotResult);\n\n        res.status(200).json({\n            message: 'Timeslot booked successfully.',\n            data: bookTimeslotResult\n        });\n    } catch (error: any) {\n        console.error('Error booking timeslot:', error.response ? error.response.data : error.message);\n        res.status(500).json({ error: 'Internal Server Error.' });\n    }\n};\n// Functions for CAPTCHA solving\n\n/**\n * Retrieves a POW task from the server.\n * @param clientId Optional client ID.\n * @returns The POW task.\n */\nexport const getPowTask = async (clientId: string | null = null): Promise<TaskInput> => {\n    const actualClientId = clientId || 'e150c635-c6bb-4192-8046-97c2cf81e8b8'; // Use the actual client_id if required\n    const getTaskUrl = `https://pow.wildberries.ru/api/v1/short/get-task?client_id=${actualClientId}`;\n\n    const response: AxiosResponse<TaskInput> = await axios.get(getTaskUrl, {\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            'Accept': '*/*',\n            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',\n            'Origin': 'https://seller.wildberries.ru',\n            'Referer': 'https://seller.wildberries.ru/',\n            'sec-ch-ua': '\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\"',\n            'sec-ch-ua-mobile': '?0',\n            'sec-ch-ua-platform': '\"macOS\"',\n            'sec-fetch-dest': 'empty',\n            'sec-fetch-mode': 'cors',\n            'sec-fetch-site': 'same-site',\n        },\n    });\n\n    return response.data;\n};\n\n/**\n * Solves the given POW task.\n * @param task The POW task to solve.\n * @returns An array of answers.\n */\nexport const solvePowTask = async (task:TaskInput): Promise<PowAnswer[]> => {\n    let resultArray: PowAnswer[] = [];\n    try {\n        const result = await solveTaskInNode(wasmPath, task);\n        resultArray = JSON.parse(result)?.answers;\n        console.log('solveTask result:', resultArray);\n    } catch (err) {\n        console.error('Error running solveTask:', err);\n    }\n    return resultArray;\n};\n\n/**\n * Verifies the POW answer with the server.\n * @param task The original POW task.\n * @param answers The answers to verify.\n * @returns The CAPTCHA token.\n */\nexport const verifyPowAnswer = async (task:TaskInput, answers: PowAnswer[]): Promise<string> => {\n    const verifyUrl = 'https://pow.wildberries.ru/api/v1/short/verify-answer';\n\n    const data = {\n        task,\n        answers,\n    };\n\n    console.log('data', data);\n\n    const response: AxiosResponse<{ 'wb-captcha-short-token': string }> = await axios.post(verifyUrl, JSON.stringify(data), {\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            'Accept': '*/*',\n            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',\n            'Origin': 'https://seller.wildberries.ru',\n            'Referer': 'https://seller.wildberries.ru/',\n            'sec-ch-ua': '\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\"',\n            'sec-ch-ua-mobile': '?0',\n            'sec-ch-ua-platform': '\"macOS\"',\n            'sec-fetch-dest': 'empty',\n            'sec-fetch-mode': 'cors',\n            'sec-fetch-site': 'same-site',\n        },\n    });\n\n    return response.data['wb-captcha-short-token'];\n};\n","// src/services/jobQueue.ts\nimport Bull from 'bull';\nimport { AuthenticateUserRequestBody } from './authService';\n\n// Initialize Bull queue for authentication jobs\nexport const authQueue = new Bull<AuthenticateUserRequestBody>('authentication', {\n    redis: {\n        host: 'redis', // Update with your Redis host\n        port: 6379,        // Update with your Redis port\n    },\n});\n","// src/services/UserService.ts\n\nimport axios from 'axios';\nimport CacheService from '../utils/redis/Cache/Cache';\nimport  {User, CreateCabinetResponse}  from '../telegraf/types/User';\nimport {PaginatedNotifications} from \"../telegraf/types/Notification\";\n\nexport interface Product {\n    good_id: number;\n    title: string;\n    actual_amount: [\n        {\n            amount: number;\n            storage_id: number;\n        }\n    ];\n}\n\nexport interface ProductsPaginatedResponse {\n    actual_amounts: any;\n    currentPage: number;\n    totalPages: number;\n    products: Product[];\n    allProducts: Product[];\n}\n\nexport interface ProductPaginatedResponse {\n    actual_amounts: any;\n    product: Product;\n}\n\ninterface TaskPaginatedResponse {\n    actual_amounts: any;\n    currentPage: number;\n    totalPages: number;\n    tasks: any;\n    allTasks: any;\n}\n\nclass LaravelService {\n    private laravelApiUrl: string;\n\n    constructor() {\n        const apiUrl = process.env.LARAVEL_API_URL;\n        if (!apiUrl) {\n            throw new Error('LARAVEL_API_URL is not defined in environment variables.');\n        }\n        this.laravelApiUrl = apiUrl;\n    }\n\n    /**\n     * Retrieves a user by their Telegram ID.\n     * Utilizes CacheService.rememberCacheValue for caching.\n     *\n     * @param telegramId - The Telegram ID of the user.\n     * @param ex\n     * @returns A Promise that resolves to the User object or null if not found.\n     */\n    public async getUserByTelegramId(telegramId: number, ex: number = 3600): Promise<User | null> {\n        const cacheKey = `user_telegram_id_${telegramId}`;\n        try {\n            const user: User | null = await CacheService.rememberCacheValue(\n                cacheKey,\n                () => this.fetchUserFromApi(telegramId),\n                ex // Cache expiration set to 1 hour (3600 seconds)\n            );\n            console.log(`User fetched for Telegram ID ${telegramId}:`, user);\n            return user;\n        } catch (error) {\n            console.error('Error fetching user:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Retrieves paginated notifications for a user by their Telegram ID.\n     *\n     * @param telegramId - The Telegram ID of the user.\n     * @param page - The page number to retrieve.\n     * @param perPage - Number of notifications per page.\n     * @param type - Either 'search' or 'booking'.\n     * @param id\n     * @returns A Promise that resolves to PaginatedNotifications or null if not found.\n     */\n    public async getNotificationsByTelegramId(\n        telegramId: number,\n        page: number = 1,\n        perPage: number = 1,\n        type: string = 'search',\n        id: number = null\n    ): Promise<PaginatedNotifications | null> {\n        const cacheKey = `notifications_${type}_telegram_id_${telegramId}_page_${page}`;\n        try {\n            const notifications: PaginatedNotifications | null = await CacheService.rememberCacheValue(\n                cacheKey,\n                () => this.fetchNotificationsFromApi(telegramId, page, perPage, type, id),\n                60 // Cache expiration set to 2 hours (7200 seconds)\n            );\n            return notifications;\n        } catch (error) {\n            console.error('Error fetching notifications:', error);\n            return null;\n        }\n    }\n\n    public async createNotificationByTelegramId(\n        telegramId: number,\n        settings: any,\n        type: string = 'notification'\n    ): Promise<PaginatedNotifications | null> {\n        try {\n            const response = await axios.post<PaginatedNotifications>(\n                `${this.laravelApiUrl}/notifications/telegram/${telegramId}`,\n                {\n                    settings:{\n                        ...settings,\n                        type\n                    }\n                }\n            );\n            return response.data;\n        } catch (error) {\n            console.error('Error creating notification:', error);\n            throw new Error('Error creating notification');\n        }\n    }\n\n    public async updateNotificationById(\n        notificationId: string | number,\n        settings: any,\n    ): Promise<PaginatedNotifications | null> {\n        try {\n            const response = await axios.put<PaginatedNotifications>(\n                `${this.laravelApiUrl}/notifications/telegram/update/${notificationId}`,\n                {\n                    settings\n                }\n            );\n            return response.data;\n        } catch (error) {\n            console.error('Error creating notification:', error);\n            throw new Error('Error creating notification');\n        }\n    }\n\n    /**\n     * Creates a cabinet for a user identified by their Telegram ID.\n     * Utilizes caching to store and update the user data.\n     *\n     * @param telegramId - The Telegram ID of the user.\n     * @param name - The name of the cabinet to be created.\n     * @param phoneNumber - The phone number associated with the cabinet.\n     * @param userId\n     * @param statePath\n     * @returns A Promise that resolves to the updated User object or null if an error occurs.\n     */\n    public async createCabinetByTelegramId(\n        telegramId: number,\n        name: string,\n        phoneNumber: string,\n        userId: string,\n        statePath: string,\n    ): Promise<User | null> {\n\n        const cacheKey = `user_new_cabinet_${telegramId}`;\n\n        try {\n            // Prepare the payload for the POST request\n            const payload = {\n                name,\n                phone_number: phoneNumber,\n                user_id: userId,\n                state_path: statePath,\n            };\n\n            // Make the POST request to create a cabinet\n            const response = await this.createCabinet<CreateCabinetResponse>(\n                `/cabinets/telegram/${telegramId}`,\n                payload\n            );\n\n            // Extract the updated user from the response\n            const updatedUser: User = response?.user || null;\n\n            // Update the cache with the new user data\n            await CacheService.set(cacheKey, updatedUser, 3600); // Cache expires in 1 hour\n\n            console.log(`Cabinet \"${name}\" created for Telegram ID ${telegramId}. Updated user data cached.`);\n            return updatedUser;\n        } catch (error) {\n            // Handle errors (e.g., user not found, validation errors)\n            console.error(`Error creating cabinet for Telegram ID ${telegramId}:`, error);\n\n            // Optionally, you can handle specific error types here\n            // For example, if using Axios, you can check error.response.status\n\n            return null;\n        }\n    }\n\n    public async deleteCabinetByTelegramId(\n        telegramId: number,\n        cabinetId: string) {\n        try {\n            const response = await axios.delete(\n                `${this.laravelApiUrl}/cabinets/telegram/${telegramId}/${cabinetId}`\n            );\n            return response.data;\n        } catch (error) {\n            console.error('Error deleting cabinet:', error);\n            throw new Error('Error deleting cabinet');\n        }\n    }\n\n    public async updateCabinetByTelegramId(\n        telegramId: number,\n        cabinetId: string,\n        payload: any) {\n        try {\n            const response = await axios.put(\n                `${this.laravelApiUrl}/cabinets/telegram/${telegramId}/${cabinetId}`, {\n                    name: payload.name,\n                    settings: payload.settings\n                }\n            );\n            return response.data;\n        } catch (error) {\n            console.error('Error updating cabinet:', error);\n            throw new Error('Error updating cabinet');\n        }\n    }\n\n    public async deleteNotification(\n        notificationId: string | number\n    ): Promise<void> {\n        try {\n            await axios.delete(\n                `${this.laravelApiUrl}/notifications/telegram/${notificationId}`\n            );\n        } catch (error) {\n            console.error('Error deleting notification:', error);\n            throw new Error('Error deleting notification');\n        }\n    }\n\n    /**\n     * Fetches the user data from the Laravel API.\n     *\n     * @param telegramId - The Telegram ID of the user.\n     * @returns A Promise that resolves to the User object.\n     */\n    private async fetchUserFromApi(telegramId: number): Promise<User> {\n        const response = await axios.get<User>(`${this.laravelApiUrl}/users/telegram/${telegramId}`);\n        return response.data;\n    }\n\n    /**\n     * Fetches paginated notifications from the Laravel API.\n     *\n     * @param telegramId - The Telegram ID of the user.\n     * @param page - The page number to retrieve.\n     * @param perPage - Number of notifications per page.\n     * @param type - Either 'search' or 'booking'.\n     * @param id\n     * @returns A Promise that resolves to PaginatedNotifications.\n     */\n    private async fetchNotificationsFromApi(\n        telegramId: number,\n        page: number,\n        perPage: number,\n        type: string,\n        id: string | number,\n    ): Promise<PaginatedNotifications> {\n        const response = await axios.get<PaginatedNotifications>(\n            `${this.laravelApiUrl}/notifications/telegram/${telegramId}`,\n            {\n                params: {\n                    page,\n                    per_page: perPage,\n                    type,\n                    id\n                },\n            }\n        );\n        return response.data;\n    }\n\n    /**\n     * Makes a POST request to create a cabinet.\n     *\n     * @param url - The API endpoint URL.\n     * @param data - The data to be sent in the request body.\n     * @returns A Promise that resolves to the response data.\n     * @template T - The type of the response data.\n     * @private\n     * */\n\n    private async createCabinet<T>(url: string, data: any): Promise<T> {\n        const response = await axios.post<T>(`${this.laravelApiUrl}${url}`, data);\n        return response.data;\n    }\n\n\n\n    async getProductsByTelegramId(telegramId: number, page: number = 1, perPage: number = 10): Promise<ProductsPaginatedResponse> {\n        const cacheKey = `products_telegram_id_${telegramId}`;\n        try {\n            // Fetch products from cache or API\n            const products: any = await CacheService.rememberCacheValue(\n                cacheKey,\n                () => this.fetchProductsFromApi(telegramId),\n                3600 * 24 // Cache expiration set to 24 hours (86400 seconds)\n            );\n\n            // Paginate products\n            const totalProducts = products.length;\n            const totalPages = Math.ceil(totalProducts / perPage);\n            page = Math.max(1, Math.min(totalPages, page));\n            const start = (page - 1) * perPage;\n            const currentProducts = products.slice(start, start + perPage);\n\n            // Prepare response with pagination details\n            return {\n                actual_amounts: undefined,\n                currentPage: page,\n                totalPages,\n                products: currentProducts,\n                allProducts: products\n            };\n        } catch (error) {\n            console.error('Error fetching products:', error);\n            return null;\n        }\n    }\n\n    async getTaskByTelegramId(telegramId: number, page: number = 1, perPage: number = 10): Promise<TaskPaginatedResponse> {\n        const cacheKey = `task_telegram_id_${telegramId}`;\n        try {\n            // Fetch products from cache or API\n            const tasks: any = await CacheService.rememberCacheValue(\n                cacheKey,\n                () => this.fetchTasksFromApi(telegramId),\n                10 // Cache expiration set to 24 hours (86400 seconds)\n            );\n\n            // Paginate products\n            const totalTasks = tasks.length;\n            const totalPages = Math.ceil(totalTasks / perPage);\n            page = Math.max(1, Math.min(totalPages, page));\n            const start = (page - 1) * perPage;\n            const currentTasks = tasks.slice(start, start + perPage);\n\n            // Prepare response with pagination details\n            return {\n                actual_amounts: undefined,\n                currentPage: page,\n                totalPages,\n                tasks: currentTasks,\n                allTasks: tasks\n            };\n        } catch (error) {\n            console.error('Error fetching tasks:', error);\n            return null;\n        }\n    }\n\n    async closeTask(taskId: number, telegramId: number): Promise<void> {\n        try {\n            const cacheKey = `task_telegram_id_${telegramId}_task_id_${taskId}`;\n            const cacheKey2 = `task_telegram_id_${telegramId}`;\n            cacheKey && await CacheService.forget(cacheKey);\n            cacheKey2 && await CacheService.forget(cacheKey2);\n\n\n            await axios.put(`${this.laravelApiUrl}/tasks/close/${taskId}`);\n        } catch (error) {\n            console.error('Error closing task:', error);\n            throw new Error('Error closing task');\n        }\n    }\n\n    async getTaskById(telegramId: number, task_id: number): Promise<TaskPaginatedResponse> {\n        const cacheKey = `task_telegram_id_${telegramId}_task_id_${task_id}`;\n        try {\n            // Fetch products from cache or API\n            const task: any = await CacheService.rememberCacheValue(\n                cacheKey,\n                () => this.fetchTasksFromApi(telegramId, task_id),\n                10 // Cache expiration set to 24 hours (86400 seconds)\n            );\n\n            // Prepare response with pagination details\n            return task;\n        } catch (error) {\n            console.error('Error fetching tasks:', error);\n            return null;\n        }\n    }\n\n    async getOneProductByTelegramId(telegramId: number, product_id: number): Promise<ProductPaginatedResponse> {\n        const cacheKey = `product_telegram_id_${telegramId}_product_id_${product_id}`;\n        try {\n            // Fetch products from cache or API\n            const product: any = await CacheService.rememberCacheValue(\n                cacheKey,\n                () => this.fetchProductsFromApi(telegramId, product_id),\n                86400 // Cache expiration set to 24 hours (86400 seconds)\n            );\n\n\n\n            // Prepare response with pagination details\n            return product;\n        } catch (error) {\n            console.error('Error fetching products:', error);\n            return null;\n        }\n    }\n\n\n    private async fetchProductsFromApi(telegramId: number, product_id: number = null): Promise<Product[]> {\n        try{\n            if (product_id === null) {\n                const response = await axios.get(`${this.laravelApiUrl}/yclients/goods/${telegramId}`);\n                return response.data;\n            } else {\n                const response = await axios.get(`${this.laravelApiUrl}/yclients/goods/${telegramId}&product_id=${product_id}`);\n                return response.data;\n            }\n        }\n        catch (error) {\n            console.error('Error fetching products:', error);\n            throw new Error('Error fetching products');\n        }\n    }\n\n    private async fetchTasksFromApi(telegramId: number, task_id: number = null): Promise<any> {\n        try {\n            if (task_id === null) {\n                const response = await axios.get(`${this.laravelApiUrl}/tasks?telegram_id=${telegramId}`);\n                return response.data;\n            } else {\n                const response = await axios.get(`${this.laravelApiUrl}/tasks?telegram_id=${telegramId}&task_id=${task_id}`);\n                return response.data;\n            }\n        } catch (error) {\n            console.error('Error fetching tasks:', error);\n            throw new Error('Error fetching tasks');\n        }\n    }\n\n    async getUsersByTelegramId(telegramId: number, page: number = 1, perPage: number = 10): Promise<any> {\n        const cacheKey = `users_telegram_id_${telegramId}`;\n        try {\n            // Fetch products from cache or API\n            const users: any = await CacheService.rememberCacheValue(\n                cacheKey,\n                () => this.fetchUsersFromApi(telegramId),\n                10 // Cache expiration set to 24 hours (86400 seconds)\n            );\n\n            // Paginate products\n            const totalUsers = users.length;\n            const totalPages = Math.ceil(totalUsers / perPage);\n            page = Math.max(1, Math.min(totalPages, page));\n            const start = (page - 1) * perPage;\n            const currentUsers = users.slice(start, start + perPage);\n\n            // Prepare response with pagination details\n            return {\n                actual_amounts: undefined,\n                currentPage: page,\n                totalPages,\n                tasks: currentUsers,\n                allTasks: users\n            };\n        } catch (error) {\n            console.error('Error fetching tasks:', error);\n            return null;\n        }\n    }\n\n    async getUserById(telegramId: number, user_id: number): Promise<any> {\n        const cacheKey = `user_telegram_id_${telegramId}_user_id_${user_id}`;\n        try {\n            // Fetch products from cache or API\n            const user: any = await CacheService.rememberCacheValue(\n                cacheKey,\n                () => this.fetchUsersFromApi(telegramId, user_id),\n                10 // Cache expiration set to 24 hours (86400 seconds)\n            );\n\n            // Prepare response with pagination details\n            return user;\n        } catch (error) {\n            console.error('Error fetching tasks:', error);\n            return null;\n        }\n    }\n\n\n   private async fetchUsersFromApi(telegramId: number, user_id: number = null): Promise<any> {\n        try {\n            if (user_id === null) {\n                const response = await axios.get(`${this.laravelApiUrl}/staff?telegram_id=${telegramId}`);\n                return response.data;\n            } else {\n                const response = await axios.get(`${this.laravelApiUrl}/staff?telegram_id=${telegramId}&user_id=${user_id}`);\n                return response.data;\n            }\n        } catch (error) {\n            console.error('Error fetching tasks:', error);\n            throw new Error('Error fetching tasks');\n        }\n   }\n\n   async auth(phone: string, password: string, telegram_id: number): Promise<void> {\n        try {\n            const response = await axios.post(`${this.laravelApiUrl}/auth`, {\n                phone,\n                password,\n                telegram_id\n            });\n            return response.data;\n        } catch (error) {\n            console.error('Error authenticating:', error);\n            throw new Error('Error authenticating');\n        }\n   }\n}\n\n\nexport default new LaravelService();\n","import { Telegraf, session, Scenes, Markup } from 'telegraf';\nimport WarehouseBot from '../services/warehouseBot';\nimport logger from '../../utils/logger/loggerTelegram'; // Ensure correct path\nimport { Redis as RedisStore } from '@telegraf/session/redis';\nimport {MyContext, MySession} from \"../types/MyContext\";\n\n// Import mainScene from the new file\nimport { mainScene } from '../services/scenes/mainScene';\nimport { tasksScene } from '../services/scenes/tasks/tasksScene';\nimport {cabinetGate} from \"../utils/cabinetGate\";\nimport {salaryScene} from \"../services/scenes/salary/salaryScene\";\nimport {notifictationsScene} from \"../services/scenes/notifications/notificationsScene\";\nimport {employmentScene} from \"../services/scenes/employment/employmentScene\";\nimport {warehouseScene} from \"../services/scenes/warehouse/warehouseScene\";\nimport {staffScene} from \"../services/scenes/staff/staffScene\";\nimport { createNotifictationScene as notificationsCreateNotificationScene } from \"../services/scenes/notifications/createNotificationScene\";\nimport { notificationsListScene } from \"../services/scenes/notifications/notificationsListScene\";\nimport { editNotificationScene as notificationsEditNotificationScene } from \"../services/scenes/notifications/editNotificationScene\";\n\nimport { createNotifictationScene as warehouseCreateNotificationScene } from \"../services/scenes/warehouse/createNotificationScene\";\nimport { editNotificationScene as warehouseEditNotificationScene } from \"../services/scenes/warehouse/editNotificationScene\";\n\n\n// If you have other scenes like subscriptionScene, consider importing them similarly\n\n\nconst botToken: string = process.env.TELEGRAM_BOT_TOKEN_SUPPLIES_NEW!;\nconst bot: Telegraf<MyContext> = new Telegraf(botToken);\nconst warehouseBot = new WarehouseBot(bot);\n\n\nconst store = RedisStore<MySession>({\n    url: 'redis://redis:6379/2',\n});\n\n// Initialize the stage with imported scenes\nconst stage = new Scenes.Stage<MyContext>([\n    mainScene,\n    tasksScene,\n    salaryScene,\n    notifictationsScene,\n    notificationsCreateNotificationScene,\n    notificationsListScene,\n    employmentScene,\n    warehouseScene,\n    staffScene,\n    notificationsEditNotificationScene,\n    warehouseScene,\n    warehouseCreateNotificationScene,\n    warehouseEditNotificationScene\n]);\n\n// Middleware to log incoming updates\nbot.use(session({ store }));\nbot.use(stage.middleware());\nbot.use(async (ctx: MyContext, next: () => Promise<void>) => {\n    logger.info('Received update', { update: ctx.update });\n    await next();\n});\n\n// Handle /start command\nbot.start(async (ctx: MyContext) => {\n    const startPayload = ctx.payload;\n    await ctx.scene.enter('main');\n});\n\n// Handle 'mainmenu' action\nbot.action('mainmenu', async (ctx: MyContext) => {\n    await ctx.scene.enter('main');\n    await ctx.answerCbQuery('🏦Главная');\n});\n\n// Handle /ping command\nbot.command('ping', (ctx: MyContext) => {\n    ctx.reply('pong!');\n});\n\nbot.command('autobooking', async (ctx: MyContext) => {\n    await cabinetGate(ctx, 'autoBookingWizard');\n});\n\nmainScene.action('payments', async (ctx: MyContext) => {\n    await ctx.scene.enter('subscriptionWizard');\n});\n\nbot.action('create_notification', async (ctx) => {\n    await ctx.scene.enter('create_notification');\n});\n\nbot.action('active_notifications', async (ctx) => {\n    await ctx.scene.enter('active_notifications');\n});\n\nbot.action('warehouse_notification', async (ctx) => {\n    await ctx.scene.enter('warehouse_create_notification');\n});\n\nbot.action('warehouse_list', async (ctx) => {\n    await ctx.scene.enter('warehouse_edit_notification');\n});\n\nbot.on('callback_query', async (ctx: MyContext) => {\n    await ctx.answerCbQuery('👌');\n});\n\n\n\n\n\nexport const sendMessageToClient = async (chatId: string, message: string, isButtonAvailable = true) => {\n\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n    ]);\n\n    try {\n        const response = await bot.telegram.sendMessage(chatId, message, isButtonAvailable ? keyboard : null);\n\n        console.log('Message sent to Telegram successfully!', response);\n        return true;\n    } catch (error: any) {\n        console.error('Exception occurred while sending message:', error.message);\n        return false;\n    }\n\n\n\n};\n// Export the bot instance\nexport default bot;\n","import {Markup} from \"telegraf\";\nimport {MyContext} from \"../../../types/MyContext\";\n\nconst defaultButtons = [\n    //Посмотреть заявки\n    [Markup.button.callback('Заявки', 'viewApplications')],\n    //Трудоустроить\n    [Markup.button.callback('Трудоустроить', 'employment')],\n\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nconst defaultButtonsMenuOnly = [\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nexport const enterHandler = async (ctx: MyContext) => {\n    const messageText = `[трудоустройство]`;\n\n    const buttonsArray = Markup.inlineKeyboard([...defaultButtons]);\n\n    if (ctx.callbackQuery && ctx.callbackQuery.message) {\n        try {\n            // If the interaction is from a callback query, edit the existing message\n            await ctx.editMessageText(messageText, buttonsArray);\n        }\n        catch (error) {\n            await ctx.reply(messageText, buttonsArray);\n        }\n    } else {\n        await ctx.reply(messageText, buttonsArray);\n    }\n}\n\nexport const showApplications = async (ctx: MyContext) => {\n    const messageText = `Тут выводим активные заявки на трудоустройство`;\n\n    const buttonsArray = Markup.inlineKeyboard([...defaultButtonsMenuOnly]);\n\n    if (ctx.callbackQuery && ctx.callbackQuery.message) {\n        try {\n            // If the interaction is from a callback query, edit the existing message\n            await ctx.editMessageText(messageText, buttonsArray);\n        }\n        catch (error) {\n            await ctx.reply(messageText, buttonsArray);\n        }\n    } else {\n        await ctx.reply(messageText, buttonsArray);\n    }\n}\n\nexport const showEmployment = async (ctx: MyContext) => {\n    const messageText = `Перейдите в @Beauty_bot_master_bot по кнопке ниже, чтобы подать заявку на трудоустройство`;\n\n    //@Beauty_bot_master_bot\n\n    const go_to_bot = Markup.button.url('Перейти в бота', 'https://t.me/Beauty_bot_master_bot?start=registration');\n\n    const buttonsArray = Markup.inlineKeyboard([[go_to_bot], ...defaultButtonsMenuOnly]);\n\n    if (ctx.callbackQuery && ctx.callbackQuery.message) {\n        try {\n            // If the interaction is from a callback query, edit the existing message\n            await ctx.editMessageText(messageText, buttonsArray);\n        }\n        catch (error) {\n            await ctx.reply(messageText, buttonsArray);\n        }\n    } else {\n        await ctx.reply(messageText, buttonsArray);\n    }\n}","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\n\nimport {enterHandler, showApplications, showEmployment} from \"./employmentActions\";\n\nexport const employmentScene = new Scenes.BaseScene<MyContext>('employment');\n\nconst noKeyboard = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\n// Define the enter handler\nemploymentScene.enter(async (ctx: MyContext) => {\n    await enterHandler(ctx);\n});\n\nemploymentScene.action('reenter', async (ctx: MyContext) => {\n    await ctx.scene.reenter();\n});\n\n//viewApplications\n//employment\nemploymentScene.action('viewApplications', async (ctx: MyContext) => {\n    await showApplications(ctx);\n});\n\nemploymentScene.action('employment', async (ctx: MyContext) => {\n    await showEmployment(ctx);\n});","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../types/MyContext';\nimport CacheService from '../../../utils/redis/Cache/Cache';\nimport { fmt, link } from 'telegraf/format';\nimport logger from '../../../utils/logger/loggerTelegram';\nimport {searchRequestsScene} from \"./searchRequestsScene\";\nimport LaravelService from \"../../../services/laravelService\";\nimport {cabinetGate} from \"../../utils/cabinetGate\";\n\nexport const mainScene = new Scenes.BaseScene<MyContext>('main');\n\n// Define the enter handler\nmainScene.enter(async (ctx: MyContext) => {\n    const messageText = `главный экран для управляющего`;\n\n    const mainMenuKeyboard = Markup.inlineKeyboard([\n        [\n            Markup.button.callback('задачи', 'tasks')\n        ],\n        [\n            Markup.button.callback('расчет зп', 'salary'),\n            Markup.button.callback('уведомления', 'notifications'),\n        ],\n        [\n            Markup.button.callback('трудоустройство', 'employment'),\n\n        ],\n        [\n            Markup.button.callback('управление складом', 'warehouse'),\n            Markup.button.callback('управление персоналом', 'staff'),\n        ]\n    ]);\n\n    if (ctx.callbackQuery && ctx.callbackQuery.message) {\n        try {\n            // If the interaction is from a callback query, edit the existing message\n            await ctx.editMessageText(messageText, mainMenuKeyboard);\n        }\n        catch (error) {\n            await ctx.reply(messageText, mainMenuKeyboard);\n        }\n    } else {\n        // Otherwise, send a new message\n        await ctx.reply(messageText, mainMenuKeyboard);\n    }\n\n});\n\n// Handle 'autobooking' action\nmainScene.action('tasks', async (ctx: MyContext) => {\n  await ctx.scene.enter('tasks');\n});\n\nmainScene.action('salary', async (ctx: MyContext) => {\n    await ctx.scene.enter('salary');\n});\n\nmainScene.action('notifications', async (ctx: MyContext) => {\n    await cabinetGate(ctx, 'notifications');\n});\n\nmainScene.action('employment', async (ctx: MyContext) => {\n    await ctx.scene.enter('employment');\n});\nmainScene.action('warehouse', async (ctx: MyContext) => {\n    await ctx.scene.enter('warehouse');\n});\nmainScene.action('staff', async (ctx: MyContext) => {\n    await ctx.scene.enter('staff');\n});\n\nmainScene.action('cabinets', async (ctx: MyContext) => {\n    await cabinetGate(ctx, 'showCabinetsScene');\n})\n","import {Markup} from \"telegraf\";\nimport {MyContext} from \"../../../types/MyContext\";\nimport {code, fmt} from \"telegraf/format\";\nimport logger from \"../../../../utils/logger/loggerTelegram\";\nimport LaravelService from \"../../../../services/laravelService\";\n\nconst defaultButtons = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nconst defaultButtonsMenuOnly = [\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nexport const enterHandler = async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n    const message = fmt`Создать уведомление\n\nВведите данные по уведомлению: \n${code('Название уведомления')}`;\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Введите название уведомления');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n    return ctx.wizard.next();\n}\n\nexport const promptForSum = async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Пропустить', 'notification_skip_sum')],\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`Какая сумма для оплаты?\n(если суммы нет, то пропустите это поле)`;\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Введите сумму для оплаты');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n    return ctx.wizard.next();\n}\n\nexport const promptForDateTime = async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`Введите дату и время уведомления в формате:\ndd.mm.yyyy hh:mm`;\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Введите дату и время уведомления');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n    return ctx.wizard.next();\n}\n\nexport const promptForNotificationType = async (ctx: MyContext) => {\n    //keyboard one time or constant notification\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Одноразовое уведомление', 'notification_one_time')],\n        [Markup.button.callback('Постоянное уведомление', 'notification_constant')],\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`Уведомление разовое или постоянное?`;\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Выберите тип уведомления');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n    return ctx.wizard.next();\n}\n\nexport const sendSuccessMessage = async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Создать еще', 'create_notification')],\n        [Markup.button.callback('Все уведомления', 'active_notifications')],\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`Уведомление создано\n${code('Название уведомления')}: ${ctx.scene.session.notificationForm.name}\n${code('Сумма для оплаты')}: ${ctx.scene.session.notificationForm.sum}\n${code('Дата и время уведомления')}: ${ctx.scene.session.notificationForm.dateTime}\n${code('Тип уведомления')}: ${ctx.scene.session.notificationForm.type}`;\n\n    try {\n        await LaravelService.createNotificationByTelegramId(ctx.from.id, ctx.scene.session.notificationForm);\n    } catch (error) {\n        logger.error('Error creating notification:', error);\n        await ctx.reply('Произошла ошибка при создании уведомления. Пожалуйста, попробуйте позже.', Markup.inlineKeyboard(defaultButtonsMenuOnly));\n    }\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Уведомление создано');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n}","import {Composer, Markup, Scenes} from 'telegraf';\nimport {MyContext} from '../../../types/MyContext';\n\nimport {\n    enterHandler,\n    promptForDateTime,\n    promptForNotificationType,\n    promptForSum,\n    sendSuccessMessage\n} from \"./createNotificationActions\";\nimport {fmt} from \"telegraf/format\";\nimport {sendOrderConfirmation} from \"../actions/autoBookingActions\";\n\nconst noKeyboard = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nconst handleNameInput = new Composer<MyContext>();\n\nhandleNameInput.on('text', async (ctx) => {\n    const name = ctx.message.text;\n    ctx.scene.session.notificationForm.name = name;\n\n    await promptForSum(ctx);\n});\n\nconst handleSumInput = new Composer<MyContext>();\n\nhandleSumInput.on('text', async (ctx) => {\n    const sum = ctx.message.text;\n    ctx.scene.session.notificationForm.sum = sum;\n    await promptForDateTime(ctx);\n});\n\nhandleSumInput.action('notification_skip_sum', async (ctx) => {\n    ctx.scene.session.notificationForm.sum = null;\n    await promptForDateTime(ctx);\n});\n\nconst handleDateTimeInput = new Composer<MyContext>();\n\nhandleDateTimeInput.on('text', async (ctx) => {\n    //date in format dd.mm.yyyy hh:mm\n    const input = ctx.message.text;\n\n    // Regular expression to match dd.mm.yyyy hh:mm\n    const dateRegex = /^(\\d{2})\\.(\\d{2})\\.(\\d{4}) (\\d{2}):(\\d{2})$/;\n\n    // Find dates that do not match the regex\n    const invalidFormatDate = !dateRegex.test(input);\n\n    if (invalidFormatDate) {\n        const errorMessage = fmt`❌ Некорректный формат даты: ${invalidFormatDate}.\nПожалуйста, введите дату в формате ГГГГ.ММ.ДД. Например:\n• 2025.08.10 12:00`;\n\n        // Send the error message with the default navigation buttons\n        await ctx.reply(errorMessage, {\n            ...Markup.inlineKeyboard(noKeyboard),\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n\n        return; // Stay on the current step\n    }\n\n    // If all dates are valid, save them to the session\n    ctx.scene.session.notificationForm.dateTime = ctx.message.text;\n    await promptForNotificationType(ctx);\n});\n\n\nconst handleNotificationTypeInput = new Composer<MyContext>();\nhandleNotificationTypeInput.action('notification_one_time', async (ctx) => {\n    ctx.scene.session.notificationForm.type = 'one_time';\n    await sendSuccessMessage(ctx);\n});\nhandleNotificationTypeInput.action('notification_constant', async (ctx) => {\n    ctx.scene.session.notificationForm.type = 'constant';\n    await sendSuccessMessage(ctx);\n});\n\nexport const createNotifictationScene = new Scenes.WizardScene<MyContext>(\n    'create_notification',\n    // Step 1: Prompt to enter name\n    async (ctx) => {\n        ctx.scene.session.notificationForm = {\n            name: null,\n            sum: null,\n            dateTime: null,\n            type: null,\n        }\n       await enterHandler(ctx);\n    },\n    // Step 2: Save name and prompt to enter sum\n    handleNameInput,\n    // Step 3: Save sum and prompt to enter date\n    handleSumInput,\n    // Step 4: Save date and prompt to enter type\n    handleDateTimeInput,\n    // Step 5: Save type and sucecss\n    handleNotificationTypeInput,\n);\n\ncreateNotifictationScene.command('start', async (ctx) => {\n    await ctx.scene.enter('main');\n});\ncreateNotifictationScene.action('mainmenu', async (ctx) => {\n    await ctx.scene.enter('main');\n});\n","import {Markup} from \"telegraf\";\nimport {MyContext} from \"../../../types/MyContext\";\nimport {bold, code, fmt} from \"telegraf/format\";\nimport logger from \"../../../../utils/logger/loggerTelegram\";\nimport LaravelService from \"../../../../services/laravelService\";\n\nconst defaultButtons = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nconst defaultButtonsMenuOnly = [\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nexport const enterHandler = async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Пропустить', 'notification_skip_name')],\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n\n    ctx.scene.session.notificationForm = ctx.session.notificationForm\n\n    const message = fmt`Редактировать уведомление\n\n${bold('Текущее название уведомления: ')} ${code(ctx.session.notificationForm.name)}\n\nВведите новое название уведомления или нажмите пропустить\n`;\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Введите название уведомления');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n    return ctx.wizard.next();\n}\n\nexport const promptForSum = async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Пропустить', 'notification_skip_sum')],\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`Какая сумма для оплаты?\n\n${bold('Текущая сумма оплаты: ')} ${code(ctx.session.notificationForm.sum)}\n\nВведите новую сумму для оплаты или нажмите пропустить\n`;\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Введите сумму для оплаты');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n    return ctx.wizard.next();\n}\n\nexport const promptForDateTime = async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Пропустить', 'notification_skip_date')],\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`Введите дату и время уведомления в формате:\ndd.mm.yyyy hh:mm\n\n ${bold('Текущая дата и время: ')} ${code(ctx.session.notificationForm.dateTime)}\n \n Введите новую дату и время или нажмите пропустить\n`;\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Введите дату и время уведомления');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n    return ctx.wizard.next();\n}\n\nexport const promptForNotificationType = async (ctx: MyContext) => {\n    //keyboard one time or constant notification\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Пропустить', 'notification_skip_type')],\n        [Markup.button.callback('Одноразовое уведомление', 'notification_one_time')],\n        [Markup.button.callback('Постоянное уведомление', 'notification_constant')],\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`Уведомление разовое или постоянное?\n    \n    ${bold('Текущий тип уведомления: ')} ${code(ctx.session.notificationForm.type)}\n    \n    Выберите тип уведомления или нажмите пропустить\n    `;\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Выберите тип уведомления');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n    return ctx.wizard.next();\n}\n\nexport const sendSuccessMessage = async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Все уведомления', 'active_notifications')],\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`Уведомление обновлено: \n${code('Название уведомления')}: ${ctx.scene.session.notificationForm.name}\n${code('Сумма для оплаты')}: ${ctx.scene.session.notificationForm.sum}\n${code('Дата и время уведомления')}: ${ctx.scene.session.notificationForm.dateTime}\n${code('Тип уведомления')}: ${ctx.scene.session.notificationForm.type}`;\n\n    try {\n        await LaravelService.updateNotificationById(ctx.session.notificationForm.id, ctx.scene.session.notificationForm);\n    } catch (error) {\n        logger.error('Error creating notification:', error);\n        await ctx.reply('Произошла ошибка при создании уведомления. Пожалуйста, попробуйте позже.', Markup.inlineKeyboard(defaultButtonsMenuOnly));\n    }\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Уведомление создано');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n}","import {Composer, Markup, Scenes} from 'telegraf';\nimport {MyContext} from '../../../types/MyContext';\n\nimport {\n    enterHandler,\n    promptForDateTime,\n    promptForNotificationType,\n    promptForSum,\n    sendSuccessMessage\n} from \"./editNotificationActions\";\n\nconst noKeyboard = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nconst handleNameInput = new Composer<MyContext>();\n\nhandleNameInput.on('text', async (ctx) => {\n    const name = ctx.message.text;\n    ctx.scene.session.notificationForm.name = name;\n\n    await promptForSum(ctx);\n});\n\nconst handleSumInput = new Composer<MyContext>();\n\nhandleSumInput.on('text', async (ctx) => {\n    const sum = ctx.message.text;\n    ctx.scene.session.notificationForm.sum = sum;\n    await promptForDateTime(ctx);\n});\n\n\n//notification_skip_name\nhandleNameInput.action('notification_skip_name', async (ctx) => {\n    await promptForSum(ctx);\n});\n\nhandleSumInput.action('notification_skip_sum', async (ctx) => {\n    await promptForDateTime(ctx);\n});\n\n\n\n\n\nconst handleDateTimeInput = new Composer<MyContext>();\nhandleDateTimeInput.on('text', async (ctx) => {\n    ctx.scene.session.notificationForm.dateTime = ctx.message.text;\n    await promptForNotificationType(ctx);\n});\n\n//notification_skip_date\nhandleDateTimeInput.action('notification_skip_date', async (ctx) => {\n    await promptForNotificationType(ctx);\n});\n\n\n\nconst handleNotificationTypeInput = new Composer<MyContext>();\nhandleNotificationTypeInput.action('notification_one_time', async (ctx) => {\n    ctx.scene.session.notificationForm.type = 'one_time';\n    await sendSuccessMessage(ctx);\n});\n\n//notification_skip_type\nhandleNotificationTypeInput.action('notification_skip_type', async (ctx) => {\n    await sendSuccessMessage(ctx);\n});\n\n\nhandleNotificationTypeInput.action('notification_constant', async (ctx) => {\n    ctx.scene.session.notificationForm.type = 'constant';\n    await sendSuccessMessage(ctx);\n});\n\nexport const editNotificationScene = new Scenes.WizardScene<MyContext>(\n    'edit_notification',\n    // Step 1: Prompt to enter name\n    async (ctx) => {\n        ctx.scene.session.notificationForm = {\n            name: null,\n            sum: null,\n            dateTime: null,\n            type: null,\n        }\n       await enterHandler(ctx);\n    },\n    // Step 2: Save name and prompt to enter sum\n    handleNameInput,\n    // Step 3: Save sum and prompt to enter date\n    handleSumInput,\n    // Step 4: Save date and prompt to enter type\n    handleDateTimeInput,\n    // Step 5: Save type and sucecss\n    handleNotificationTypeInput,\n);\n\neditNotificationScene.command('start', async (ctx) => {\n    await ctx.scene.enter('main');\n});\neditNotificationScene.action('mainmenu', async (ctx) => {\n    await ctx.scene.enter('main');\n});\n","import {Markup} from \"telegraf\";\nimport {MyContext} from \"../../../types/MyContext\";\nimport {fmt} from \"telegraf/format\";\nimport logger from \"../../../../utils/logger/loggerTelegram\";\n\nconst defaultButtons = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nconst defaultButtonsMenuOnly = [\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nexport const enterHandler = async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Создать уведомление', 'create_notification')],\n        [Markup.button.callback('Активные уведомления', 'active_notifications')],\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`что хотите сделать?`\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Уведомления');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n}\n\nexport const notificationListHandler = async (ctx: MyContext) => {\n\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('👈 Назад', 'reenter')],\n        [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`Активные уведомления:`\n\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Активные уведомления');\n    } catch (error) {\n        logger.error('Error sending notification list message:', error);\n        await ctx.reply(message, keyboard);\n    }\n}","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\nimport logger from '../../../../utils/logger/loggerTelegram';\nimport laravelService from '../../../../services/laravelService';\nimport { bold, fmt } from \"telegraf/format\";\n\nexport const notificationsListScene = new Scenes.BaseScene<MyContext>('active_notifications');\n\n// Since type is always 'notifications', no need for type mapping\nconst listNotifications = async (ctx: MyContext) => {\n    // Initialize page number in session if not set\n    if (!ctx.session.searchRequestsPage) {\n        ctx.session.searchRequestsPage = 1;\n    }\n\n    logger.info('Entered searchRequestsScene', { session: ctx.scene.session });\n\n    const currentPage = ctx.session.searchRequestsPage;\n    const perPage = 1; // Adjust as needed\n\n    const typeText = 'уведомлений'; // Since type is always 'notifications'\n\n    const messageTextHeader = `🫡 Список активных заявок на ${typeText} (Страница ${currentPage})`;\n\n    try {\n        // Fetch paginated notifications\n        const paginatedNotifications = await laravelService.getNotificationsByTelegramId(\n            ctx.from.id,\n            currentPage,\n            perPage,\n            'notification' // Fixed type\n        );\n\n        console.log('paginatedNotifications:', paginatedNotifications);\n\n        if (!paginatedNotifications || paginatedNotifications.data.length === 0) {\n            const noNotificationsText = `📭 У вас нет активных ${typeText}.`;\n            const noKeyboard = Markup.inlineKeyboard([\n                [Markup.button.callback('👈 Назад', 'reenter')],\n                [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n            ]);\n\n            if (ctx.callbackQuery && ctx.callbackQuery.message) {\n                await ctx.editMessageText(noNotificationsText, noKeyboard);\n            } else {\n                await ctx.reply(noNotificationsText, noKeyboard);\n            }\n\n            return;\n        }\n\n        let notification;\n        try {\n            notification = paginatedNotifications.data[0];\n        }\n        catch (error) {\n            logger.error('Error getting notifications:', error);\n            await ctx.answerCbQuery('Произошла ошибка [0]', {\n                show_alert: true,\n            });\n            return;\n        }\n\n        const name = notification.settings.name;\n        const sum = notification.settings.sum;\n        const dateTime = notification.settings.dateTime;\n        const notificationType = notification.settings.type;\n\n        // Assuming 'status' field exists\n        const statusText = notification.status === 'started'\n            ? 'ищем'\n            : (notification.status === 'finished' ? 'нашли' : 'вышло время');\n\n        // Format the notification message\n        const messageText = fmt`\n🫡 ${bold`Список активных ${typeText}`}\n\n${bold`Название:`} ${name}\n${bold`Сумма:`} ${sum}\n${bold`Время:`} ${dateTime}\n${bold`Тип:`} ${notificationType}\n${bold`Статус:`} ${statusText}\n\nСтраница: ${currentPage} из ${paginatedNotifications.last_page}\n        `;\n\n        // Build pagination buttons\n        const buttons = [];\n\n        const buttonsPagination = [];\n\n        if (paginatedNotifications.prev_page_url) {\n            buttonsPagination.push(Markup.button.callback('⬅️', 'notifications_prev'));\n        }\n\n        if (paginatedNotifications.next_page_url) {\n            buttonsPagination.push(Markup.button.callback('➡️', 'notifications_next'));\n        }\n\n        const buttonDelete = Markup.button.callback('❌ Удалить', `delete_${notification.id}`);\n\n        const buttonEdit = Markup.button.callback('✏️ Редактировать', `edit_${notification.id}`);\n\n        buttons.push([buttonDelete]);\n        buttons.push([buttonEdit]);\n        if (buttonsPagination.length > 0) {\n            buttons.push(buttonsPagination);\n        }\n\n        // Always show 'Main Menu' and 'Back' buttons\n        buttons.push([\n            Markup.button.callback('👈 Назад', 'reenter'),\n            Markup.button.callback('👌 Главное меню', 'mainmenu'),\n        ]);\n\n        const keyboard = Markup.inlineKeyboard(buttons, { columns: 2 }); // Adjust columns as per button arrangement\n\n        ctx.session.notifications = paginatedNotifications.data;\n\n        if (ctx.callbackQuery && ctx.callbackQuery.message) {\n            try {\n                // Edit existing message if interaction is from a callback query\n                await ctx.editMessageText(messageText, {\n                    ...keyboard,\n                    parse_mode: 'Markdown', // Ensure message formatting matches parse mode\n                });\n            } catch (error) {\n                logger.error('Error sending notifications message:', error);\n                await ctx.reply(messageText, {\n                    ...keyboard,\n                    parse_mode: 'Markdown',\n                });\n            }\n        } else {\n            // Otherwise, send a new message\n            await ctx.reply(messageText, {\n                ...keyboard,\n                parse_mode: 'Markdown',\n            });\n        }\n    } catch (error) {\n        logger.error('Error getting notifications:', error);\n\n    }\n}\n\nnotificationsListScene.enter(async (ctx: MyContext) => {\n    // Since there's only one type, no need to ask user to select type\n    await listNotifications(ctx);\n});\n\nconst listNotificationsAction = async (ctx: MyContext) => {\n    await listNotifications(ctx);\n}\n\nnotificationsListScene.action('notifications_next', async (ctx: MyContext) => {\n    if (ctx.session.searchRequestsPage) {\n        logger.info('Incrementing page number');\n        ctx.session.searchRequestsPage += 1;\n\n        await listNotificationsAction(ctx);\n    } else {\n        logger.warn('Page number not set');\n        // If for some reason the page isn't set, reset to page 1\n        ctx.session.searchRequestsPage = 1;\n        await ctx.scene.reenter();\n    }\n});\n\n// Handle 'Previous' button callback\nnotificationsListScene.action('notifications_prev', async (ctx: MyContext) => {\n    if (ctx.session.searchRequestsPage && ctx.session.searchRequestsPage > 1) {\n        ctx.session.searchRequestsPage -= 1;\n\n        await listNotificationsAction(ctx);\n    } else {\n        await ctx.answerCbQuery('Вы уже на первой странице.', { show_alert: true });\n    }\n});\n\nnotificationsListScene.action(/delete_(.*)/, async (ctx) => {\n    const notificationId = ctx.match[1];\n    try {\n        await laravelService.deleteNotification(notificationId);\n        await ctx.answerCbQuery('Заявка удалена', { show_alert: true });\n        await ctx.scene.reenter();\n    } catch (error) {\n        logger.error('Error deleting notification:', error);\n        await ctx.answerCbQuery('Произошла ошибка при удалении заявки.', { show_alert: true });\n    }\n});\n\nnotificationsListScene.action(/edit_(.*)/, async (ctx) => {\n    const notificationId = ctx.match[1];\n    ctx.session.notificationId = notificationId;\n    console.log('notificationId:', notificationId);\n    console.log('ctx.session.notifications:', ctx.session.notifications);\n\n    console.log('ctx.session.notifications.find((n: any) => n.id == notificationId):', ctx.session.notifications.find((n: any) => n.id == notificationId).settings.name);\n    ctx.session.notificationForm = {\n        id: notificationId,\n        name: ctx.session.notifications.find((n: any) => n.id == notificationId).settings.name,\n        sum: ctx.session.notifications.find((n: any) => n.id == notificationId).settings.sum,\n        dateTime: ctx.session.notifications.find((n: any) => n.id == notificationId).settings.dateTime,\n        type: ctx.session.notifications.find((n: any) => n.id == notificationId).settings.type,\n    }\n    await ctx.scene.enter('edit_notification');\n});\n\nnotificationsListScene.action('reenter', async (ctx: MyContext) => {\n    await ctx.scene.reenter();\n});\n\n\nexport default notificationsListScene;\n","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\n\nimport {enterHandler, notificationListHandler} from \"./notificationActions\";\nimport {fmt} from \"telegraf/format\";\nimport logger from \"../../../../utils/logger/loggerTelegram\";\nimport cabinetWizzard from \"../createCabinetScene\";\n\n\nexport const notifictationsScene = new Scenes.BaseScene<MyContext>('notifications');\n\n// Define the enter handler\nnotifictationsScene.enter(async (ctx: MyContext) => {\n    await enterHandler(ctx);\n});\n\n\nconst noKeyboard = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\n\nnotifictationsScene.command('start', async (ctx) => {\n    await ctx.scene.enter('main');\n});\nnotifictationsScene.action('mainmenu', async (ctx) => {\n    await ctx.scene.enter('main');\n});\n\nnotifictationsScene.action('create_notification', async (ctx) => {\n    await ctx.scene.enter('create_notification');\n});\n\nnotifictationsScene.action('active_notifications', async (ctx) => {\n    await ctx.scene.enter('active_notifications');\n});","import {Markup} from \"telegraf\";\nimport {MyContext} from \"../../../types/MyContext\";\n\nconst defaultButtons = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nconst defaultButtonsMenuOnly = [\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nexport const enterHandler = async (ctx: MyContext) => {\n    const messageText = `Тут будет расчет зп`;\n\n    const buttonsArray = Markup.inlineKeyboard([...defaultButtonsMenuOnly]);\n\n    if (ctx.callbackQuery && ctx.callbackQuery.message) {\n        try {\n            // If the interaction is from a callback query, edit the existing message\n            await ctx.editMessageText(messageText, buttonsArray);\n        }\n        catch (error) {\n            await ctx.reply(messageText, buttonsArray);\n        }\n    } else {\n        await ctx.reply(messageText, buttonsArray);\n    }\n}","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\n\nimport {enterHandler} from \"./salaryActions\";\n\nexport const salaryScene = new Scenes.BaseScene<MyContext>('salary');\n\nconst noKeyboard = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\n// Define the enter handler\nsalaryScene.enter(async (ctx: MyContext) => {\n    await enterHandler(ctx);\n});\n\nsalaryScene.action('reenter', async (ctx: MyContext) => {\n    await ctx.scene.reenter();\n});","import {Markup} from \"telegraf\";\nimport {MyContext} from \"../../../types/MyContext\";\nimport LaravelService from \"../../../../services/laravelService\";\nimport logger from \"../../../../utils/logger/loggerTelegram\";\n\nconst defaultButtons = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nconst defaultButtonsMenuOnly = [\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nexport const enterHandler = async (ctx: MyContext) => {\n\n    const page = ctx.session.page || 1; // Store page in session for navigation\n    const perPage = 10; // Adjust perPage if needed\n\n    try {\n        const productData = await LaravelService.getUsersByTelegramId(ctx.from.id, page, perPage);\n\n        console.log('productData', productData);\n\n        if (!productData || productData.tasks.length === 0) {\n            await ctx.reply('Нет доступных сотрудников', Markup.inlineKeyboard([\n                [Markup.button.callback('Главное меню', 'mainmenu')]\n            ]));\n            return ctx.wizard.next();\n        }\n\n        const { tasks, currentPage, totalPages } = productData;\n\n\n        // Generate buttons for products\n        const buttons = tasks.map(task => {\n            return [\n                Markup.button.callback(task.name, `user_${task.id}`)\n            ]\n        });\n\n        // Add navigation buttons\n        const navigationButtons = [];\n        if (currentPage > 1) {\n            navigationButtons.push(Markup.button.callback('← Назад', `tasks_page_${currentPage - 1}`));\n        }\n        if (currentPage < totalPages) {\n            navigationButtons.push(Markup.button.callback('Вперед →', `tasks_page_${currentPage + 1}`));\n        }\n        if (navigationButtons.length) {\n            buttons.push(navigationButtons);\n        }\n\n        buttons.push(...defaultButtonsMenuOnly);\n\n        const message = `[управление персоналом]\nВ этом блоке вы можете увидеть всех мастеров\n\n[списком в кнопках выводи карточки персонала]`;\n        const keyboard = Markup.inlineKeyboard(buttons);\n\n        try {\n            await ctx.editMessageText(message, {\n                ...keyboard, // Spread the keyboard markup\n                link_preview_options: {\n                    is_disabled: true\n                },\n            });\n            await ctx.answerCbQuery('Персонал');\n        } catch (error) {\n            logger.error('Error sending autobooking message:', error);\n            await ctx.reply(message, keyboard);\n        }\n\n        await ctx.answerCbQuery();\n    } catch (error) {\n        logger.error('Error fetching products:', error);\n        await ctx.reply('Произошла ошибка при загрузке персонала', Markup.inlineKeyboard([\n            [Markup.button.callback('Главное меню', 'mainmenu')]\n        ]));\n    }\n}\n\nexport const userBlockHandler = async (ctx: MyContext) => {\n    const user_id = ctx.scene.session.user_id;\n    const userOne = await LaravelService.getUserById(ctx.from.id, user_id);\n    const user = userOne[0];\n    const message = `[карточка персонала]\n    \nИмя: ${user.name}\nТелефон: ${user.phone}\nEmail: ${user.email}\n`;\n\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('👈 Назад', 'reenter')],\n        [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n    ]);\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Персонал');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n}","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\n\nimport {enterHandler, userBlockHandler} from \"./staffActions\";\nimport {taskBlockHandler} from \"../tasks/tasksActions\";\nimport {tasksScene} from \"../tasks/tasksScene\";\n\nexport const staffScene = new Scenes.BaseScene<MyContext>('staff');\n\nconst noKeyboard = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\n// Define the enter handler\nstaffScene.enter(async (ctx: MyContext) => {\n    await enterHandler(ctx);\n});\n\nstaffScene.action('reenter', async (ctx: MyContext) => {\n    await ctx.scene.reenter();\n});\n\nstaffScene.action(/^user_(\\d+)$/, async (ctx) => {\n    const user_id = parseInt(ctx.match[1], 10);\n    ctx.scene.session.user_id = user_id;\n    return userBlockHandler(ctx);\n});","import {Markup} from \"telegraf\";\nimport {MyContext} from \"../../../types/MyContext\";\nimport LaravelService from \"../../../../services/laravelService\";\nimport logger from \"../../../../utils/logger/loggerTelegram\";\nimport {code, fmt} from \"telegraf/format\";\n\nconst defaultButtons = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nconst defaultButtonsMenuOnly = [\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nexport const enterHandler = async (ctx: MyContext) => {\n\n    const page = ctx.session.page || 1; // Store page in session for navigation\n    const perPage = 10; // Adjust perPage if needed\n\n    try {\n        const productData = await LaravelService.getTaskByTelegramId(ctx.from.id, page, perPage);\n\n        console.log('productData', productData);\n\n        if (!productData || productData.tasks.length === 0) {\n            await ctx.reply('Нет доступных товаров.', Markup.inlineKeyboard([\n                [Markup.button.callback('Главное меню', 'mainmenu')]\n            ]));\n            return ctx.wizard.next();\n        }\n\n        const { tasks, currentPage, totalPages } = productData;\n\n\n        // Generate buttons for products\n        const buttons = tasks.map(task => {\n            const statusEmoji = task.status == 'open' ? '🟡' : '🟢';\n            return [\n            Markup.button.callback(statusEmoji + ' ' + task.name, `task_${task.id}`)\n        ]\n        });\n\n        // Add navigation buttons\n        const navigationButtons = [];\n        if (currentPage > 1) {\n            navigationButtons.push(Markup.button.callback('← Назад', `tasks_page_${currentPage - 1}`));\n        }\n        if (currentPage < totalPages) {\n            navigationButtons.push(Markup.button.callback('Вперед →', `tasks_page_${currentPage + 1}`));\n        }\n        if (navigationButtons.length) {\n            buttons.push(navigationButtons);\n        }\n\n        buttons.push(...defaultButtonsMenuOnly);\n\n        const message = `[задачи]\n\nВ этом блоке будут все задачи\n\n[списком в кнопках выводи задачи]`;\n        const keyboard = Markup.inlineKeyboard(buttons);\n\n        try {\n            await ctx.editMessageText(message, {\n                ...keyboard, // Spread the keyboard markup\n                link_preview_options: {\n                    is_disabled: true\n                },\n            });\n            await ctx.answerCbQuery('Введите сумму для оплаты');\n        } catch (error) {\n            logger.error('Error sending autobooking message:', error);\n            await ctx.reply(message, keyboard);\n        }\n\n        await ctx.answerCbQuery();\n    } catch (error) {\n        logger.error('Error fetching products:', error);\n        await ctx.reply('Произошла ошибка при загрузке товаров.', Markup.inlineKeyboard([\n            [Markup.button.callback('Главное меню', 'mainmenu')]\n        ]));\n    }\n}\n\nexport const taskBlockHandler = async (ctx: MyContext) => {\n    const task_id = ctx.scene.session.task_id;\n\n    try {\n        const tasks = await LaravelService.getTaskById(ctx.from.id, task_id);\n        const task = tasks[0];\n        const message = fmt`\n        [задача]\nНазвание: ${code(task.name)}\nОписание: ${code(task.description)}\nОписание: ${code(task.description)}\nНомер задачи: ${code(task.task_number)}\nОтветственный: ${code(task.responsible)}\nСрок: ${code(task.deadline)}\nДата назначения: ${code(task.assigned_date)}\nСтатус: ${code(task.status)}\n`;\n        const keyboard = Markup.inlineKeyboard([\n            [Markup.button.callback('Закрыть задачу', 'close_task')],\n            [Markup.button.callback('👈 Назад', 'reenter')],\n            [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n        ]);\n\n        try {\n            await ctx.editMessageText(message, {\n                ...keyboard, // Spread the keyboard markup\n                link_preview_options: {\n                    is_disabled: true\n                },\n            });\n            await ctx.answerCbQuery('Загрузка товаров');\n        } catch (error) {\n            logger.error('Error sending autobooking message:', error);\n            await ctx.reply(message, keyboard);\n        }\n\n    } catch (error) {\n        logger.error('Error fetching products:', error);\n        await ctx.reply('Произошла ошибка при загрузке задач', Markup.inlineKeyboard([\n            [Markup.button.callback('Главное меню', 'mainmenu')]\n        ]));\n    }\n}","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\n\nimport {enterHandler, taskBlockHandler} from \"./tasksActions\";\nimport {createNotifictationScene} from \"../warehouse/createNotificationScene\";\nimport laravelService from \"../../../../services/laravelService\";\n\nexport const tasksScene = new Scenes.BaseScene<MyContext>('tasks');\n\nconst noKeyboard = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\n// Define the enter handler\ntasksScene.enter(async (ctx: MyContext) => {\n    await enterHandler(ctx);\n});\n\ntasksScene.action('reenter', async (ctx: MyContext) => {\n    await ctx.scene.reenter();\n});\n\ntasksScene.action(/^products_page_(\\d+)$/, async (ctx) => {\n    const page = parseInt(ctx.match[1], 10);\n    ctx.session.page = page;\n    return enterHandler(ctx); // Reload the handler with the new page\n});\n\n//task_(*\ntasksScene.action(/^task_(\\d+)$/, async (ctx) => {\n    const task_id = parseInt(ctx.match[1], 10);\n    ctx.scene.session.task_id = task_id;\n    return taskBlockHandler(ctx);\n});\n\ntasksScene.action('close_task', async (ctx) => {\n    const task_id = ctx.scene.session.task_id;\n\n    laravelService.closeTask(task_id, ctx.from.id);\n    // Close the task\n    await ctx.reply('Задача закрыта');\n});","import {Markup} from \"telegraf\";\nimport {MyContext} from \"../../../types/MyContext\";\nimport {code, fmt} from \"telegraf/format\";\nimport logger from \"../../../../utils/logger/loggerTelegram\";\nimport LaravelService from \"../../../../services/laravelService\";\n\nconst defaultButtons = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nconst defaultButtonsMenuOnly = [\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nexport const enterHandler = async (ctx: MyContext) => {\n    const page = ctx.session.page || 1; // Store page in session for navigation\n    const perPage = 10; // Adjust perPage if needed\n\n    ctx.scene.session.notificationForm.product_id = null;\n    ctx.scene.session.notificationForm.product_name = null;\n    ctx.scene.session.notificationForm.sum = null;\n    ctx.scene.session.notificationForm.type = null;\n\n    try {\n        const productData = await LaravelService.getProductsByTelegramId(ctx.from.id, page, perPage);\n\n        if (!productData || productData.products.length === 0) {\n            await ctx.reply('Нет доступных товаров.', Markup.inlineKeyboard([\n                [Markup.button.callback('Главное меню', 'mainmenu')]\n            ]));\n            return ctx.wizard.next();\n        }\n\n        const { products, currentPage, totalPages } = productData;\n\n        // Generate buttons for products\n        const buttons = products.map(product => [\n            Markup.button.callback(product.title, `warehouse_product_${product.good_id}`)\n        ]);\n\n        // Add navigation buttons\n        const navigationButtons = [];\n        if (currentPage > 1) {\n            navigationButtons.push(Markup.button.callback('← Назад', `products_page_${currentPage - 1}`));\n        }\n        if (currentPage < totalPages) {\n            navigationButtons.push(Markup.button.callback('Вперед →', `products_page_${currentPage + 1}`));\n        }\n        if (navigationButtons.length) {\n            buttons.push(navigationButtons);\n        }\n\n        buttons.push(...defaultButtonsMenuOnly);\n\n        const message = 'Выберите товар, для которого нужно отслеживать остаток:';\n        const keyboard = Markup.inlineKeyboard(buttons);\n\n        try {\n            await ctx.editMessageText(message, {\n                ...keyboard, // Spread the keyboard markup\n                link_preview_options: {\n                    is_disabled: true\n                },\n            });\n            await ctx.answerCbQuery('Введите сумму для оплаты');\n        } catch (error) {\n            logger.error('Error sending autobooking message:', error);\n            await ctx.reply(message, keyboard);\n        }\n\n        await ctx.answerCbQuery();\n    } catch (error) {\n        logger.error('Error fetching products:', error);\n        await ctx.reply('Произошла ошибка при загрузке товаров.', Markup.inlineKeyboard([\n            [Markup.button.callback('Главное меню', 'mainmenu')]\n        ]));\n    }\n\n};\n\n\nexport const promptForSum = async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Назад', 'warehouse_notification')],\n    ]);\n\n    const product_name = ctx.scene.session.notificationForm.product_name;\n    const message = fmt`Введите минимальное количество для товара ${code(product_name)}`;\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Минимальное количество для товара');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n    return ctx.wizard.next();\n}\n\nexport const promptForDateTime = async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`Введите дату и время уведомления в формате:\ndd.mm.yyyy hh:mm`;\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Введите дату и время уведомления');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n    return ctx.wizard.next();\n}\n\nexport const promptForNotificationType = async (ctx: MyContext) => {\n    //keyboard one time or constant notification\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Одноразовое уведомление', 'notification_one_time')],\n        [Markup.button.callback('Постоянное уведомление', 'notification_constant')],\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`Уведомление разовое или постоянное?`;\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Выберите тип уведомления');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n    return ctx.wizard.next();\n}\n\nexport const sendSuccessMessage = async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Создать еще', 'create_notification')],\n        [Markup.button.callback('Все уведомления', 'active_notifications')],\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`\n    Вы установили минимальное количество для товара ${code(ctx.scene.session.notificationForm.product_name)} : ${code(ctx.scene.session.notificationForm.sum)}. \n\nКак только остаток товара достигнет этого количества, вы получите уведомление.\n`;\n\n    try {\n        await LaravelService.createNotificationByTelegramId(ctx.from.id, ctx.scene.session.notificationForm, 'product_balance');\n    } catch (error) {\n        logger.error('Error creating notification:', error);\n        await ctx.reply('Произошла ошибка при создании уведомления. Пожалуйста, попробуйте позже.', Markup.inlineKeyboard(defaultButtonsMenuOnly));\n    }\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Уведомление создано');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n}","import {Composer, Markup, Scenes} from 'telegraf';\nimport {MyContext} from '../../../types/MyContext';\n\nimport {\n    enterHandler,\n    promptForSum,\n    sendSuccessMessage\n} from \"./createNotificationActions\";\nimport laravelService, {ProductsPaginatedResponse} from \"../../../../services/laravelService\";\n\nconst noKeyboard = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nconst handleSumInput = new Composer<MyContext>();\n\nhandleSumInput.on('text', async (ctx) => {\n    const sum = ctx.message.text;\n    ctx.scene.session.notificationForm.sum = sum;\n\n    console.log('ctx.scene.session.notificationForm', ctx.scene.session.notificationForm);\n    await sendSuccessMessage(ctx);\n});\n\nexport const createNotifictationScene = new Scenes.WizardScene<MyContext>(\n    'warehouse_create_notification',\n    // Step 1: Prompt to enter name\n    async (ctx) => {\n        ctx.scene.session.notificationForm = {\n            name: null,\n            sum: null,\n            dateTime: null,\n            type: null,\n        }\n       await enterHandler(ctx);\n    },\n    // Step 3: Save sum and prompt to enter date\n    handleSumInput,\n);\n\ncreateNotifictationScene.command('start', async (ctx) => {\n    await ctx.scene.enter('main');\n});\ncreateNotifictationScene.action('mainmenu', async (ctx) => {\n    await ctx.scene.enter('main');\n});\n\n\ncreateNotifictationScene.action(/^products_page_(\\d+)$/, async (ctx) => {\n    const page = parseInt(ctx.match[1], 10);\n    ctx.session.page = page;\n    return enterHandler(ctx); // Reload the handler with the new page\n});\n\n\ncreateNotifictationScene.action(/^warehouse_product_(\\d+)$/, async (ctx) => {\n    console.log('warehouse_product_');\n    const product_id = parseInt(ctx.match[1], 10);\n    console.log('product_id', product_id);\n    ctx.scene.session.notificationForm.product_id = product_id;\n    const products: ProductsPaginatedResponse = await laravelService.getProductsByTelegramId(ctx.from.id);\n\n    const product = products.allProducts.find(product => product.good_id === product_id);\n    ctx.scene.session.notificationForm.product_name = product.title;\n    await promptForSum(ctx);\n});\n","import {Markup} from \"telegraf\";\nimport {MyContext} from \"../../../types/MyContext\";\nimport {bold, code, fmt} from \"telegraf/format\";\nimport logger from \"../../../../utils/logger/loggerTelegram\";\nimport LaravelService from \"../../../../services/laravelService\";\nimport CacheService from \"../../../../utils/redis/Cache/Cache\";\n\nconst defaultButtons = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nconst defaultButtonsMenuOnly = [\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nexport const enterHandler = async (ctx: MyContext) => {\n    const page = ctx.session.page || 1; // Store page in session for navigation\n    const perPage = 10; // Adjust perPage if needed\n\n    ctx.scene.session.notificationForm.product_id = null;\n    ctx.scene.session.notificationForm.product_name = null;\n    ctx.scene.session.notificationForm.sum = null;\n    ctx.scene.session.notificationForm.type = null;\n\n    try {\n        await CacheService.forgetByPattern(`notifications_product_balance_telegram_id_${ctx.from.id}_page_*`);\n        const notificationData = await LaravelService.getNotificationsByTelegramId(ctx.from.id, page, perPage, 'product_balance');\n\n        if (!notificationData || notificationData.data.length === 0) {\n            await ctx.reply('Нет доступных товаров.', Markup.inlineKeyboard([\n                [Markup.button.callback('Главное меню', 'mainmenu')]\n            ]));\n            return ctx.wizard.next();\n        }\n\n        const { data, current_page, last_page: total } = notificationData;\n\n        // Generate buttons for products\n        const buttons = data.map(notification => [\n            Markup.button.callback(notification.settings.product_name, `edit_warehouse_product_${notification.id}`)\n        ]);\n\n        // Add navigation buttons\n        const navigationButtons = [];\n        if (current_page > 1) {\n            navigationButtons.push(Markup.button.callback('← Назад', `edit_products_page_${current_page - 1}`));\n        }\n        if (current_page < total) {\n            navigationButtons.push(Markup.button.callback('Вперед →', `edit_products_page_${current_page + 1}`));\n        }\n        if (navigationButtons.length) {\n            buttons.push(navigationButtons);\n        }\n\n        buttons.push(...defaultButtonsMenuOnly);\n\n        const message = `Выберите товар чтобы изменить или удалить отслеживание:`\n        const keyboard = Markup.inlineKeyboard(buttons);\n\n        try {\n            await ctx.editMessageText(message, {\n                ...keyboard, // Spread the keyboard markup\n                link_preview_options: {\n                    is_disabled: true\n                },\n            });\n            await ctx.answerCbQuery('Введите товар');\n        } catch (error) {\n            logger.error('Error sending autobooking message:', error);\n            await ctx.reply(message, keyboard);\n        }\n\n        await ctx.answerCbQuery();\n    } catch (error) {\n        logger.error('Error fetching products:', error);\n        await ctx.reply('Произошла ошибка при загрузке товаров.', Markup.inlineKeyboard([\n            [Markup.button.callback('Главное меню', 'mainmenu')]\n        ]));\n    }\n    return ctx.wizard.next();\n};\n\nexport const promptForSum = async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Назад', 'warehouse_product_' + ctx.scene.session.notificationForm.product_id)],\n    ]);\n\n    const product_name = ctx.scene.session.notificationForm.product_name;\n    const message = fmt`Введите минимальное количество для товара ${code(product_name)}`;\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Минимальное количество для товара');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n\n}\n\nexport const promptForAction = async (ctx: MyContext) => {\n\n    const product = await LaravelService.getOneProductByTelegramId(ctx.from.id, ctx.scene.session.notificationForm.product_id);\n\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Изменить минимальное количество', 'change_minimal_sum')],\n        [Markup.button.callback('Удалить уведомление', 'delete_notification')],\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n    const amount = product.actual_amounts[0].amount ?? 0;\n\n    const message = fmt`\nНазвание товара - ${code(ctx.scene.session.notificationForm.product_name)} \nФактическое кол-во на складе - ${code(amount)}\nМин кол-во для уведомления: ${code(ctx.scene.session.notificationForm.sum)}`;\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Выберите действие');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n}\n\nexport const promptForDateTime = async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Пропустить', 'notification_skip_date')],\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`Введите дату и время уведомления в формате:\ndd.mm.yyyy hh:mm\n\n ${bold('Текущая дата и время: ')} ${code(ctx.session.notificationForm.dateTime)}\n \n Введите новую дату и время или нажмите пропустить\n`;\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Введите дату и время уведомления');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n    return ctx.wizard.next();\n}\n\nexport const promptForNotificationType = async (ctx: MyContext) => {\n    //keyboard one time or constant notification\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Пропустить', 'notification_skip_type')],\n        [Markup.button.callback('Одноразовое уведомление', 'notification_one_time')],\n        [Markup.button.callback('Постоянное уведомление', 'notification_constant')],\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`Уведомление разовое или постоянное?\n    \n    ${bold('Текущий тип уведомления: ')} ${code(ctx.session.notificationForm.type)}\n    \n    Выберите тип уведомления или нажмите пропустить\n    `;\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Выберите тип уведомления');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n    return ctx.wizard.next();\n}\n\nexport const deleteNotification = async (ctx: MyContext) => {\n    try {\n        await LaravelService.deleteNotification(ctx.scene.session.notificationForm.notification_id);\n    } catch (error) {\n        logger.error('Error deleting notification:', error);\n        await ctx.reply('Произошла ошибка при удалении уведомления. Пожалуйста, попробуйте позже.', Markup.inlineKeyboard(defaultButtonsMenuOnly));\n    }\n\n    await ctx.reply('Уведомление удалено', Markup.inlineKeyboard(defaultButtonsMenuOnly));\n}\n\nexport const sendSuccessMessage = async (ctx: MyContext) => {\n    const keyboard = Markup.inlineKeyboard([\n        [Markup.button.callback('Все уведомления', 'active_notifications')],\n        [Markup.button.callback('Главное меню', 'mainmenu')],\n    ]);\n\n    const message = fmt`\n    Вы установили минимальное количество для товара ${code(ctx.scene.session.notificationForm.product_name)} : ${code(ctx.scene.session.notificationForm.sum)}. \n\nКак только остаток товара достигнет этого количества, вы получите уведомление.\n`;\n\n    try {\n        await LaravelService.updateNotificationById(ctx.scene.session.notificationForm.notification_id, ctx.scene.session.notificationForm);\n    } catch (error) {\n        logger.error('Error creating notification:', error);\n        await ctx.reply('Произошла ошибка при создании уведомления. Пожалуйста, попробуйте позже.', Markup.inlineKeyboard(defaultButtonsMenuOnly));\n    }\n\n    try {\n        await ctx.editMessageText(message, {\n            ...keyboard, // Spread the keyboard markup\n            link_preview_options: {\n                is_disabled: true\n            },\n        });\n        await ctx.answerCbQuery('Уведомление создано');\n    } catch (error) {\n        logger.error('Error sending autobooking message:', error);\n        await ctx.reply(message, keyboard);\n    }\n\n}","import {Composer, Markup, Scenes} from 'telegraf';\nimport {MyContext} from '../../../types/MyContext';\n\nimport {\n    deleteNotification,\n    enterHandler, promptForAction,\n    promptForDateTime,\n    promptForNotificationType,\n    promptForSum,\n    sendSuccessMessage\n} from \"./editNotificationActions\";\nimport {createNotifictationScene} from \"./createNotificationScene\";\nimport laravelService, {ProductsPaginatedResponse} from \"../../../../services/laravelService\";\nimport LaravelService from \"../../../../services/laravelService\";\n\nconst noKeyboard = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nconst handleActionInput = new Composer<MyContext>();\n\n\n\nconst handleSumInput = new Composer<MyContext>();\n\nhandleSumInput.on('text', async (ctx) => {\n    const sum = ctx.message.text;\n    ctx.scene.session.notificationForm.sum = sum;\n    await sendSuccessMessage(ctx);\n});\n\nconst handleDateTimeInput = new Composer<MyContext>();\nhandleDateTimeInput.on('text', async (ctx) => {\n    ctx.scene.session.notificationForm.dateTime = ctx.message.text;\n    await promptForNotificationType(ctx);\n});\n\n//notification_skip_date\nhandleDateTimeInput.action('notification_skip_date', async (ctx) => {\n    await promptForNotificationType(ctx);\n});\n\n\n\nconst handleNotificationTypeInput = new Composer<MyContext>();\nhandleNotificationTypeInput.action('notification_one_time', async (ctx) => {\n    ctx.scene.session.notificationForm.type = 'one_time';\n    await sendSuccessMessage(ctx);\n});\n\n//notification_skip_type\nhandleNotificationTypeInput.action('notification_skip_type', async (ctx) => {\n    await sendSuccessMessage(ctx);\n});\n\n\nhandleNotificationTypeInput.action('notification_constant', async (ctx) => {\n    ctx.scene.session.notificationForm.type = 'constant';\n    await sendSuccessMessage(ctx);\n});\n\nexport const editNotificationScene = new Scenes.WizardScene<MyContext>(\n    'warehouse_edit_notification',\n    // Step 1: Prompt to enter name\n    async (ctx) => {\n        ctx.scene.session.notificationForm = {\n            name: null,\n            sum: null,\n            dateTime: null,\n            type: null,\n        }\n       await enterHandler(ctx);\n    },\n    // Step 2: Save name and prompt to enter sum\n    handleActionInput,\n    // Step 3: Save sum and prompt to enter date\n    handleSumInput,\n);\n\neditNotificationScene.command('start', async (ctx) => {\n    await ctx.scene.enter('main');\n});\neditNotificationScene.action('mainmenu', async (ctx) => {\n    await ctx.scene.enter('main');\n});\n\neditNotificationScene.action(/^products_page_(\\d+)$/, async (ctx) => {\n    const page = parseInt(ctx.match[1], 10);\n    ctx.session.page = page;\n    return enterHandler(ctx); // Reload the handler with the new page\n});\n\nhandleActionInput.action(/^edit_warehouse_product_(\\d+)$/, async (ctx) => {\n    const notification_id = parseInt(ctx.match[1], 10);\n    ctx.scene.session.notificationForm.notification_id = notification_id;\n    const productData = await LaravelService.getNotificationsByTelegramId(ctx.from.id, 1, 1, 'product_balance', notification_id);\n\n    const notification = productData.data.find(notification => notification.id === notification_id);\n    if(notification.settings.product_name) {\n        ctx.scene.session.notificationForm.product_name = notification.settings.product_name;\n    }\n\n    if(notification.settings.sum) {\n        ctx.scene.session.notificationForm.sum = notification.settings.sum;\n    }\n\n    if(notification.settings.product_id) {\n        ctx.scene.session.notificationForm.product_id = notification.settings.product_id;\n    }\n\n    if(notification.settings.type) {\n        ctx.scene.session.notificationForm.type = notification.settings.type;\n    }\n\n\n    await promptForAction(ctx);\n});\n\nhandleActionInput.action('change_minimal_sum', async (ctx) => {\n    await promptForSum(ctx);\n    return ctx.wizard.next();\n});\n\n// delete\nhandleActionInput.action('delete_notification', async (ctx) => {\n    await deleteNotification(ctx);\n});","import {Markup} from \"telegraf\";\nimport {MyContext} from \"../../../types/MyContext\";\n\nconst defaultButtons = [\n    [Markup.button.callback('Уведомление на остаток', 'warehouse_notification')],\n    [Markup.button.callback('Работа с остатком', 'warehouse_list')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nconst defaultButtonsMenuOnly = [\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\nexport const enterHandler = async (ctx: MyContext) => {\n    ctx.session.page = 1; // Store page in session for navigation\n    const messageText = `Выберите действие`;\n\n    const buttonsArray = Markup.inlineKeyboard([...defaultButtons]);\n\n    if (ctx.callbackQuery && ctx.callbackQuery.message) {\n        try {\n            // If the interaction is from a callback query, edit the existing message\n            await ctx.editMessageText(messageText, buttonsArray);\n        }\n        catch (error) {\n            await ctx.reply(messageText, buttonsArray);\n        }\n    } else {\n        await ctx.reply(messageText, buttonsArray);\n    }\n}","import { Scenes, Markup } from 'telegraf';\nimport { MyContext } from '../../../types/MyContext';\n\nimport {enterHandler} from \"./warehouseActions\";\n\nexport const warehouseScene = new Scenes.BaseScene<MyContext>('warehouse');\n\nconst noKeyboard = [\n    [Markup.button.callback('👈 Назад', 'reenter')],\n    [Markup.button.callback('👌 Главное меню', 'mainmenu')],\n];\n\n// Define the enter handler\nwarehouseScene.enter(async (ctx: MyContext) => {\n    await enterHandler(ctx);\n});\n\nwarehouseScene.action('warehouse_notification', async (ctx: MyContext) => {\n    await ctx.scene.enter('warehouse_create_notification');\n});\n\nwarehouseScene.action('warehouse_list', async (ctx: MyContext) => {\n    await ctx.scene.enter('warehouse_edit_notification');\n});\n\nwarehouseScene.action('reenter', async (ctx: MyContext) => {\n    await ctx.scene.reenter();\n});","import {Telegraf} from \"telegraf\";\nimport {MyContext} from \"../types/MyContext\";\n\nimport CacheService from '../../utils/redis/Cache/Cache';\nclass WarehouseBot {\n    private bot: Telegraf<MyContext>;\n    constructor(bot: Telegraf<MyContext>) {\n        this.bot = bot;\n    }\n\n    async handleStart(chatId: number) {\n        const message = \"⚡Я автоматически нахожу и бронирую доступные слоты на складах Wildberries. Выбирайте удобный тариф и бронируйте поставки.\" +\n            \"\\n\\nВыберите пункт в меню 👇\";\n\n        const keyboard = {\n            inline_keyboard: [\n                [\n                    { text: '📦 Автобронирование', callback_data: 'wh_notification' },\n                ],\n                [\n                    { text: '⚡ Поиск слотов', callback_data: 'wh_notification' },\n                    { text: '📝 Заявки на поиск слотов', callback_data: 'wh_notification' },\n                ],\n                [\n                    { text: '🙌 Мои кабинеты', callback_data: 'wh_payment' },\n                    { text: '💎 Подписка', callback_data: 'wh_payment' },\n                ],\n                [\n                    { text: '💬 Поддержка', url: 'https://t.me/dmitrynovikov21' },\n                    { text: '📍 Инструкции', url: 'https://t.me/dmitrynovikov21' },\n                ],\n            ],\n        };\n\n        await this.bot.telegram.sendMessage(chatId, message, {\n            parse_mode: 'HTML',\n            reply_markup: keyboard,\n        });\n    }\n\n    async fetchUserByTelegramId(telegramId: number) {\n        try {\n            return await CacheService.getUserByTelegramId(telegramId);\n        } catch (error) {\n            console.error('Error fetching user:', error);\n            return null;\n        }\n    }\n\n    // Implement other methods like handleNotification, handlePayment, etc.\n}\n\nexport default WarehouseBot;\n","import LaravelService from \"../../services/laravelService\";\nimport logger from \"../../utils/logger/loggerTelegram\";\nimport {MyContext} from \"../types/MyContext\";\nimport {Scenes} from \"telegraf\";\nimport {SceneSession} from \"telegraf/typings/scenes\";\n\nexport const cabinetGate = async (ctx: MyContext, scene: string) => {\n    let user = null;\n    try{\n        user = await LaravelService.getUserByTelegramId(ctx.from.id, 10);\n    } catch (error) {\n        logger.error('Error getting user:', error);\n        await ctx.reply('Произошла ошибка при получении данных пользователя. Попробуйте позже');\n    }\n\n    if (!user) {\n        await ctx.reply('Пользователь не найден. Пожалуйста, зарегистрируйтесь');\n        return;\n    }\n\n    // if no phone then auth\n    if (!user.phone_number) {\n        await ctx.scene.enter('login_wizard');\n        return;\n    }\n\n    ctx.session.user = user;\n\n    console.log('user', user);\n\n\n    await ctx.scene.enter(scene, {user});\n}","// nodejs-server/utils/clusterManager.ts\n\nimport { Cluster } from 'playwright-cluster';\n\nlet cluster: Cluster | undefined;\n\nconst initializeCluster = async (): Promise<Cluster> => {\n    if (cluster) {\n        return cluster;\n    }\n\n    cluster = await Cluster.launch({\n        concurrency: Cluster.CONCURRENCY_CONTEXT,\n        maxConcurrency: 5,\n        timeout: 120000,\n        playwrightOptions: {\n            headless: true,\n        },\n    });\n\n    cluster.on('taskerror', (err: Error, data: any, willRetry: boolean) => {\n        if (willRetry) {\n            console.warn(`Error processing ${data}: ${err.message}. Retrying...`);\n        } else {\n            console.error(`Failed to process ${data}: ${err.message}`);\n        }\n    });\n\n    cluster.on('active', () => {\n        console.log('A new task has started. Active tasks:', cluster!.idle);\n    });\n\n    cluster.on('idle', () => {\n        console.log('All tasks are complete. Cluster is idle.');\n    });\n\n    return cluster;\n};\n\nconst shutdownCluster = async (): Promise<void> => {\n    if (cluster) {\n        await cluster.close();\n        console.log('Cluster has been shut down.');\n        cluster = undefined;\n    }\n};\n\nprocess.on('SIGINT', async () => {\n    console.log('Received SIGINT. Shutting down cluster...');\n    await shutdownCluster();\n    process.exit(0);\n});\n\nprocess.on('SIGTERM', async () => {\n    console.log('Received SIGTERM. Shutting down cluster...');\n    await shutdownCluster();\n    process.exit(0);\n});\n\nexport {\n    initializeCluster,\n    shutdownCluster,\n};\n","import { createLogger, format, transports, Logger } from 'winston';\n\nconst loggerTelegram: Logger = createLogger({\n    level: 'info',\n    format: format.json(),\n    defaultMeta: { service: 'nodejs-server' },\n    transports: [\n        new transports.Console({\n            format: format.combine(\n                format.timestamp(),\n                format.simple()\n            ),\n        }),\n        new transports.File({\n            filename: 'telegram.log',\n            format: format.json(),\n        }),\n    ],\n});\n\nexport default loggerTelegram;\n","// src/utils/pow/solveTask.ts\n\nimport path from 'path';\nimport fs from 'fs';\nimport vm from 'vm';\n\n// Step 1: Load wasm_exec.js (adjust the path to where you store the wasm_exec.js file)\nconst wasmExecPath = path.join(__dirname, 'wasm_exec.js');\nconst wasmExecCode = fs.readFileSync(wasmExecPath, 'utf8');\nvm.runInThisContext(wasmExecCode); // This defines `global.Go`\n\ndeclare var Go: any;\n\nexport interface TaskInput {\n    // Your TaskInput interface definition\n}\n\n// Step 2: Create a function to run WebAssembly in Node.js\nasync function solveTaskInNode(wasmPath: string, taskInput: TaskInput): Promise<any> {\n    const go = new Go();\n\n    // Load the WebAssembly file from the file system\n    const wasmBuffer = fs.readFileSync(wasmPath);\n\n    // Instantiate WebAssembly with the Go import object\n    const { instance } = await WebAssembly.instantiate(wasmBuffer, go.importObject);\n    go.run(instance);\n\n    // Now call solveTask\n    try {\n        const solveTaskResult = (global as any).solveTask(taskInput);\n        return solveTaskResult;\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Step 3: Define the wasmPath and taskInput\nconst wasmPath = path.join(__dirname, 'solve.wasm'); // Path to your solve.wasm file\n\n// Export the function\nexport {\n    solveTaskInNode,\n    wasmPath,\n};\n","// src/cache/Cache.ts\n\nimport redisClient from '../redisClient';\nimport { serialize, unserialize } from 'php-serialize';\nimport axios from 'axios';\n\n// Define an interface for the user data returned by the API\ninterface User {\n    id: number;\n    telegramId: string;\n    name: string;\n    // Add other user properties as needed\n}\n\ninterface ScanResult {\n    cursor: number;\n    keys: string[];\n}\n\nclass Cache {\n    private prefix: string;\n\n    constructor() {\n        this.prefix = 'beauty_database_';\n    }\n\n    /**\n     * Sets a value in the Redis cache.\n     * @param key - The key under which the value is stored.\n     * @param value - The value to store; can be any serializable type.\n     * @param expirationInSeconds - Time in seconds before the key expires. Defaults to 3600 seconds (1 hour).\n     */\n    async set(key: string, value: any, expirationInSeconds: number = 3600): Promise<void> {\n        const fullKey = `${this.prefix}${key}`;\n        try {\n            const serializedValue = serialize(value);\n            await redisClient.set(fullKey, serializedValue, {\n                EX: expirationInSeconds, // Expiration time in seconds\n            });\n            console.log(`Value set for key: ${fullKey}`);\n        } catch (err) {\n            console.error(`Error setting cache value for key ${fullKey}:`, err);\n        }\n    }\n\n    /**\n     * Retrieves a value from the Redis cache.\n     * @param key - The key of the value to retrieve.\n     * @returns The deserialized value if found, raw value if deserialization fails, or null if not found.\n     */\n    async get(key: string): Promise<any | null> {\n        const fullKey = `${this.prefix}${key}`;\n        try {\n            const value = await redisClient.get(fullKey);\n            if (value !== null) {\n                try {\n                    const deserializedValue = unserialize(value);\n                    // console.log(`Value retrieved for key ${fullKey}:`, deserializedValue);\n                    return deserializedValue;\n                } catch (error) {\n                    console.warn(`Failed to deserialize value for key ${fullKey}. Returning raw value.`);\n                    return value;\n                }\n            } else {\n                console.log(`Key ${fullKey} not found in cache.`);\n                return null;\n            }\n        } catch (err) {\n            console.error(`Error getting cache value for key ${fullKey}:`, err);\n            return null;\n        }\n    }\n\n    /**\n     * Retrieves a value from the cache. If it doesn't exist, computes it using the provided function,\n     * stores it in the cache, and then returns it.\n     *\n     * @param key - The cache key.\n     * @param computeFn - An asynchronous function to compute the value if it's not cached.\n     * @param expirationInSeconds - Cache expiration time in seconds. Defaults to 3600 (1 hour).\n     * @returns A promise that resolves with the cached or computed value.\n     */\n    async rememberCacheValue<T>(\n        key: string,\n        computeFn: () => Promise<T>,\n        expirationInSeconds: number = 3600\n    ): Promise<T> {\n        try {\n            // Attempt to retrieve the cached value\n            const cachedValue = await this.get(key);\n\n            if (cachedValue !== null) {\n                console.log(`Cache hit for key: ${key}`);\n                return cachedValue as T;\n            }\n\n            console.log(`Cache miss for key: ${key}. Computing value...`);\n\n            // Compute the value using the provided function\n            const computedValue = await computeFn();\n\n            // Store the computed value in the cache\n            await this.set(key, computedValue, expirationInSeconds);\n            console.log(`Computed and cached value for key: ${key}`);\n\n            return computedValue;\n        } catch (err) {\n            console.error(`Error in rememberCacheValue for key ${key}:`, err);\n            throw err; // Rethrow the error after logging\n        }\n    }\n\n\n    /**\n     * Retrieves a user by their Telegram ID, first checking the cache before making an API call.\n     * @param telegramId - The Telegram ID of the user.\n     * @returns The user data if found, or null otherwise.\n     */\n    async getUserByTelegramId(telegramId: number): Promise<User | null> {\n        const cacheKey = `user_telegram_id_${telegramId}`;\n        try {\n            let user: User | null = await this.get(cacheKey);\n            console.log('User retrieved from cache:', user);\n            if (user) {\n                return user;\n            }\n\n            const laravelApiUrl = process.env.LARAVEL_API_URL;\n            if (!laravelApiUrl) {\n                console.error('LARAVEL_API_URL is not defined in environment variables.');\n                return null;\n            }\n\n            const response = await axios.get<User>(`${laravelApiUrl}/users/telegram/${telegramId}`);\n            user = response.data;\n            console.log('User retrieved from API:', user);\n\n            // Optionally, cache the user data after fetching from the API\n            await this.set(cacheKey, user, 3600); // Cache for 1 hour\n\n            return user;\n        } catch (error) {\n            console.error('Error fetching user:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Deletes a key from the Redis cache.\n     * @param key - The key to delete.\n     * @returns True if the key was deleted, false otherwise.\n     */\n    async forget(key: string): Promise<boolean> {\n        const fullKey = `${this.prefix}${key}`;\n        try {\n            const result = await redisClient.del(fullKey);\n            if (result === 1) {\n                console.log(`Successfully deleted key: ${fullKey}`);\n                return true;\n            } else {\n                console.log(`Key ${fullKey} does not exist or could not be deleted.`);\n                return false;\n            }\n        } catch (err) {\n            console.error(`Error deleting cache value for key ${fullKey}:`, err);\n            return false;\n        }\n    }\n\n    async forgetByPattern(pattern: string): Promise<boolean> {\n        const fullPattern = `${this.prefix}${pattern}`;\n        console.log(`Deleting keys matching pattern: ${fullPattern}`);\n        try {\n            let cursor = 0;\n            do {\n                const result:ScanResult = await redisClient.scan(cursor, {\n                    MATCH: fullPattern,\n                    COUNT: 100\n                });\n                console.log('Scan result:', result);\n\n                // Adjusted to match the actual response structure\n                const nextCursor = result.cursor;\n                const keys = result.keys;\n                cursor = nextCursor;\n\n                if (keys && keys.length > 0) {  // Added a check to ensure keys is defined\n                    await redisClient.del(keys);\n                    console.log(`Successfully deleted keys matching pattern: ${fullPattern}`);\n                }\n            } while (cursor !== 0);\n\n            return true;\n        } catch (err) {\n            console.error(`Error deleting cache values for pattern ${fullPattern}:`, err);\n            return false;\n        }\n    }\n\n    /**\n     * Publishes a message to a Redis channel.\n     * @param channel - The channel to publish the message to.\n     * @param message - The message to publish.\n     */\n    async pushToChannel(channel: string, message: string): Promise<void> {\n        const fullChannel = `${this.prefix}${channel}`;\n\n        try {\n            await redisClient.publish(fullChannel, message);\n            console.log(`Message published to channel ${channel}: ${message}`);\n        } catch (err) {\n            console.error(`Error publishing message to channel ${channel}:`, err);\n        }\n    }\n\n}\n\nexport default new Cache();\n","// utils/cacheHelper.ts\n\nimport redisClient from './redisClient';\nimport { serialize as phpSerialize, unserialize as phpUnserialize } from 'php-serialize';\n\n/**\n * Interface representing the options for setting a Redis key.\n */\ninterface SetOptions {\n    EX?: number; // Expiration time in seconds\n}\n\n/**\n * Serialize values to match Laravel's expected format (PHP serialization).\n * Sets a value in Redis with an optional expiration time.\n *\n * @param key - The cache key.\n * @param value - The value to cache.\n * @param expirationInSeconds - Expiration time in seconds (default is 3600 seconds or 1 hour).\n * @returns A promise that resolves when the value is set.\n */\nexport async function setCacheValue(\n    key: string,\n    value: any,\n    expirationInSeconds: number = 3600\n): Promise<void> {\n    try {\n        // Custom key format: beauty_database_{key}\n        const formattedKey = `beauty_database_${key}`;\n        const serializedValue = phpSerialize(value);\n        const options: SetOptions = {\n            EX: expirationInSeconds, // Expiration time in seconds\n        };\n        await redisClient.set(formattedKey, serializedValue, options);\n        console.log(`Value set for key: ${formattedKey}`);\n    } catch (err) {\n        console.error(`Error setting cache value for key ${key}:`, err);\n        throw err; // Rethrow the error after logging\n    }\n}\n\n/**\n * Retrieves a value from the Laravel Redis cache.\n * Attempts to unserialize the value; if unsuccessful, returns the raw value.\n *\n * @param key - The cache key.\n * @returns A promise that resolves with the cached value or null if not found.\n */\nexport async function getCacheValue<T = any>(key: string): Promise<T | string | null> {\n    try {\n        // Custom key format: beauty_database_{key}\n        const formattedKey = `beauty_database_${key}`;\n        const value = await redisClient.get(formattedKey);\n        if (value !== null) {\n            try {\n                const deserializedValue = phpUnserialize(value) as T;\n                console.log(`Value retrieved for key ${formattedKey}:`, deserializedValue);\n                return deserializedValue;\n            } catch (error) {\n                console.warn(`Failed to deserialize, returning raw value for key ${formattedKey}:`, value);\n                return value; // If not serialized, return raw value\n            }\n        } else {\n            console.log(`Key ${formattedKey} not found in cache.`);\n            return null;\n        }\n    } catch (err) {\n        console.error(`Error getting cache value for key ${key}:`, err);\n        throw err; // Rethrow the error after logging\n    }\n}\n\n/**\n * Clears (deletes) a specific cache key from Redis.\n *\n * @param key - The cache key to delete.\n * @returns A promise that resolves to true if the key was deleted, false otherwise.\n */\nexport async function clearCacheValue(key: string): Promise<boolean> {\n    try {\n        // Custom key format: beauty_database_{key}\n        const formattedKey = `beauty_database_${key}`;\n        const result = await redisClient.del(formattedKey);\n        if (result === 1) {\n            console.log(`Successfully deleted key: ${formattedKey}`);\n            return true;\n        } else {\n            console.log(`Key ${formattedKey} does not exist or could not be deleted.`);\n            return false;\n        }\n    } catch (err) {\n        console.error(`Error deleting cache value for key ${key}:`, err);\n        throw err; // Rethrow the error after logging\n    }\n}\n\n/**\n * Retrieves a value from the cache. If it doesn't exist, computes it using the provided function,\n * stores it in the cache, and then returns it.\n *\n * @param key - The cache key.\n * @param computeFn - An asynchronous function to compute the value if it's not cached.\n * @param expirationInSeconds - Cache expiration time in seconds. Defaults to 3600 (1 hour).\n * @returns A promise that resolves with the cached or computed value.\n */\nexport async function rememberCacheValue<T>(\n    key: string,\n    computeFn: () => Promise<T>,\n    expirationInSeconds: number = 3600\n): Promise<T> {\n    try {\n        // Attempt to retrieve the cached value\n        const cachedValue = await getCacheValue<T>(key);\n\n        if (cachedValue !== null) {\n            console.log(`Cache hit for key: ${key}`);\n            return cachedValue as T;\n        }\n\n        console.log(`Cache miss for key: ${key}. Computing value...`);\n\n        // Compute the value using the provided function\n        const computedValue = await computeFn();\n\n        // Store the computed value in the cache\n        await setCacheValue(key, computedValue, expirationInSeconds);\n        console.log(`Computed and cached value for key: ${key}`);\n\n        return computedValue;\n    } catch (err) {\n        console.error(`Error in rememberCacheValue for key ${key}:`, err);\n        throw err; // Rethrow the error after logging\n    }\n}\n\n","// utils/redisClient.ts\n\nimport { createClient, RedisClientType } from 'redis';\n\n/**\n * Configuration options for the Redis client.\n */\nconst redisConfig = {\n    url: 'redis://redis:6379/1', // Use Redis container name as host\n};\n\n/**\n * Create a Redis client instance.\n */\nconst redisClient: RedisClientType = createClient(redisConfig);\n\n/**\n * Connect to Redis.\n */\nconst connectRedis = async (): Promise<void> => {\n    try {\n        await redisClient.connect();\n        console.log('Connected to Redis');\n    } catch (error) {\n        console.error('Redis connection error:', error);\n        // Optionally, handle reconnection logic or exit the process\n        process.exit(1);\n    }\n};\n\n// Initiate the connection\nconnectRedis();\n\n/**\n * Gracefully handle application termination signals to disconnect Redis client.\n */\nconst gracefulShutdown = async () => {\n    try {\n        await redisClient.disconnect();\n        console.log('Disconnected from Redis');\n        process.exit(0);\n    } catch (error) {\n        console.error('Error during Redis disconnection:', error);\n        process.exit(1);\n    }\n};\n\n// Listen for termination signals\nprocess.on('SIGINT', gracefulShutdown);\nprocess.on('SIGTERM', gracefulShutdown);\n\nexport default redisClient;\n","// utils/redisHelper.ts\n\nimport redisSubscriber from './redisSubscriber';\n\n/**\n * Interface representing the structure of messages received from Redis.\n */\ninterface VerificationMessage {\n    action: string;\n    code: string;\n}\n\n/**\n * Waits for a verification code from Redis on a specific channel.\n * @param telegramId - The user's Telegram ID.\n * @param timeoutMs - Timeout in milliseconds (default is 300000 ms or 5 minutes).\n * @returns A promise that resolves with the verification code.\n */\nexport function waitForVerificationCode(\n    telegramId: string,\n    timeoutMs: number = 300000\n): Promise<string> {\n    return new Promise<string>(async (resolve, reject) => {\n        // Construct the channel name with the given Telegram ID\n        let channel = `verification_code_channel_${telegramId}`;\n        channel = `beauty_database_${channel}`;\n\n        /**\n         * Handler for incoming messages on the Redis channel.\n         * @param message - The message received from Redis.\n         */\n        const messageHandler = (message: VerificationMessage) => {\n            if (message && message.action === 'collect_verification_code') {\n                console.log(\n                    `Received verification code for Telegram ID ${telegramId}: ${message.code}`\n                );\n                cleanup();\n                resolve(message.code);\n            }\n        };\n\n        /**\n         * Cleans up by unsubscribing from the Redis channel and clearing the timeout.\n         */\n        const cleanup = async () => {\n            try {\n                await redisSubscriber.unsubscribe(channel, messageHandler);\n            } catch (error) {\n                console.error(`Error during cleanup: ${error}`);\n            }\n            clearTimeout(timer);\n        };\n\n        // Set up a timeout to reject the promise if no verification code is received in time\n        const timer = setTimeout(async () => {\n            try {\n                await redisSubscriber.unsubscribe(channel, messageHandler);\n            } catch (error) {\n                console.error(`Error during timeout cleanup: ${error}`);\n            }\n            reject(new Error('Verification code timeout.'));\n        }, timeoutMs);\n\n        try {\n            await redisSubscriber.subscribe(channel, messageHandler);\n            console.log(`Waiting for verification code on channel: ${channel}`);\n        } catch (error) {\n            clearTimeout(timer);\n            reject(error);\n        }\n    });\n}\n","// redisSubscriber.ts\n\nimport { createClient, RedisClientType } from 'redis';\n\n/**\n * Type definition for a message handler function.\n * It accepts a parsed message of generic type T and returns void or a Promise.\n */\ntype MessageHandler<T = any> = (message: T | null) => void | Promise<void>;\n\n/**\n * Interface representing the structure of the message handlers.\n * Each channel maps to an array of message handler functions.\n */\ninterface MessageHandlers {\n    [channel: string]: MessageHandler[];\n}\n\n/**\n * RedisSubscriber is a singleton class responsible for managing Redis subscriptions.\n */\nclass RedisSubscriber {\n    private subscriber: RedisClientType;\n    private isConnected: boolean;\n    private messageHandlers: MessageHandlers;\n\n    constructor() {\n        this.subscriber = createClient({\n            url: 'redis://redis:6379/1', // Ensure using Database 1\n        });\n        this.isConnected = false;\n        this.messageHandlers = {};\n\n        this.subscriber.on('error', (err: Error) => {\n            console.error('Redis subscription error:', err);\n        });\n    }\n\n    /**\n     * Establishes a connection to the Redis server if not already connected.\n     */\n    private async connect(): Promise<void> {\n        if (!this.isConnected) {\n            try {\n                await this.subscriber.connect();\n                this.isConnected = true;\n                console.log('Connected to Redis.');\n            } catch (error) {\n                console.error('Failed to connect to Redis:', error);\n                throw error;\n            }\n        }\n    }\n\n    /**\n     * Subscribes to a Redis channel with a specific message handler.\n     * @param channel - The Redis channel to subscribe to.\n     * @param messageHandler - The function to handle incoming messages.\n     */\n    public async subscribe<T = any>(channel: string, messageHandler: MessageHandler<T>): Promise<void> {\n        await this.connect();\n\n        if (!this.messageHandlers[channel]) {\n            this.messageHandlers[channel] = [];\n\n            // Subscribe with a callback that iterates over all handlers for this channel\n            try {\n                await this.subscriber.subscribe(channel, async (message: string) => {\n                    const parsedMessage = this.parseMessage<T>(message, channel);\n                    if (parsedMessage === null) {\n                        // Parsing failed; optionally handle this scenario\n                        return;\n                    }\n\n                    // Execute all handlers for this channel\n                    for (const handler of this.messageHandlers[channel]) {\n                        try {\n                            await handler(parsedMessage);\n                        } catch (handlerError) {\n                            console.error(`Error in handler for channel ${channel}:`, handlerError);\n                        }\n                    }\n                });\n\n                console.log(`Subscribed to Redis channel: ${channel}`);\n            } catch (subscribeError) {\n                console.error(`Failed to subscribe to channel ${channel}:`, subscribeError);\n                throw subscribeError;\n            }\n        }\n\n        this.messageHandlers[channel].push(messageHandler);\n    }\n\n    /**\n     * Unsubscribes a specific message handler from a Redis channel.\n     * @param channel - The Redis channel to unsubscribe from.\n     * @param messageHandler - The handler to remove.\n     */\n    public async unsubscribe(channel: string, messageHandler: MessageHandler): Promise<void> {\n        if (this.messageHandlers[channel]) {\n            this.messageHandlers[channel] = this.messageHandlers[channel].filter(\n                (handler) => handler !== messageHandler\n            );\n\n            if (this.messageHandlers[channel].length === 0) {\n                delete this.messageHandlers[channel];\n                try {\n                    await this.subscriber.unsubscribe(channel);\n                    console.log(`Unsubscribed from Redis channel: ${channel}`);\n                } catch (unsubscribeError) {\n                    console.error(`Failed to unsubscribe from channel ${channel}:`, unsubscribeError);\n                    throw unsubscribeError;\n                }\n            }\n        }\n    }\n\n    /**\n     * Parses the incoming message and handles JSON parsing errors.\n     * @param message - The raw message string from Redis.\n     * @param channel - The Redis channel name.\n     * @returns The parsed message object or null if parsing fails.\n     */\n    private parseMessage<T>(message: string, channel: string): T | null {\n        try {\n            const parsed: T = JSON.parse(message);\n            console.log(`Message received from ${channel}:`, parsed);\n            return parsed;\n        } catch (error) {\n            console.error(`Error parsing message from channel ${channel}:`, error);\n            return null;\n        }\n    }\n\n    /**\n     * Disconnects the Redis subscriber gracefully.\n     */\n    public async disconnect(): Promise<void> {\n        if (this.isConnected) {\n            try {\n                await this.subscriber.disconnect();\n                this.isConnected = false;\n                console.log('Redis subscriber disconnected.');\n            } catch (error) {\n                console.error('Error disconnecting Redis subscriber:', error);\n                throw error;\n            }\n        }\n    }\n}\n\n// Exporting a singleton instance of RedisSubscriber\nconst redisSubscriber = new RedisSubscriber();\nexport default redisSubscriber;\n","module.exports = require(\"@telegraf/session/redis\");","module.exports = require(\"axios\");","module.exports = require(\"bull\");","module.exports = require(\"php-serialize\");","module.exports = require(\"playwright-cluster\");","module.exports = require(\"redis\");","module.exports = require(\"telegraf\");","module.exports = require(\"telegraf/format\");","module.exports = require(\"winston\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"vm\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// src/workers/authWorker.ts\nimport { authQueue } from '../services/jobQueue';\nimport { AuthenticateUserRequestBody } from '../services/authService';\n\n// authService.ts\nimport {BrowserContext, Page} from 'playwright'; // Adjust based on your actual browser automation library\nimport path from 'path';\nimport fs from 'fs';\nimport { initializeCluster } from '../utils/clusterManager';\nimport { setCacheValue } from '../utils/redis/cacheHelper';\nimport axios, { AxiosResponse } from 'axios';\nimport { waitForVerificationCode } from '../utils/redis/redisHelper';\nimport {TaskInput} from \"../utils/pow/solveTask\";\nimport {getPowTask, solvePowTask, verifyPowAnswer} from \"../controllers/acceptanceController\";\nimport { sendMessageToClient} from \"../telegraf/controllers/telegramController\"; // Implement notification to Laravel\n\ninterface PowAnswer {\n    // Define based on actual answer structure\n    [key: string]: any;\n}\n\n/**\n * Asks the user for the verification code via Telegram.\n * @param {Page} page - Playwright page instance.\n * @param {string} telegramId - Telegram ID for communication.\n * @returns {Promise<boolean>} - Returns true if code submission is successful, else false.\n */\nconst askUserForCode = async (page: Page, telegramId: string): Promise<boolean> => {\n    // Set action in cache\n    await setCacheValue(`session_${telegramId}`, { action: 'collect_verification_code' }, 300);\n\n    // Send a Telegram message requesting the verification code\n    const messageSent = await sendMessageToClient(\n        telegramId,\n        'Пожалуйста, введите код подтверждения для входа в Wildberries Seller Portal.',\n        false\n    );\n    if (!messageSent) {\n        return false;\n    }\n\n    // Wait for the verification code from Redis\n    console.log('Waiting for verification code from Redis...');\n    let verificationCode: string;\n    try {\n        verificationCode = await waitForVerificationCode(telegramId);\n        console.log(`Received verification code: ${verificationCode}`);\n    } catch (error) {\n        return false;\n    }\n\n    // Validate the verification code (ensure it's 6 digits)\n    if (!/^\\d{6}$/.test(verificationCode)) {\n        return false;\n    }\n\n    // Fill the verification code into the form\n    const digits = verificationCode;\n    await page.locator('.InputCell-PB5beCCt55').first().fill(digits[0]);\n    await page.locator('li:nth-child(2) > .InputCell-PB5beCCt55').fill(digits[1]);\n    await page.locator('li:nth-child(3) > .InputCell-PB5beCCt55').fill(digits[2]);\n    await page.locator('li:nth-child(4) > .InputCell-PB5beCCt55').fill(digits[3]);\n    await page.locator('li:nth-child(5) > .InputCell-PB5beCCt55').fill(digits[4]);\n    await page.locator('li:nth-child(6) > .InputCell-PB5beCCt55').fill(digits[5]);\n\n    console.log('Filled verification code into the form.');\n\n    // Submit the verification code\n    console.log('Submitting the verification code...');\n    const codeResult = await submitCode('captchaSolution', verificationCode, page, telegramId);\n    return codeResult;\n};\n\nconst authApiUrl = 'https://seller-auth.wildberries.ru/auth/v2/auth';\nconst maxRetries = 3;\nlet retries = 0;\n\n/**\n * Submits the verification code to the authentication API.\n * @param {string} captchaSolution - The CAPTCHA solution identifier.\n * @param {string} code - The verification code entered by the user.\n * @param {Page} page - Playwright page instance.\n * @param {string} telegramId - Telegram ID for communication.\n * @returns {Promise<boolean>} - Returns true if submission is successful, else false.\n */\nconst submitCode = async (\n    captchaSolution: string,\n    code: string,\n    page: Page,\n    telegramId: string\n): Promise<boolean> => {\n    console.log('Submitting the verification code:', code);\n    console.log('retry', retries, 'maxRetries', maxRetries);\n    while (retries < maxRetries) {\n        // Wait for the API response\n        const response = await page.waitForResponse((response) =>\n            response.url().includes(authApiUrl)\n        );\n\n        // Parse the response JSON\n        const responseBody = await response.json();\n        console.log('Auth API response:', responseBody);\n\n        // Check if the response has \"mismatch code\" error\n        if (responseBody.result === 6 || responseBody.error === 'mismatch code') {\n            console.error('Code mismatch, prompting the user to try again.');\n\n            retries += 1;\n\n            if (retries >= maxRetries) {\n                console.error('Maximum retries reached, exiting.');\n                await sendMessageToClient(\n                    telegramId,\n                    'Превышено количество попыток ввода кода. Попробуйте позже.'\n                );\n                break;\n            }\n\n            await sendMessageToClient(telegramId, 'Неверный код. Попробуйте еще раз.', false);\n\n            console.log(`Retrying code submission (Attempt ${retries}/${maxRetries})...`);\n\n            const newCodeResult = await askUserForCode(page, telegramId);\n            if (newCodeResult) {\n                return true;\n            }\n        } else {\n            // Success case or unexpected response\n            console.log('Code submission successful:', responseBody);\n            return true;\n        }\n    }\n    return false;\n};\n\n\nconst handleCaptcha = async (page: Page, telegramId: string): Promise<boolean> => {\n    // Wait for the window.CAPTCHA_CLIENT_ID to be defined\n    await page.waitForFunction(() => (window as any).CAPTCHA_CLIENT_ID !== undefined);\n\n    // Retrieve the value of window.CAPTCHA_CLIENT_ID\n    const captchaClientId: string = await page.evaluate(() => (window as any).CAPTCHA_CLIENT_ID);\n    console.log('CAPTCHA client ID:', captchaClientId);\n\n    // Perform CAPTCHA Solving\n    const task: TaskInput = await getPowTask(captchaClientId);\n\n    const startTime = Date.now();\n    const answers: PowAnswer[] = await solvePowTask(task);\n\n    console.log('answers', answers);\n\n    const captchaToken: string = await verifyPowAnswer(task, answers);\n    console.log('captchaToken', captchaToken);\n\n    // Define your known captcha_token\n    const knownCaptchaToken = captchaToken;\n    // Example: '1727347696|76cdbc0609b845fab0b31a5f3f1a346a|d71150af502218593a67fd916cb174c4f48c35d1dabfb38ef4d00d088fb9806b'\n\n    // Intercept the POST request to the wb-captcha endpoint\n    await page.route('**/auth/v2/code/wb-captcha', async (route) => {\n        console.log('Intercepted CAPTCHA inside! request:', route.request().url());\n        const request = route.request();\n\n        if (request.method() === 'POST') {\n            // Parse the existing request payload\n            let postData: any;\n            try {\n                postData = await request.postDataJSON();\n            } catch (error) {\n                console.error('Failed to parse POST data:', error);\n                return route.abort();\n            }\n\n            // Inject the known captcha_token\n            postData.captcha_token = knownCaptchaToken;\n\n            // Continue the request with the modified payload\n            await route.continue({\n                postData: JSON.stringify(postData),\n                headers: {\n                    ...request.headers(),\n                    'Content-Type': 'application/json', // Ensure the content type is correct\n                },\n            });\n        } else {\n            // For non-POST requests, continue without modification\n            await route.continue();\n        }\n    });\n\n    const captchaApiUrl = 'https://seller-auth.wildberries.ru/auth/v2/code/wb-captcha';\n\n    // Trigger the API request (e.g., submitting the phone number form)\n    await page.getByTestId('submit-phone-button').click();\n\n    // Wait for the specific API response\n    const response: any = await page.waitForResponse((response) =>\n        response.url().includes(captchaApiUrl) && response.status() === 200\n    );\n\n    // Parse the response JSON\n    const responseBody = await response.json();\n\n    if (responseBody.result === 4) {\n        console.error('Captcha required:', responseBody);\n        await sendMessageToClient(\n            telegramId,\n            'Wildberries заблокировал вас на 3 часа. Попробуйте позже.'\n        );\n        // Handle CAPTCHA workflow (e.g., ask the user to solve the CAPTCHA)\n        // You can also store or process any additional data from `responseBody.payload`\n        return false;\n    } else if (responseBody.result === 3) {\n        console.log('Process result:', responseBody.result);\n        // CAPTCHA required, wait for captcha response\n        const verifyAnswerUrl = 'https://pow.wildberries.ru/api/v1/short/verify-answer';\n        const getTaskUrl = 'https://pow.wildberries.ru/api/v1/short/get-task';\n\n        // Wait for the get-task API response\n        const responseTask: any = await page.waitForResponse((response) =>\n            response.url().includes(getTaskUrl)\n        );\n        const responseBodyTask = await responseTask.json();\n        console.log('Received response from get-task API:', responseBodyTask);\n\n        // Wait for the verify-answer API response\n        const responsePow: any = await page.waitForResponse((response) =>\n            response.url().includes(verifyAnswerUrl)\n        );\n        const responseBodyPow = await responsePow.json();\n        console.log('Received response from verify-answer API:', responseBodyPow);\n        return true;\n    } else if (responseBody.result === 0) {\n        console.log('Process result:', responseBody.result);\n        // CAPTCHA not required\n        return true;\n    } else {\n        // Success case or unexpected response\n        console.log('Unexpected response:', responseBody);\n        await sendMessageToClient(\n            telegramId,\n            `Ошибка: ${responseBody.error ?? 'Неизвестная ошибка'}`\n        );\n        return false;\n    }\n};\n\n/**\n * Notifies the Laravel application about the authentication status.\n * @param {string} telegramId - The ID of telegram user.\n * @param {string} status - The status of the authentication ('success' or 'error').\n * @param {object} payload - Additional data to send.\n */\nconst notifyAuthResult = async (telegramId: string, status: string, payload: object): Promise<void> => {\n    try {\n        await sendMessageToClient(telegramId, `Статус аутентификации: ${status}\\n Пожалуйста, попробуйте еще раз`);\n    } catch (error: any) {\n        console.error('Failed to notify Laravel:', error.message);\n    }\n};\n\n// Process jobs from the 'authentication' queue\nauthQueue.process(async (job) => {\n    const { userId, telegramId, credentials, headless } = job.data;\n\n    let context: BrowserContext | undefined;\n\n    // Set custom headers\n    const customHeaders = {\n        'Content-Type': 'application/json;charset=UTF-8',\n        Accept: '*/*',\n        'User-Agent':\n            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) ' +\n            'AppleWebKit/537.36 (KHTML, like Gecko) ' +\n            'Chrome/128.0.0.0 Safari/537.36',\n        Origin: 'https://seller.wildberries.ru',\n        Referer: 'https://seller.wildberries.ru/',\n    };\n\n    try {\n        // Initialize the cluster\n        const cluster = await initializeCluster();\n\n        // Define the task for authentication\n        cluster.queue(\n            {\n                userId,\n                telegramId,\n                credentials,\n                headless: headless !== undefined ? headless : true,\n            },\n            async ({ page, data }): Promise<void> => {\n                const { userId, telegramId, credentials, headless } = data as AuthenticateUserRequestBody;\n\n                try {\n                    // Apply custom headers to the context\n                    context = await page.context();\n                    await context.setExtraHTTPHeaders({\n                        'Content-Type': customHeaders['Content-Type'],\n                        Accept: customHeaders['Accept'],\n                        Origin: customHeaders['Origin'],\n                        Referer: customHeaders['Referer'],\n                    });\n\n                    await page.setViewportSize({ width: 1920, height: 1080 });\n\n                    // Enhanced logging for debugging\n                    page.on('console', (msg) => console.log('PAGE LOG:', msg.text()));\n                    page.on('request', (request) => {\n                        if (request.url().includes('/auth/v2/auth')) {\n                            console.log(\n                                'Auth Request:',\n                                request.method(),\n                                request.url(),\n                                request.headers(),\n                                request.postData()\n                            );\n                        }\n                    });\n                    page.on('response', (response) => {\n                        if (response.url().includes('/auth/v2/auth')) {\n                            console.log('Auth Response:', response.status(), response.url(), response.statusText());\n                        }\n                    });\n\n                    // Intercept and modify auth requests\n                    await page.route('**/auth/v2/auth', async (route) => {\n                        const request = route.request();\n\n                        if (request.method() === 'POST') {\n                            const headers = {\n                                ...request.headers(),\n                                'Content-Type': 'application/json',\n                            };\n\n                            console.log('Original Headers:', request.headers());\n                            console.log('Modified Headers:', headers);\n\n                            await route.continue({\n                                headers: headers,\n                            });\n                        } else {\n                            await route.continue();\n                        }\n                    });\n\n                    // Intercept and modify auth requests\n                    await page.route('**/auth/v2/auth/slide-v3', async (route) => {\n                        const request = route.request();\n\n                        if (request.method() === 'POST') {\n                            const headers = {\n                                ...request.headers(),\n                                'Content-Type': 'application/json',\n                            };\n\n                            console.log('Original Headers:', request.headers());\n                            console.log('Modified Headers:', headers);\n\n                            await route.continue({\n                                headers: headers,\n                            });\n                        } else {\n                            await route.continue();\n                        }\n                    });\n\n                    // Intercept and modify auth requests\n                    await page.route('**/auth/v2/auth/slide-v3-confirm', async (route) => {\n                        const request = route.request();\n\n                        if (request.method() === 'POST') {\n                            const headers = {\n                                ...request.headers(),\n                                'Content-Type': 'application/json',\n                            };\n\n                            console.log('Original Headers:', request.headers());\n                            console.log('Modified Headers:', headers);\n\n                            await route.continue({\n                                headers: headers,\n                            });\n                        } else {\n                            await route.continue();\n                        }\n                    });\n\n                    // Navigate to the login page\n                    await page.goto('https://seller-auth.wildberries.ru/');\n                    console.log('Navigated to the login page.');\n\n                    // Interact with the login form\n                    await page.locator('div').filter({ hasText: /^\\+7$/ }).nth(2).click();\n                    await page.getByTestId('phone-input').click();\n                    await page.getByTestId('phone-input').fill(credentials.phone);\n                    console.log('Filled phone number into the form.');\n\n                    // Wait 1 second\n                    await page.waitForTimeout(1000);\n\n                    // Handle CAPTCHA solving\n                    const captchaResult = await handleCaptcha(page, telegramId);\n                    if (!captchaResult) {\n                        throw new Error('Failed to handle CAPTCHA.');\n                    }\n\n                    // Ask user for the verification code via Telegram\n                    const codeResult = await askUserForCode(page, telegramId);\n                    if (!codeResult) {\n                        throw new Error('Failed to submit verification code.');\n                    }\n\n                    console.log('Successfully authenticated the user. Going to the Seller Portal...');\n                    await page.goto('https://seller.wildberries.ru/');\n                    await page.waitForLoadState('networkidle');\n                    await page.getByTestId('menu.section.supply-management-button-link');\n                    console.log('Check for specific cookie');\n\n                    // Wait for the 'x-supplier-id' cookie to be set\n                    const maxRetries = 20; // You can adjust this based on the expected time\n                    let retries = 0;\n                    let supplierIdCookie: { name: string; value: string } | undefined = undefined;\n\n                    while (retries < maxRetries) {\n                        const cookies = await context.cookies();\n                        supplierIdCookie = cookies.find((cookie) => cookie.name === 'x-supplier-id');\n\n                        if (supplierIdCookie) {\n                            console.log('x-supplier-id cookie is set:', supplierIdCookie);\n                            break; // Cookie is found, proceed with saving the session\n                        }\n\n                        // Wait 500ms before checking again\n                        await page.waitForTimeout(500);\n                        retries += 1;\n                    }\n\n                    if (!supplierIdCookie) {\n                        throw new Error('x-supplier-id cookie was not set in the expected time frame.');\n                    }\n\n                    console.log('Navigated to the Seller Portal. Waiting for the page to load...');\n                    console.log('Saving cookies...');\n                    // Save the authenticated state to state.json\n                    const storageState = await context.storageState();\n                    const statePath = path.join('/var/www/wb-back/storage/state', `${userId}.json`);\n                    fs.writeFileSync(statePath, JSON.stringify(storageState, null, 2));\n\n                    console.log(`Authentication state saved to ${statePath}`);\n\n                    // Store success in Redis cache using setCacheValue and return path to Laravel state\n                    await setCacheValue(\n                        `auth_state_${userId}`,\n                        {\n                            success: true,\n                            statePath,\n                        },\n                        3600\n                    );\n\n                    credentials.statePath = statePath\n                    await notifyAuthResult(telegramId, 'success', { userId, telegramId, credentials });\n\n                    console.log(`Authentication job for user ${userId} completed.`);\n                } catch (error: any) {\n                    console.error(`Error during authentication process: ${error.message}`);\n                    // Store failure in Redis cache using setCacheValue\n                    await setCacheValue(\n                        `auth_state_${telegramId}`,\n                        {\n                            success: false,\n                            error: error.message,\n                        },\n                        3600\n                    );\n                    await notifyAuthResult(telegramId, 'error', { error: error.message });\n                } finally {\n                    // Ensure that the context is properly closed after the task finishes\n                    if (context) {\n                        await context.close(); // This will close the context and the associated pages\n                        console.log('Browser context closed.');\n                    }\n                }\n            }\n        );\n    } catch (error: any) {\n        console.error('Error during cluster execution:', error.message);\n        // Store failure in Redis cache using setCacheValue\n        await setCacheValue(\n            `auth_state_${telegramId}`,\n            {\n                success: false,\n                error: error.message,\n            },\n            3600\n        );\n        await notifyAuthResult(telegramId, 'error', { error: error.message });\n    }\n});\n"],"names":[],"sourceRoot":""}